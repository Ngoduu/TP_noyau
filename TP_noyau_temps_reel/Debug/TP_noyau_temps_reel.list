
TP_noyau_temps_reel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006530  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006784  08006784  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800678c  0800678c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800678c  0800678c  0001678c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f8  2000006c  08006800  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004264  08006800  00024264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001608d  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000357a  00000000  00000000  0003616c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  000396e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eff  00000000  00000000  0003aa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029598  00000000  00000000  0003b94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000170df  00000000  00000000  00064ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc4db  00000000  00000000  0007bfc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005618  00000000  00000000  001784a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0017dabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080066e8 	.word	0x080066e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080066e8 	.word	0x080066e8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000090 	.word	0x20000090
 800053c:	200000e4 	.word	0x200000e4

08000540 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
 800054a:	2300      	movs	r3, #0
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2101      	movs	r1, #1
 8000554:	4618      	mov	r0, r3
 8000556:	f003 fc2f 	bl	8003db8 <osSemaphoreCreate>
 800055a:	4603      	mov	r3, r0
 800055c:	4a0b      	ldr	r2, [pc, #44]	; (800058c <MX_FREERTOS_Init+0x4c>)
 800055e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <MX_FREERTOS_Init+0x50>)
 8000562:	1d3c      	adds	r4, r7, #4
 8000564:	461d      	mov	r5, r3
 8000566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 fbbe 	bl	8003cf8 <osThreadCreate>
 800057c:	4603      	mov	r3, r0
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <MX_FREERTOS_Init+0x54>)
 8000580:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000582:	bf00      	nop
 8000584:	3728      	adds	r7, #40	; 0x28
 8000586:	46bd      	mov	sp, r7
 8000588:	bdb0      	pop	{r4, r5, r7, pc}
 800058a:	bf00      	nop
 800058c:	2000008c 	.word	0x2000008c
 8000590:	0800670c 	.word	0x0800670c
 8000594:	20000088 	.word	0x20000088

08000598 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOI, LED1_Pin);
 80005a0:	2102      	movs	r1, #2
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <StartDefaultTask+0x18>)
 80005a4:	f001 fabd 	bl	8001b22 <HAL_GPIO_TogglePin>
    osDelay(100/portTICK_PERIOD_MS);
 80005a8:	2064      	movs	r0, #100	; 0x64
 80005aa:	f003 fbf1 	bl	8003d90 <osDelay>
	HAL_GPIO_TogglePin(GPIOI, LED1_Pin);
 80005ae:	e7f7      	b.n	80005a0 <StartDefaultTask+0x8>
 80005b0:	40022000 	.word	0x40022000

080005b4 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b090      	sub	sp, #64	; 0x40
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ca:	4bad      	ldr	r3, [pc, #692]	; (8000880 <MX_GPIO_Init+0x2cc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4aac      	ldr	r2, [pc, #688]	; (8000880 <MX_GPIO_Init+0x2cc>)
 80005d0:	f043 0310 	orr.w	r3, r3, #16
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4baa      	ldr	r3, [pc, #680]	; (8000880 <MX_GPIO_Init+0x2cc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0310 	and.w	r3, r3, #16
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
 80005e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005e2:	4ba7      	ldr	r3, [pc, #668]	; (8000880 <MX_GPIO_Init+0x2cc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4aa6      	ldr	r2, [pc, #664]	; (8000880 <MX_GPIO_Init+0x2cc>)
 80005e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4ba4      	ldr	r3, [pc, #656]	; (8000880 <MX_GPIO_Init+0x2cc>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
 80005f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4ba1      	ldr	r3, [pc, #644]	; (8000880 <MX_GPIO_Init+0x2cc>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4aa0      	ldr	r2, [pc, #640]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b9e      	ldr	r3, [pc, #632]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	623b      	str	r3, [r7, #32]
 8000610:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	4b9b      	ldr	r3, [pc, #620]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a9a      	ldr	r2, [pc, #616]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b98      	ldr	r3, [pc, #608]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	61fb      	str	r3, [r7, #28]
 8000628:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	4b95      	ldr	r3, [pc, #596]	; (8000880 <MX_GPIO_Init+0x2cc>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a94      	ldr	r2, [pc, #592]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b92      	ldr	r3, [pc, #584]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	61bb      	str	r3, [r7, #24]
 8000640:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b8f      	ldr	r3, [pc, #572]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a8e      	ldr	r2, [pc, #568]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b8c      	ldr	r3, [pc, #560]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800065a:	4b89      	ldr	r3, [pc, #548]	; (8000880 <MX_GPIO_Init+0x2cc>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a88      	ldr	r2, [pc, #544]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b86      	ldr	r3, [pc, #536]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000672:	4b83      	ldr	r3, [pc, #524]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a82      	ldr	r2, [pc, #520]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b80      	ldr	r3, [pc, #512]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800068a:	4b7d      	ldr	r3, [pc, #500]	; (8000880 <MX_GPIO_Init+0x2cc>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a7c      	ldr	r2, [pc, #496]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000690:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b7a      	ldr	r3, [pc, #488]	; (8000880 <MX_GPIO_Init+0x2cc>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a2:	4b77      	ldr	r3, [pc, #476]	; (8000880 <MX_GPIO_Init+0x2cc>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a76      	ldr	r2, [pc, #472]	; (8000880 <MX_GPIO_Init+0x2cc>)
 80006a8:	f043 0320 	orr.w	r3, r3, #32
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b74      	ldr	r3, [pc, #464]	; (8000880 <MX_GPIO_Init+0x2cc>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0320 	and.w	r3, r3, #32
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	4b71      	ldr	r3, [pc, #452]	; (8000880 <MX_GPIO_Init+0x2cc>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a70      	ldr	r2, [pc, #448]	; (8000880 <MX_GPIO_Init+0x2cc>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b6e      	ldr	r3, [pc, #440]	; (8000880 <MX_GPIO_Init+0x2cc>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2120      	movs	r1, #32
 80006d6:	486b      	ldr	r0, [pc, #428]	; (8000884 <MX_GPIO_Init+0x2d0>)
 80006d8:	f001 fa0a 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED1_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f241 010e 	movw	r1, #4110	; 0x100e
 80006e2:	4869      	ldr	r0, [pc, #420]	; (8000888 <MX_GPIO_Init+0x2d4>)
 80006e4:	f001 fa04 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2108      	movs	r1, #8
 80006ec:	4867      	ldr	r0, [pc, #412]	; (800088c <MX_GPIO_Init+0x2d8>)
 80006ee:	f001 f9ff 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f8:	4865      	ldr	r0, [pc, #404]	; (8000890 <MX_GPIO_Init+0x2dc>)
 80006fa:	f001 f9f9 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	21c8      	movs	r1, #200	; 0xc8
 8000702:	4864      	ldr	r0, [pc, #400]	; (8000894 <MX_GPIO_Init+0x2e0>)
 8000704:	f001 f9f4 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000708:	2310      	movs	r3, #16
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000718:	230e      	movs	r3, #14
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000720:	4619      	mov	r1, r3
 8000722:	485d      	ldr	r0, [pc, #372]	; (8000898 <MX_GPIO_Init+0x2e4>)
 8000724:	f001 f838 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000728:	2308      	movs	r3, #8
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000738:	4619      	mov	r1, r3
 800073a:	4857      	ldr	r0, [pc, #348]	; (8000898 <MX_GPIO_Init+0x2e4>)
 800073c:	f001 f82c 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000740:	2304      	movs	r3, #4
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000750:	2309      	movs	r3, #9
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000758:	4619      	mov	r1, r3
 800075a:	484f      	ldr	r0, [pc, #316]	; (8000898 <MX_GPIO_Init+0x2e4>)
 800075c:	f001 f81c 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000760:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000772:	230b      	movs	r3, #11
 8000774:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800077a:	4619      	mov	r1, r3
 800077c:	4845      	ldr	r0, [pc, #276]	; (8000894 <MX_GPIO_Init+0x2e0>)
 800077e:	f001 f80b 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000782:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000794:	230c      	movs	r3, #12
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800079c:	4619      	mov	r1, r3
 800079e:	483e      	ldr	r0, [pc, #248]	; (8000898 <MX_GPIO_Init+0x2e4>)
 80007a0:	f000 fffa 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80007a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007aa:	2312      	movs	r3, #18
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b6:	2304      	movs	r3, #4
 80007b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007be:	4619      	mov	r1, r3
 80007c0:	4836      	ldr	r0, [pc, #216]	; (800089c <MX_GPIO_Init+0x2e8>)
 80007c2:	f000 ffe9 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80007c6:	f643 4323 	movw	r3, #15395	; 0x3c23
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80007d8:	230a      	movs	r3, #10
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007e0:	4619      	mov	r1, r3
 80007e2:	482e      	ldr	r0, [pc, #184]	; (800089c <MX_GPIO_Init+0x2e8>)
 80007e4:	f000 ffd8 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80007e8:	2310      	movs	r3, #16
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007f8:	2302      	movs	r3, #2
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000800:	4619      	mov	r1, r3
 8000802:	4826      	ldr	r0, [pc, #152]	; (800089c <MX_GPIO_Init+0x2e8>)
 8000804:	f000 ffc8 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000818:	2308      	movs	r3, #8
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000820:	4619      	mov	r1, r3
 8000822:	4818      	ldr	r0, [pc, #96]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000824:	f000 ffb8 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000828:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800083a:	230c      	movs	r3, #12
 800083c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000842:	4619      	mov	r1, r3
 8000844:	4816      	ldr	r0, [pc, #88]	; (80008a0 <MX_GPIO_Init+0x2ec>)
 8000846:	f000 ffa7 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800084a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800085c:	2301      	movs	r3, #1
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000864:	4619      	mov	r1, r3
 8000866:	480f      	ldr	r0, [pc, #60]	; (80008a4 <MX_GPIO_Init+0x2f0>)
 8000868:	f000 ff96 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800086c:	2360      	movs	r3, #96	; 0x60
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800087c:	230d      	movs	r3, #13
 800087e:	e013      	b.n	80008a8 <MX_GPIO_Init+0x2f4>
 8000880:	40023800 	.word	0x40023800
 8000884:	40020c00 	.word	0x40020c00
 8000888:	40022000 	.word	0x40022000
 800088c:	40022800 	.word	0x40022800
 8000890:	40021c00 	.word	0x40021c00
 8000894:	40021800 	.word	0x40021800
 8000898:	40021000 	.word	0x40021000
 800089c:	40020400 	.word	0x40020400
 80008a0:	40020800 	.word	0x40020800
 80008a4:	40020000 	.word	0x40020000
 80008a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ae:	4619      	mov	r1, r3
 80008b0:	48bc      	ldr	r0, [pc, #752]	; (8000ba4 <MX_GPIO_Init+0x5f0>)
 80008b2:	f000 ff71 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80008b6:	2340      	movs	r3, #64	; 0x40
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008c6:	230a      	movs	r3, #10
 80008c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ce:	4619      	mov	r1, r3
 80008d0:	48b5      	ldr	r0, [pc, #724]	; (8000ba8 <MX_GPIO_Init+0x5f4>)
 80008d2:	f000 ff61 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80008d6:	f248 1333 	movw	r3, #33075	; 0x8133
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008e8:	230c      	movs	r3, #12
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f0:	4619      	mov	r1, r3
 80008f2:	48ae      	ldr	r0, [pc, #696]	; (8000bac <MX_GPIO_Init+0x5f8>)
 80008f4:	f000 ff50 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80008f8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800090a:	230e      	movs	r3, #14
 800090c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800090e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000912:	4619      	mov	r1, r3
 8000914:	48a6      	ldr	r0, [pc, #664]	; (8000bb0 <MX_GPIO_Init+0x5fc>)
 8000916:	f000 ff3f 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800091a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800092c:	4619      	mov	r1, r3
 800092e:	48a0      	ldr	r0, [pc, #640]	; (8000bb0 <MX_GPIO_Init+0x5fc>)
 8000930:	f000 ff32 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000934:	2340      	movs	r3, #64	; 0x40
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000938:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000946:	4619      	mov	r1, r3
 8000948:	489a      	ldr	r0, [pc, #616]	; (8000bb4 <MX_GPIO_Init+0x600>)
 800094a:	f000 ff25 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800094e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000960:	230c      	movs	r3, #12
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000968:	4619      	mov	r1, r3
 800096a:	4892      	ldr	r0, [pc, #584]	; (8000bb4 <MX_GPIO_Init+0x600>)
 800096c:	f000 ff14 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000970:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000982:	230a      	movs	r3, #10
 8000984:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098a:	4619      	mov	r1, r3
 800098c:	488a      	ldr	r0, [pc, #552]	; (8000bb8 <MX_GPIO_Init+0x604>)
 800098e:	f000 ff03 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000992:	23f0      	movs	r3, #240	; 0xf0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009a2:	230a      	movs	r3, #10
 80009a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009aa:	4619      	mov	r1, r3
 80009ac:	4883      	ldr	r0, [pc, #524]	; (8000bbc <MX_GPIO_Init+0x608>)
 80009ae:	f000 fef3 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80009b2:	23f7      	movs	r3, #247	; 0xf7
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009c2:	230e      	movs	r3, #14
 80009c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80009c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ca:	4619      	mov	r1, r3
 80009cc:	487c      	ldr	r0, [pc, #496]	; (8000bc0 <MX_GPIO_Init+0x60c>)
 80009ce:	f000 fee3 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80009d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80009e4:	2309      	movs	r3, #9
 80009e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ec:	4619      	mov	r1, r3
 80009ee:	486f      	ldr	r0, [pc, #444]	; (8000bac <MX_GPIO_Init+0x5f8>)
 80009f0:	f000 fed2 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80009f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a06:	230a      	movs	r3, #10
 8000a08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4866      	ldr	r0, [pc, #408]	; (8000bac <MX_GPIO_Init+0x5f8>)
 8000a12:	f000 fec1 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a16:	2320      	movs	r3, #32
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4861      	ldr	r0, [pc, #388]	; (8000bb4 <MX_GPIO_Init+0x600>)
 8000a2e:	f000 feb3 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000a32:	2308      	movs	r3, #8
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a42:	230d      	movs	r3, #13
 8000a44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4859      	ldr	r0, [pc, #356]	; (8000bb4 <MX_GPIO_Init+0x600>)
 8000a4e:	f000 fea3 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED1_Pin|LCD_DISP_Pin;
 8000a52:	f241 030e 	movw	r3, #4110	; 0x100e
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4854      	ldr	r0, [pc, #336]	; (8000bbc <MX_GPIO_Init+0x608>)
 8000a6c:	f000 fe94 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a82:	4619      	mov	r1, r3
 8000a84:	484f      	ldr	r0, [pc, #316]	; (8000bc4 <MX_GPIO_Init+0x610>)
 8000a86:	f000 fe87 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a8a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4848      	ldr	r0, [pc, #288]	; (8000bc8 <MX_GPIO_Init+0x614>)
 8000aa8:	f000 fe76 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000aac:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000abe:	230e      	movs	r3, #14
 8000ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	483c      	ldr	r0, [pc, #240]	; (8000bbc <MX_GPIO_Init+0x608>)
 8000aca:	f000 fe65 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000ace:	2308      	movs	r3, #8
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4836      	ldr	r0, [pc, #216]	; (8000bc0 <MX_GPIO_Init+0x60c>)
 8000ae6:	f000 fe57 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000afc:	230d      	movs	r3, #13
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b04:	4619      	mov	r1, r3
 8000b06:	4829      	ldr	r0, [pc, #164]	; (8000bac <MX_GPIO_Init+0x5f8>)
 8000b08:	f000 fe46 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4825      	ldr	r0, [pc, #148]	; (8000bb4 <MX_GPIO_Init+0x600>)
 8000b20:	f000 fe3a 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000b24:	2304      	movs	r3, #4
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b34:	230c      	movs	r3, #12
 8000b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <MX_GPIO_Init+0x600>)
 8000b40:	f000 fe2a 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000b44:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b56:	4619      	mov	r1, r3
 8000b58:	481c      	ldr	r0, [pc, #112]	; (8000bcc <MX_GPIO_Init+0x618>)
 8000b5a:	f000 fe1d 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b74:	4619      	mov	r1, r3
 8000b76:	4815      	ldr	r0, [pc, #84]	; (8000bcc <MX_GPIO_Init+0x618>)
 8000b78:	f000 fe0e 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000b7c:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b8e:	230d      	movs	r3, #13
 8000b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b96:	4619      	mov	r1, r3
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <MX_GPIO_Init+0x618>)
 8000b9a:	f000 fdfd 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e016      	b.n	8000bd0 <MX_GPIO_Init+0x61c>
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	40021800 	.word	0x40021800
 8000bb0:	40022400 	.word	0x40022400
 8000bb4:	40020c00 	.word	0x40020c00
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40022000 	.word	0x40022000
 8000bc0:	40022800 	.word	0x40022800
 8000bc4:	40020800 	.word	0x40020800
 8000bc8:	40021400 	.word	0x40021400
 8000bcc:	40021c00 	.word	0x40021c00
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000bde:	2302      	movs	r3, #2
 8000be0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be6:	4619      	mov	r1, r3
 8000be8:	489d      	ldr	r0, [pc, #628]	; (8000e60 <MX_GPIO_Init+0x8ac>)
 8000bea:	f000 fdd5 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4896      	ldr	r0, [pc, #600]	; (8000e64 <MX_GPIO_Init+0x8b0>)
 8000c0c:	f000 fdc4 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c16:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c24:	4619      	mov	r1, r3
 8000c26:	488e      	ldr	r0, [pc, #568]	; (8000e60 <MX_GPIO_Init+0x8ac>)
 8000c28:	f000 fdb6 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000c2c:	23c0      	movs	r3, #192	; 0xc0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c44:	4619      	mov	r1, r3
 8000c46:	4888      	ldr	r0, [pc, #544]	; (8000e68 <MX_GPIO_Init+0x8b4>)
 8000c48:	f000 fda6 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000c4c:	2310      	movs	r3, #16
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c64:	4619      	mov	r1, r3
 8000c66:	4881      	ldr	r0, [pc, #516]	; (8000e6c <MX_GPIO_Init+0x8b8>)
 8000c68:	f000 fd96 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c6c:	2328      	movs	r3, #40	; 0x28
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c7c:	230c      	movs	r3, #12
 8000c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c84:	4619      	mov	r1, r3
 8000c86:	4879      	ldr	r0, [pc, #484]	; (8000e6c <MX_GPIO_Init+0x8b8>)
 8000c88:	f000 fd86 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000c8c:	23c8      	movs	r3, #200	; 0xc8
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4873      	ldr	r0, [pc, #460]	; (8000e70 <MX_GPIO_Init+0x8bc>)
 8000ca4:	f000 fd78 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000ca8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	486d      	ldr	r0, [pc, #436]	; (8000e74 <MX_GPIO_Init+0x8c0>)
 8000cbe:	f000 fd6b 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4862      	ldr	r0, [pc, #392]	; (8000e68 <MX_GPIO_Init+0x8b4>)
 8000cde:	f000 fd5b 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	485a      	ldr	r0, [pc, #360]	; (8000e68 <MX_GPIO_Init+0x8b4>)
 8000cfe:	f000 fd4b 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d02:	2332      	movs	r3, #50	; 0x32
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d12:	230b      	movs	r3, #11
 8000d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4852      	ldr	r0, [pc, #328]	; (8000e68 <MX_GPIO_Init+0x8b4>)
 8000d1e:	f000 fd3b 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d22:	2304      	movs	r3, #4
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d32:	2309      	movs	r3, #9
 8000d34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	484e      	ldr	r0, [pc, #312]	; (8000e78 <MX_GPIO_Init+0x8c4>)
 8000d3e:	f000 fd2b 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000d42:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d54:	2309      	movs	r3, #9
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4847      	ldr	r0, [pc, #284]	; (8000e7c <MX_GPIO_Init+0x8c8>)
 8000d60:	f000 fd1a 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d64:	2304      	movs	r3, #4
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d74:	4619      	mov	r1, r3
 8000d76:	483e      	ldr	r0, [pc, #248]	; (8000e70 <MX_GPIO_Init+0x8bc>)
 8000d78:	f000 fd0e 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d7c:	2386      	movs	r3, #134	; 0x86
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d8c:	230b      	movs	r3, #11
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d94:	4619      	mov	r1, r3
 8000d96:	4833      	ldr	r0, [pc, #204]	; (8000e64 <MX_GPIO_Init+0x8b0>)
 8000d98:	f000 fcfe 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da0:	2303      	movs	r3, #3
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dac:	4619      	mov	r1, r3
 8000dae:	482d      	ldr	r0, [pc, #180]	; (8000e64 <MX_GPIO_Init+0x8b0>)
 8000db0:	f000 fcf2 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000db4:	2350      	movs	r3, #80	; 0x50
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000dc4:	230d      	movs	r3, #13
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4825      	ldr	r0, [pc, #148]	; (8000e64 <MX_GPIO_Init+0x8b0>)
 8000dd0:	f000 fce2 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000dd4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dda:	2312      	movs	r3, #18
 8000ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000de6:	2304      	movs	r3, #4
 8000de8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dee:	4619      	mov	r1, r3
 8000df0:	481e      	ldr	r0, [pc, #120]	; (8000e6c <MX_GPIO_Init+0x8b8>)
 8000df2:	f000 fcd1 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000df6:	2328      	movs	r3, #40	; 0x28
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e06:	230a      	movs	r3, #10
 8000e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4814      	ldr	r0, [pc, #80]	; (8000e64 <MX_GPIO_Init+0x8b0>)
 8000e12:	f000 fcc1 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000e16:	2340      	movs	r3, #64	; 0x40
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e26:	2309      	movs	r3, #9
 8000e28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480e      	ldr	r0, [pc, #56]	; (8000e6c <MX_GPIO_Init+0x8b8>)
 8000e32:	f000 fcb1 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000e36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e48:	2305      	movs	r3, #5
 8000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e50:	4619      	mov	r1, r3
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <MX_GPIO_Init+0x8c4>)
 8000e54:	f000 fca0 	bl	8001798 <HAL_GPIO_Init>

}
 8000e58:	bf00      	nop
 8000e5a:	3740      	adds	r7, #64	; 0x40
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40022000 	.word	0x40022000
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40020800 	.word	0x40020800
 8000e6c:	40021c00 	.word	0x40021c00
 8000e70:	40021800 	.word	0x40021800
 8000e74:	40021400 	.word	0x40021400
 8000e78:	40020400 	.word	0x40020400
 8000e7c:	40020c00 	.word	0x40020c00

08000e80 <giveTask>:

TaskHandle_t xTaskGiveHandle;
TaskHandle_t xTaskTakeHandle;

void giveTask(void const * argument)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	uint32_t delay = 100;
 8000e88:	2364      	movs	r3, #100	; 0x64
 8000e8a:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		printf("Giving \r\n");
 8000e8c:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <giveTask+0x34>)
 8000e8e:	f005 f887 	bl	8005fa0 <puts>
		vTaskDelay(delay/portTICK_PERIOD_MS);
 8000e92:	68f8      	ldr	r0, [r7, #12]
 8000e94:	f003 fd3a 	bl	800490c <vTaskDelay>
		xTaskNotifyGive(xTaskTakeHandle);
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <giveTask+0x38>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	f004 fa6b 	bl	800537c <xTaskGenericNotify>
		//xSemaphoreGive(myBinarySem01);
		printf("Token given \r\n");
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <giveTask+0x3c>)
 8000ea8:	f005 f87a 	bl	8005fa0 <puts>
		delay = delay + 100;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	3364      	adds	r3, #100	; 0x64
 8000eb0:	60fb      	str	r3, [r7, #12]
	{
 8000eb2:	e7eb      	b.n	8000e8c <giveTask+0xc>
 8000eb4:	08006728 	.word	0x08006728
 8000eb8:	200002ec 	.word	0x200002ec
 8000ebc:	08006734 	.word	0x08006734

08000ec0 <takeTask>:
	}
}
void takeTask(void const * argument)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	{
		/*if(xSemaphoreTake(myBinarySem01,1000) == pdTRUE){
			printf("Took \n \r");
		}*/

		if(ulTaskNotifyTake(pdTRUE,1000))
 8000ec8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f004 fa0d 	bl	80052ec <ulTaskNotifyTake>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <takeTask+0x20>
		{
			printf("Took \r\n");
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <takeTask+0x2c>)
 8000eda:	f005 f861 	bl	8005fa0 <puts>
 8000ede:	e7f3      	b.n	8000ec8 <takeTask+0x8>
		}

		else
		{
			printf("Error \r\n");
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <takeTask+0x30>)
 8000ee2:	f005 f85d 	bl	8005fa0 <puts>
			HAL_NVIC_SystemReset();
 8000ee6:	f000 fc52 	bl	800178e <HAL_NVIC_SystemReset>
		if(ulTaskNotifyTake(pdTRUE,1000))
 8000eea:	e7ed      	b.n	8000ec8 <takeTask+0x8>
 8000eec:	08006744 	.word	0x08006744
 8000ef0:	0800674c 	.word	0x0800674c

08000ef4 <__io_putchar>:
		}

	}
}

int __io_putchar(int ch) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000efc:	1d39      	adds	r1, r7, #4
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f02:	2201      	movs	r2, #1
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <__io_putchar+0x20>)
 8000f06:	f002 fa51 	bl	80033ac <HAL_UART_Transmit>
	return ch;
 8000f0a:	687b      	ldr	r3, [r7, #4]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000340 	.word	0x20000340

08000f18 <main>:
 * @retval int
 */


int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f1e:	f000 fb10 	bl	8001542 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f22:	f000 f837 	bl	8000f94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f26:	f7ff fb45 	bl	80005b4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000f2a:	f000 fa2f 	bl	800138c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	myBinarySem01 = xSemaphoreCreateBinary();
 8000f2e:	2203      	movs	r2, #3
 8000f30:	2100      	movs	r1, #0
 8000f32:	2001      	movs	r0, #1
 8000f34:	f003 f912 	bl	800415c <xQueueGenericCreate>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <main+0x60>)
 8000f3c:	6013      	str	r3, [r2, #0]

	xTaskCreate(giveTask,
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <main+0x64>)
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	2301      	movs	r3, #1
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2300      	movs	r3, #0
 8000f48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <main+0x68>)
 8000f4e:	480d      	ldr	r0, [pc, #52]	; (8000f84 <main+0x6c>)
 8000f50:	f003 fba3 	bl	800469a <xTaskCreate>
			NULL,
			1,
			&xTaskGiveHandle
	);

	xTaskCreate(takeTask,
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <main+0x70>)
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	2302      	movs	r3, #2
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f62:	490a      	ldr	r1, [pc, #40]	; (8000f8c <main+0x74>)
 8000f64:	480a      	ldr	r0, [pc, #40]	; (8000f90 <main+0x78>)
 8000f66:	f003 fb98 	bl	800469a <xTaskCreate>
			NULL,
			2,
			&xTaskTakeHandle
	);

	vTaskStartScheduler();
 8000f6a:	f003 fd05 	bl	8004978 <vTaskStartScheduler>


	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8000f6e:	f7ff fae7 	bl	8000540 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000f72:	f002 feba 	bl	8003cea <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000f76:	e7fe      	b.n	8000f76 <main+0x5e>
 8000f78:	200002e4 	.word	0x200002e4
 8000f7c:	200002e8 	.word	0x200002e8
 8000f80:	08006754 	.word	0x08006754
 8000f84:	08000e81 	.word	0x08000e81
 8000f88:	200002ec 	.word	0x200002ec
 8000f8c:	0800675c 	.word	0x0800675c
 8000f90:	08000ec1 	.word	0x08000ec1

08000f94 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b094      	sub	sp, #80	; 0x50
 8000f98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	2230      	movs	r2, #48	; 0x30
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f005 f8dc 	bl	8006160 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000fb8:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <SystemClock_Config+0xd0>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	4a29      	ldr	r2, [pc, #164]	; (8001064 <SystemClock_Config+0xd0>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <SystemClock_Config+0xd0>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd0:	4b25      	ldr	r3, [pc, #148]	; (8001068 <SystemClock_Config+0xd4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a24      	ldr	r2, [pc, #144]	; (8001068 <SystemClock_Config+0xd4>)
 8000fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <SystemClock_Config+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fec:	2301      	movs	r3, #1
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001000:	23d8      	movs	r3, #216	; 0xd8
 8001002:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001004:	2302      	movs	r3, #2
 8001006:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001008:	2302      	movs	r3, #2
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 0320 	add.w	r3, r7, #32
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fdf1 	bl	8001bf8 <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 800101c:	f000 f838 	bl	8001090 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001020:	f000 fd9a 	bl	8001b58 <HAL_PWREx_EnableOverDrive>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x9a>
	{
		Error_Handler();
 800102a:	f000 f831 	bl	8001090 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	230f      	movs	r3, #15
 8001030:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001032:	2302      	movs	r3, #2
 8001034:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800103a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800103e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2107      	movs	r1, #7
 800104c:	4618      	mov	r0, r3
 800104e:	f001 f877 	bl	8002140 <HAL_RCC_ClockConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8001058:	f000 f81a 	bl	8001090 <Error_Handler>
	}
}
 800105c:	bf00      	nop
 800105e:	3750      	adds	r7, #80	; 0x50
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800107e:	f000 fa6d 	bl	800155c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40001000 	.word	0x40001000

08001090 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001094:	b672      	cpsid	i
}
 8001096:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001098:	e7fe      	b.n	8001098 <Error_Handler+0x8>
	...

0800109c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HAL_MspInit+0x4c>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_MspInit+0x4c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_MspInit+0x4c>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_MspInit+0x4c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	210f      	movs	r1, #15
 80010d6:	f06f 0001 	mvn.w	r0, #1
 80010da:	f000 fb2e 	bl	800173a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800

080010ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08e      	sub	sp, #56	; 0x38
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010fc:	4b33      	ldr	r3, [pc, #204]	; (80011cc <HAL_InitTick+0xe0>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	4a32      	ldr	r2, [pc, #200]	; (80011cc <HAL_InitTick+0xe0>)
 8001102:	f043 0310 	orr.w	r3, r3, #16
 8001106:	6413      	str	r3, [r2, #64]	; 0x40
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_InitTick+0xe0>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f003 0310 	and.w	r3, r3, #16
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001114:	f107 0210 	add.w	r2, r7, #16
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f001 f9f4 	bl	800250c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112a:	2b00      	cmp	r3, #0
 800112c:	d103      	bne.n	8001136 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800112e:	f001 f9c5 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 8001132:	6378      	str	r0, [r7, #52]	; 0x34
 8001134:	e004      	b.n	8001140 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001136:	f001 f9c1 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 800113a:	4603      	mov	r3, r0
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001142:	4a23      	ldr	r2, [pc, #140]	; (80011d0 <HAL_InitTick+0xe4>)
 8001144:	fba2 2303 	umull	r2, r3, r2, r3
 8001148:	0c9b      	lsrs	r3, r3, #18
 800114a:	3b01      	subs	r3, #1
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <HAL_InitTick+0xe8>)
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <HAL_InitTick+0xec>)
 8001152:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_InitTick+0xe8>)
 8001156:	f240 32e7 	movw	r2, #999	; 0x3e7
 800115a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800115c:	4a1d      	ldr	r2, [pc, #116]	; (80011d4 <HAL_InitTick+0xe8>)
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001160:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_InitTick+0xe8>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_InitTick+0xe8>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_InitTick+0xe8>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001174:	4817      	ldr	r0, [pc, #92]	; (80011d4 <HAL_InitTick+0xe8>)
 8001176:	f001 fdeb 	bl	8002d50 <HAL_TIM_Base_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001180:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001184:	2b00      	cmp	r3, #0
 8001186:	d11b      	bne.n	80011c0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <HAL_InitTick+0xe8>)
 800118a:	f001 fe43 	bl	8002e14 <HAL_TIM_Base_Start_IT>
 800118e:	4603      	mov	r3, r0
 8001190:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001194:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001198:	2b00      	cmp	r3, #0
 800119a:	d111      	bne.n	80011c0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800119c:	2036      	movs	r0, #54	; 0x36
 800119e:	f000 fae8 	bl	8001772 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d808      	bhi.n	80011ba <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	2036      	movs	r0, #54	; 0x36
 80011ae:	f000 fac4 	bl	800173a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <HAL_InitTick+0xf0>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	e002      	b.n	80011c0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3738      	adds	r7, #56	; 0x38
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	431bde83 	.word	0x431bde83
 80011d4:	200002f0 	.word	0x200002f0
 80011d8:	40001000 	.word	0x40001000
 80011dc:	20000004 	.word	0x20000004

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <TIM6_DAC_IRQHandler+0x10>)
 8001212:	f001 fe77 	bl	8002f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200002f0 	.word	0x200002f0

08001220 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e00a      	b.n	8001248 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001232:	f3af 8000 	nop.w
 8001236:	4601      	mov	r1, r0
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	60ba      	str	r2, [r7, #8]
 800123e:	b2ca      	uxtb	r2, r1
 8001240:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3301      	adds	r3, #1
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <_read+0x12>
  }

  return len;
 8001250:	687b      	ldr	r3, [r7, #4]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	e009      	b.n	8001280 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	60ba      	str	r2, [r7, #8]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fe3d 	bl	8000ef4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	dbf1      	blt.n	800126c <_write+0x12>
  }
  return len;
 8001288:	687b      	ldr	r3, [r7, #4]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_close>:

int _close(int file)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ba:	605a      	str	r2, [r3, #4]
  return 0;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <_isatty>:

int _isatty(int file)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001304:	4a14      	ldr	r2, [pc, #80]	; (8001358 <_sbrk+0x5c>)
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <_sbrk+0x60>)
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <_sbrk+0x64>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <_sbrk+0x68>)
 800131c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	429a      	cmp	r2, r3
 800132a:	d207      	bcs.n	800133c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800132c:	f004 ff66 	bl	80061fc <__errno>
 8001330:	4603      	mov	r3, r0
 8001332:	220c      	movs	r2, #12
 8001334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800133a:	e009      	b.n	8001350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <_sbrk+0x64>)
 800134c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20050000 	.word	0x20050000
 800135c:	00000400 	.word	0x00000400
 8001360:	2000033c 	.word	0x2000033c
 8001364:	20004268 	.word	0x20004268

08001368 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <SystemInit+0x20>)
 800136e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <SystemInit+0x20>)
 8001374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 8001392:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <MX_USART1_UART_Init+0x5c>)
 8001394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 8001398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800139c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_USART1_UART_Init+0x58>)
 80013d0:	f001 ff9e 	bl	8003310 <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013da:	f7ff fe59 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000340 	.word	0x20000340
 80013e8:	40011000 	.word	0x40011000

080013ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0ac      	sub	sp, #176	; 0xb0
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	2284      	movs	r2, #132	; 0x84
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fea7 	bl	8006160 <memset>
  if(uartHandle->Instance==USART1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d15c      	bne.n	80014d6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800141c:	2340      	movs	r3, #64	; 0x40
 800141e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001420:	2300      	movs	r3, #0
 8001422:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001424:	f107 0318 	add.w	r3, r7, #24
 8001428:	4618      	mov	r0, r3
 800142a:	f001 f8a1 	bl	8002570 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001434:	f7ff fe2c 	bl	8001090 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001438:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 800143e:	f043 0310 	orr.w	r3, r3, #16
 8001442:	6453      	str	r3, [r2, #68]	; 0x44
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 8001446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6313      	str	r3, [r2, #48]	; 0x30
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001498:	2307      	movs	r3, #7
 800149a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014a2:	4619      	mov	r1, r3
 80014a4:	4810      	ldr	r0, [pc, #64]	; (80014e8 <HAL_UART_MspInit+0xfc>)
 80014a6:	f000 f977 	bl	8001798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80014aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c4:	2307      	movs	r3, #7
 80014c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014ce:	4619      	mov	r1, r3
 80014d0:	4806      	ldr	r0, [pc, #24]	; (80014ec <HAL_UART_MspInit+0x100>)
 80014d2:	f000 f961 	bl	8001798 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014d6:	bf00      	nop
 80014d8:	37b0      	adds	r7, #176	; 0xb0
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40011000 	.word	0x40011000
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020000 	.word	0x40020000

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001528 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014f6:	490e      	ldr	r1, [pc, #56]	; (8001530 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f8:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800150c:	4c0b      	ldr	r4, [pc, #44]	; (800153c <LoopFillZerobss+0x26>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800151a:	f7ff ff25 	bl	8001368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151e:	f004 fe73 	bl	8006208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff fcf9 	bl	8000f18 <main>
  bx  lr    
 8001526:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001528:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001534:	08006794 	.word	0x08006794
  ldr r2, =_sbss
 8001538:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800153c:	20004264 	.word	0x20004264

08001540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC_IRQHandler>

08001542 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001546:	2003      	movs	r0, #3
 8001548:	f000 f8ec 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154c:	200f      	movs	r0, #15
 800154e:	f7ff fdcd 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001552:	f7ff fda3 	bl	800109c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000008 	.word	0x20000008
 8001580:	200003c8 	.word	0x200003c8

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200003c8 	.word	0x200003c8

0800159c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <__NVIC_SetPriorityGrouping+0x40>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b8:	4013      	ands	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	; (80015dc <__NVIC_SetPriorityGrouping+0x40>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00
 80015e0:	05fa0000 	.word	0x05fa0000

080015e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <__NVIC_GetPriorityGrouping+0x18>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	f003 0307 	and.w	r3, r3, #7
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db0b      	blt.n	800162a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	4907      	ldr	r1, [pc, #28]	; (8001638 <__NVIC_EnableIRQ+0x38>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	2001      	movs	r0, #1
 8001622:	fa00 f202 	lsl.w	r2, r0, r2
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000e100 	.word	0xe000e100

0800163c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db0a      	blt.n	8001666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	490c      	ldr	r1, [pc, #48]	; (8001688 <__NVIC_SetPriority+0x4c>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	0112      	lsls	r2, r2, #4
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	440b      	add	r3, r1
 8001660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001664:	e00a      	b.n	800167c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4908      	ldr	r1, [pc, #32]	; (800168c <__NVIC_SetPriority+0x50>)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	3b04      	subs	r3, #4
 8001674:	0112      	lsls	r2, r2, #4
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	440b      	add	r3, r1
 800167a:	761a      	strb	r2, [r3, #24]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000e100 	.word	0xe000e100
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f1c3 0307 	rsb	r3, r3, #7
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	bf28      	it	cs
 80016ae:	2304      	movcs	r3, #4
 80016b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3304      	adds	r3, #4
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d902      	bls.n	80016c0 <NVIC_EncodePriority+0x30>
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3b03      	subs	r3, #3
 80016be:	e000      	b.n	80016c2 <NVIC_EncodePriority+0x32>
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	401a      	ands	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	43d9      	mvns	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	4313      	orrs	r3, r2
         );
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3724      	adds	r7, #36	; 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016fc:	f3bf 8f4f 	dsb	sy
}
 8001700:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <__NVIC_SystemReset+0x24>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800170a:	4904      	ldr	r1, [pc, #16]	; (800171c <__NVIC_SystemReset+0x24>)
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__NVIC_SystemReset+0x28>)
 800170e:	4313      	orrs	r3, r2
 8001710:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001712:	f3bf 8f4f 	dsb	sy
}
 8001716:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <__NVIC_SystemReset+0x20>
 800171c:	e000ed00 	.word	0xe000ed00
 8001720:	05fa0004 	.word	0x05fa0004

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff35 	bl	800159c <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff4a 	bl	80015e4 <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff9a 	bl	8001690 <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff69 	bl	800163c <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff3d 	bl	8001600 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001792:	f7ff ffb1 	bl	80016f8 <__NVIC_SystemReset>
	...

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	e175      	b.n	8001aa4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017b8:	2201      	movs	r2, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f040 8164 	bne.w	8001a9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d005      	beq.n	80017ee <HAL_GPIO_Init+0x56>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d130      	bne.n	8001850 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	2203      	movs	r2, #3
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 0201 	and.w	r2, r3, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b03      	cmp	r3, #3
 800185a:	d017      	beq.n	800188c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d123      	bne.n	80018e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	08da      	lsrs	r2, r3, #3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3208      	adds	r2, #8
 80018a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	220f      	movs	r2, #15
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	08da      	lsrs	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3208      	adds	r2, #8
 80018da:	69b9      	ldr	r1, [r7, #24]
 80018dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	2203      	movs	r2, #3
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0203 	and.w	r2, r3, #3
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80be 	beq.w	8001a9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	4b66      	ldr	r3, [pc, #408]	; (8001abc <HAL_GPIO_Init+0x324>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	4a65      	ldr	r2, [pc, #404]	; (8001abc <HAL_GPIO_Init+0x324>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192c:	6453      	str	r3, [r2, #68]	; 0x44
 800192e:	4b63      	ldr	r3, [pc, #396]	; (8001abc <HAL_GPIO_Init+0x324>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800193a:	4a61      	ldr	r2, [pc, #388]	; (8001ac0 <HAL_GPIO_Init+0x328>)
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	3302      	adds	r3, #2
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a58      	ldr	r2, [pc, #352]	; (8001ac4 <HAL_GPIO_Init+0x32c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d037      	beq.n	80019d6 <HAL_GPIO_Init+0x23e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a57      	ldr	r2, [pc, #348]	; (8001ac8 <HAL_GPIO_Init+0x330>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d031      	beq.n	80019d2 <HAL_GPIO_Init+0x23a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a56      	ldr	r2, [pc, #344]	; (8001acc <HAL_GPIO_Init+0x334>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d02b      	beq.n	80019ce <HAL_GPIO_Init+0x236>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a55      	ldr	r2, [pc, #340]	; (8001ad0 <HAL_GPIO_Init+0x338>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d025      	beq.n	80019ca <HAL_GPIO_Init+0x232>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a54      	ldr	r2, [pc, #336]	; (8001ad4 <HAL_GPIO_Init+0x33c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d01f      	beq.n	80019c6 <HAL_GPIO_Init+0x22e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a53      	ldr	r2, [pc, #332]	; (8001ad8 <HAL_GPIO_Init+0x340>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d019      	beq.n	80019c2 <HAL_GPIO_Init+0x22a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a52      	ldr	r2, [pc, #328]	; (8001adc <HAL_GPIO_Init+0x344>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <HAL_GPIO_Init+0x226>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a51      	ldr	r2, [pc, #324]	; (8001ae0 <HAL_GPIO_Init+0x348>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d00d      	beq.n	80019ba <HAL_GPIO_Init+0x222>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a50      	ldr	r2, [pc, #320]	; (8001ae4 <HAL_GPIO_Init+0x34c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d007      	beq.n	80019b6 <HAL_GPIO_Init+0x21e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4f      	ldr	r2, [pc, #316]	; (8001ae8 <HAL_GPIO_Init+0x350>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_GPIO_Init+0x21a>
 80019ae:	2309      	movs	r3, #9
 80019b0:	e012      	b.n	80019d8 <HAL_GPIO_Init+0x240>
 80019b2:	230a      	movs	r3, #10
 80019b4:	e010      	b.n	80019d8 <HAL_GPIO_Init+0x240>
 80019b6:	2308      	movs	r3, #8
 80019b8:	e00e      	b.n	80019d8 <HAL_GPIO_Init+0x240>
 80019ba:	2307      	movs	r3, #7
 80019bc:	e00c      	b.n	80019d8 <HAL_GPIO_Init+0x240>
 80019be:	2306      	movs	r3, #6
 80019c0:	e00a      	b.n	80019d8 <HAL_GPIO_Init+0x240>
 80019c2:	2305      	movs	r3, #5
 80019c4:	e008      	b.n	80019d8 <HAL_GPIO_Init+0x240>
 80019c6:	2304      	movs	r3, #4
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x240>
 80019ca:	2303      	movs	r3, #3
 80019cc:	e004      	b.n	80019d8 <HAL_GPIO_Init+0x240>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_Init+0x240>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x240>
 80019d6:	2300      	movs	r3, #0
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	f002 0203 	and.w	r2, r2, #3
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	4093      	lsls	r3, r2
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019e8:	4935      	ldr	r1, [pc, #212]	; (8001ac0 <HAL_GPIO_Init+0x328>)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f6:	4b3d      	ldr	r3, [pc, #244]	; (8001aec <HAL_GPIO_Init+0x354>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1a:	4a34      	ldr	r2, [pc, #208]	; (8001aec <HAL_GPIO_Init+0x354>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a20:	4b32      	ldr	r3, [pc, #200]	; (8001aec <HAL_GPIO_Init+0x354>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a44:	4a29      	ldr	r2, [pc, #164]	; (8001aec <HAL_GPIO_Init+0x354>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <HAL_GPIO_Init+0x354>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a6e:	4a1f      	ldr	r2, [pc, #124]	; (8001aec <HAL_GPIO_Init+0x354>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_GPIO_Init+0x354>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a98:	4a14      	ldr	r2, [pc, #80]	; (8001aec <HAL_GPIO_Init+0x354>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	f67f ae86 	bls.w	80017b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40021400 	.word	0x40021400
 8001adc:	40021800 	.word	0x40021800
 8001ae0:	40021c00 	.word	0x40021c00
 8001ae4:	40022000 	.word	0x40022000
 8001ae8:	40022400 	.word	0x40022400
 8001aec:	40013c00 	.word	0x40013c00

08001af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
 8001afc:	4613      	mov	r3, r2
 8001afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b00:	787b      	ldrb	r3, [r7, #1]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b06:	887a      	ldrh	r2, [r7, #2]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b0c:	e003      	b.n	8001b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	041a      	lsls	r2, r3, #16
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	619a      	str	r2, [r3, #24]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b34:	887a      	ldrh	r2, [r7, #2]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	041a      	lsls	r2, r3, #16
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	400b      	ands	r3, r1
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	619a      	str	r2, [r3, #24]
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b86:	f7ff fcfd 	bl	8001584 <HAL_GetTick>
 8001b8a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b8c:	e009      	b.n	8001ba2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b8e:	f7ff fcf9 	bl	8001584 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b9c:	d901      	bls.n	8001ba2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e022      	b.n	8001be8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bae:	d1ee      	bne.n	8001b8e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bbc:	f7ff fce2 	bl	8001584 <HAL_GetTick>
 8001bc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bc2:	e009      	b.n	8001bd8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bc4:	f7ff fcde 	bl	8001584 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bd2:	d901      	bls.n	8001bd8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e007      	b.n	8001be8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001be4:	d1ee      	bne.n	8001bc4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40007000 	.word	0x40007000

08001bf8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c00:	2300      	movs	r3, #0
 8001c02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e291      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8087 	beq.w	8001d2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c1c:	4b96      	ldr	r3, [pc, #600]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d00c      	beq.n	8001c42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c28:	4b93      	ldr	r3, [pc, #588]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d112      	bne.n	8001c5a <HAL_RCC_OscConfig+0x62>
 8001c34:	4b90      	ldr	r3, [pc, #576]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c40:	d10b      	bne.n	8001c5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c42:	4b8d      	ldr	r3, [pc, #564]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d06c      	beq.n	8001d28 <HAL_RCC_OscConfig+0x130>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d168      	bne.n	8001d28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e26b      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c62:	d106      	bne.n	8001c72 <HAL_RCC_OscConfig+0x7a>
 8001c64:	4b84      	ldr	r3, [pc, #528]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a83      	ldr	r2, [pc, #524]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	e02e      	b.n	8001cd0 <HAL_RCC_OscConfig+0xd8>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x9c>
 8001c7a:	4b7f      	ldr	r3, [pc, #508]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a7e      	ldr	r2, [pc, #504]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b7c      	ldr	r3, [pc, #496]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7b      	ldr	r2, [pc, #492]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e01d      	b.n	8001cd0 <HAL_RCC_OscConfig+0xd8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xc0>
 8001c9e:	4b76      	ldr	r3, [pc, #472]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a75      	ldr	r2, [pc, #468]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b73      	ldr	r3, [pc, #460]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a72      	ldr	r2, [pc, #456]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e00b      	b.n	8001cd0 <HAL_RCC_OscConfig+0xd8>
 8001cb8:	4b6f      	ldr	r3, [pc, #444]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a6e      	ldr	r2, [pc, #440]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b6c      	ldr	r3, [pc, #432]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a6b      	ldr	r2, [pc, #428]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d013      	beq.n	8001d00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fc54 	bl	8001584 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fc50 	bl	8001584 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e21f      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	4b61      	ldr	r3, [pc, #388]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0xe8>
 8001cfe:	e014      	b.n	8001d2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fc40 	bl	8001584 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fc3c 	bl	8001584 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e20b      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1a:	4b57      	ldr	r3, [pc, #348]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x110>
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d069      	beq.n	8001e0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d36:	4b50      	ldr	r3, [pc, #320]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d42:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d11c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x190>
 8001d4e:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d116      	bne.n	8001d88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5a:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d005      	beq.n	8001d72 <HAL_RCC_OscConfig+0x17a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e1df      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d72:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	493d      	ldr	r1, [pc, #244]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d86:	e040      	b.n	8001e0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d023      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d90:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a38      	ldr	r2, [pc, #224]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fbf2 	bl	8001584 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da4:	f7ff fbee 	bl	8001584 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1bd      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db6:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc2:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4929      	ldr	r1, [pc, #164]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
 8001dd6:	e018      	b.n	8001e0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd8:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff fbce 	bl	8001584 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff fbca 	bl	8001584 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e199      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d038      	beq.n	8001e88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d019      	beq.n	8001e52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e22:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2a:	f7ff fbab 	bl	8001584 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e32:	f7ff fba7 	bl	8001584 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e176      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x23a>
 8001e50:	e01a      	b.n	8001e88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e56:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <HAL_RCC_OscConfig+0x280>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fb91 	bl	8001584 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e66:	f7ff fb8d 	bl	8001584 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d903      	bls.n	8001e7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e15c      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>
 8001e78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	4b91      	ldr	r3, [pc, #580]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ee      	bne.n	8001e66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80a4 	beq.w	8001fde <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e96:	4b8b      	ldr	r3, [pc, #556]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10d      	bne.n	8001ebe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4b88      	ldr	r3, [pc, #544]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a87      	ldr	r2, [pc, #540]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b85      	ldr	r3, [pc, #532]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ebe:	4b82      	ldr	r3, [pc, #520]	; (80020c8 <HAL_RCC_OscConfig+0x4d0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d118      	bne.n	8001efc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001eca:	4b7f      	ldr	r3, [pc, #508]	; (80020c8 <HAL_RCC_OscConfig+0x4d0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7e      	ldr	r2, [pc, #504]	; (80020c8 <HAL_RCC_OscConfig+0x4d0>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fb55 	bl	8001584 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ede:	f7ff fb51 	bl	8001584 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b64      	cmp	r3, #100	; 0x64
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e120      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef0:	4b75      	ldr	r3, [pc, #468]	; (80020c8 <HAL_RCC_OscConfig+0x4d0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x31a>
 8001f04:	4b6f      	ldr	r3, [pc, #444]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f08:	4a6e      	ldr	r2, [pc, #440]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f10:	e02d      	b.n	8001f6e <HAL_RCC_OscConfig+0x376>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x33c>
 8001f1a:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	6713      	str	r3, [r2, #112]	; 0x70
 8001f26:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	4a66      	ldr	r2, [pc, #408]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001f2c:	f023 0304 	bic.w	r3, r3, #4
 8001f30:	6713      	str	r3, [r2, #112]	; 0x70
 8001f32:	e01c      	b.n	8001f6e <HAL_RCC_OscConfig+0x376>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b05      	cmp	r3, #5
 8001f3a:	d10c      	bne.n	8001f56 <HAL_RCC_OscConfig+0x35e>
 8001f3c:	4b61      	ldr	r3, [pc, #388]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	4a60      	ldr	r2, [pc, #384]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6713      	str	r3, [r2, #112]	; 0x70
 8001f48:	4b5e      	ldr	r3, [pc, #376]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	4a5d      	ldr	r2, [pc, #372]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6713      	str	r3, [r2, #112]	; 0x70
 8001f54:	e00b      	b.n	8001f6e <HAL_RCC_OscConfig+0x376>
 8001f56:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5a:	4a5a      	ldr	r2, [pc, #360]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	6713      	str	r3, [r2, #112]	; 0x70
 8001f62:	4b58      	ldr	r3, [pc, #352]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f66:	4a57      	ldr	r2, [pc, #348]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001f68:	f023 0304 	bic.w	r3, r3, #4
 8001f6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d015      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f76:	f7ff fb05 	bl	8001584 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7ff fb01 	bl	8001584 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e0ce      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f94:	4b4b      	ldr	r3, [pc, #300]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0ee      	beq.n	8001f7e <HAL_RCC_OscConfig+0x386>
 8001fa0:	e014      	b.n	8001fcc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa2:	f7ff faef 	bl	8001584 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7ff faeb 	bl	8001584 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e0b8      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc0:	4b40      	ldr	r3, [pc, #256]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1ee      	bne.n	8001faa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fcc:	7dfb      	ldrb	r3, [r7, #23]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d105      	bne.n	8001fde <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd2:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a3b      	ldr	r2, [pc, #236]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80a4 	beq.w	8002130 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe8:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d06b      	beq.n	80020cc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d149      	bne.n	8002090 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffc:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a30      	ldr	r2, [pc, #192]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8002002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff fabc 	bl	8001584 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff fab8 	bl	8001584 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e087      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002022:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	019b      	lsls	r3, r3, #6
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	085b      	lsrs	r3, r3, #1
 8002046:	3b01      	subs	r3, #1
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	061b      	lsls	r3, r3, #24
 8002052:	4313      	orrs	r3, r2
 8002054:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8002056:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800205a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a18      	ldr	r2, [pc, #96]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8002062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7ff fa8c 	bl	8001584 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002070:	f7ff fa88 	bl	8001584 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e057      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x478>
 800208e:	e04f      	b.n	8002130 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8002096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800209a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7ff fa72 	bl	8001584 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a4:	f7ff fa6e 	bl	8001584 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e03d      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4ac>
 80020c2:	e035      	b.n	8002130 <HAL_RCC_OscConfig+0x538>
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_RCC_OscConfig+0x544>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d028      	beq.n	800212c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d121      	bne.n	800212c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d11a      	bne.n	800212c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020fc:	4013      	ands	r3, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002102:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002104:	4293      	cmp	r3, r2
 8002106:	d111      	bne.n	800212c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	085b      	lsrs	r3, r3, #1
 8002114:	3b01      	subs	r3, #1
 8002116:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d107      	bne.n	800212c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800

08002140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0d0      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002158:	4b6a      	ldr	r3, [pc, #424]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d910      	bls.n	8002188 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b67      	ldr	r3, [pc, #412]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 020f 	bic.w	r2, r3, #15
 800216e:	4965      	ldr	r1, [pc, #404]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b63      	ldr	r3, [pc, #396]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0b8      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d020      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a0:	4b59      	ldr	r3, [pc, #356]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4a58      	ldr	r2, [pc, #352]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80021a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b8:	4b53      	ldr	r3, [pc, #332]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4a52      	ldr	r2, [pc, #328]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80021be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c4:	4b50      	ldr	r3, [pc, #320]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	494d      	ldr	r1, [pc, #308]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d040      	beq.n	8002264 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d115      	bne.n	8002222 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e07f      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002202:	4b41      	ldr	r3, [pc, #260]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e073      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002212:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e06b      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002222:	4b39      	ldr	r3, [pc, #228]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f023 0203 	bic.w	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4936      	ldr	r1, [pc, #216]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002234:	f7ff f9a6 	bl	8001584 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	e00a      	b.n	8002252 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223c:	f7ff f9a2 	bl	8001584 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	; 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e053      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 020c 	and.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	429a      	cmp	r2, r3
 8002262:	d1eb      	bne.n	800223c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002264:	4b27      	ldr	r3, [pc, #156]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d210      	bcs.n	8002294 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 020f 	bic.w	r2, r3, #15
 800227a:	4922      	ldr	r1, [pc, #136]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e032      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4916      	ldr	r1, [pc, #88]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022be:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	490e      	ldr	r1, [pc, #56]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022d2:	f000 f821 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 80022d6:	4602      	mov	r2, r0
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	490a      	ldr	r1, [pc, #40]	; (800230c <HAL_RCC_ClockConfig+0x1cc>)
 80022e4:	5ccb      	ldrb	r3, [r1, r3]
 80022e6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ea:	4a09      	ldr	r2, [pc, #36]	; (8002310 <HAL_RCC_ClockConfig+0x1d0>)
 80022ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_RCC_ClockConfig+0x1d4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe fefa 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023c00 	.word	0x40023c00
 8002308:	40023800 	.word	0x40023800
 800230c:	0800676c 	.word	0x0800676c
 8002310:	20000000 	.word	0x20000000
 8002314:	20000004 	.word	0x20000004

08002318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800231c:	b090      	sub	sp, #64	; 0x40
 800231e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	637b      	str	r3, [r7, #52]	; 0x34
 8002324:	2300      	movs	r3, #0
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002328:	2300      	movs	r3, #0
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002330:	4b59      	ldr	r3, [pc, #356]	; (8002498 <HAL_RCC_GetSysClockFreq+0x180>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b08      	cmp	r3, #8
 800233a:	d00d      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x40>
 800233c:	2b08      	cmp	r3, #8
 800233e:	f200 80a1 	bhi.w	8002484 <HAL_RCC_GetSysClockFreq+0x16c>
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x34>
 8002346:	2b04      	cmp	r3, #4
 8002348:	d003      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0x3a>
 800234a:	e09b      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800234c:	4b53      	ldr	r3, [pc, #332]	; (800249c <HAL_RCC_GetSysClockFreq+0x184>)
 800234e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002350:	e09b      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002352:	4b53      	ldr	r3, [pc, #332]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002354:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002356:	e098      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002358:	4b4f      	ldr	r3, [pc, #316]	; (8002498 <HAL_RCC_GetSysClockFreq+0x180>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002362:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <HAL_RCC_GetSysClockFreq+0x180>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d028      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236e:	4b4a      	ldr	r3, [pc, #296]	; (8002498 <HAL_RCC_GetSysClockFreq+0x180>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	099b      	lsrs	r3, r3, #6
 8002374:	2200      	movs	r2, #0
 8002376:	623b      	str	r3, [r7, #32]
 8002378:	627a      	str	r2, [r7, #36]	; 0x24
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002380:	2100      	movs	r1, #0
 8002382:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002384:	fb03 f201 	mul.w	r2, r3, r1
 8002388:	2300      	movs	r3, #0
 800238a:	fb00 f303 	mul.w	r3, r0, r3
 800238e:	4413      	add	r3, r2
 8002390:	4a43      	ldr	r2, [pc, #268]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002392:	fba0 1202 	umull	r1, r2, r0, r2
 8002396:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002398:	460a      	mov	r2, r1
 800239a:	62ba      	str	r2, [r7, #40]	; 0x28
 800239c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800239e:	4413      	add	r3, r2
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a4:	2200      	movs	r2, #0
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	61fa      	str	r2, [r7, #28]
 80023aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023b2:	f7fd ff2d 	bl	8000210 <__aeabi_uldivmod>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4613      	mov	r3, r2
 80023bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023be:	e053      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c0:	4b35      	ldr	r3, [pc, #212]	; (8002498 <HAL_RCC_GetSysClockFreq+0x180>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	2200      	movs	r2, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	617a      	str	r2, [r7, #20]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023d2:	f04f 0b00 	mov.w	fp, #0
 80023d6:	4652      	mov	r2, sl
 80023d8:	465b      	mov	r3, fp
 80023da:	f04f 0000 	mov.w	r0, #0
 80023de:	f04f 0100 	mov.w	r1, #0
 80023e2:	0159      	lsls	r1, r3, #5
 80023e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e8:	0150      	lsls	r0, r2, #5
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	ebb2 080a 	subs.w	r8, r2, sl
 80023f2:	eb63 090b 	sbc.w	r9, r3, fp
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002402:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002406:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800240a:	ebb2 0408 	subs.w	r4, r2, r8
 800240e:	eb63 0509 	sbc.w	r5, r3, r9
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	00eb      	lsls	r3, r5, #3
 800241c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002420:	00e2      	lsls	r2, r4, #3
 8002422:	4614      	mov	r4, r2
 8002424:	461d      	mov	r5, r3
 8002426:	eb14 030a 	adds.w	r3, r4, sl
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	eb45 030b 	adc.w	r3, r5, fp
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800243e:	4629      	mov	r1, r5
 8002440:	028b      	lsls	r3, r1, #10
 8002442:	4621      	mov	r1, r4
 8002444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002448:	4621      	mov	r1, r4
 800244a:	028a      	lsls	r2, r1, #10
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002452:	2200      	movs	r2, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	60fa      	str	r2, [r7, #12]
 8002458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800245c:	f7fd fed8 	bl	8000210 <__aeabi_uldivmod>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4613      	mov	r3, r2
 8002466:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_GetSysClockFreq+0x180>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	3301      	adds	r3, #1
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002480:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002482:	e002      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_RCC_GetSysClockFreq+0x184>)
 8002486:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800248a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800248c:	4618      	mov	r0, r3
 800248e:	3740      	adds	r7, #64	; 0x40
 8002490:	46bd      	mov	sp, r7
 8002492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	00f42400 	.word	0x00f42400
 80024a0:	017d7840 	.word	0x017d7840

080024a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000000 	.word	0x20000000

080024bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024c0:	f7ff fff0 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	0a9b      	lsrs	r3, r3, #10
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	4903      	ldr	r1, [pc, #12]	; (80024e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d2:	5ccb      	ldrb	r3, [r1, r3]
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40023800 	.word	0x40023800
 80024e0:	0800677c 	.word	0x0800677c

080024e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024e8:	f7ff ffdc 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0b5b      	lsrs	r3, r3, #13
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4903      	ldr	r1, [pc, #12]	; (8002508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	0800677c 	.word	0x0800677c

0800250c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	220f      	movs	r2, #15
 800251a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_RCC_GetClockConfig+0x5c>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0203 	and.w	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <HAL_RCC_GetClockConfig+0x5c>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <HAL_RCC_GetClockConfig+0x5c>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002540:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_RCC_GetClockConfig+0x5c>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	08db      	lsrs	r3, r3, #3
 8002546:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <HAL_RCC_GetClockConfig+0x60>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 020f 	and.w	r2, r3, #15
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	601a      	str	r2, [r3, #0]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40023c00 	.word	0x40023c00

08002570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d012      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002598:	4b69      	ldr	r3, [pc, #420]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4a68      	ldr	r2, [pc, #416]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025a2:	6093      	str	r3, [r2, #8]
 80025a4:	4b66      	ldr	r3, [pc, #408]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	4964      	ldr	r1, [pc, #400]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d017      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	4959      	ldr	r1, [pc, #356]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025e8:	d101      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80025ea:	2301      	movs	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d017      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002606:	4b4e      	ldr	r3, [pc, #312]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800260c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	494a      	ldr	r1, [pc, #296]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002624:	d101      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002626:	2301      	movs	r3, #1
 8002628:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002632:	2301      	movs	r3, #1
 8002634:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002642:	2301      	movs	r3, #1
 8002644:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0320 	and.w	r3, r3, #32
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 808b 	beq.w	800276a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002654:	4b3a      	ldr	r3, [pc, #232]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	4a39      	ldr	r2, [pc, #228]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265e:	6413      	str	r3, [r2, #64]	; 0x40
 8002660:	4b37      	ldr	r3, [pc, #220]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800266c:	4b35      	ldr	r3, [pc, #212]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a34      	ldr	r2, [pc, #208]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002678:	f7fe ff84 	bl	8001584 <HAL_GetTick>
 800267c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002680:	f7fe ff80 	bl	8001584 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e357      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002692:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800269e:	4b28      	ldr	r3, [pc, #160]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d035      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d02e      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026bc:	4b20      	ldr	r3, [pc, #128]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a1a      	ldr	r2, [pc, #104]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026de:	4a18      	ldr	r2, [pc, #96]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d114      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe ff48 	bl	8001584 <HAL_GetTick>
 80026f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f6:	e00a      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f8:	f7fe ff44 	bl	8001584 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	; 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e319      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0ee      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002726:	d111      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002736:	400b      	ands	r3, r1
 8002738:	4901      	ldr	r1, [pc, #4]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
 800273e:	e00b      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002740:	40023800 	.word	0x40023800
 8002744:	40007000 	.word	0x40007000
 8002748:	0ffffcff 	.word	0x0ffffcff
 800274c:	4baa      	ldr	r3, [pc, #680]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4aa9      	ldr	r2, [pc, #676]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002752:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002756:	6093      	str	r3, [r2, #8]
 8002758:	4ba7      	ldr	r3, [pc, #668]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800275a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002764:	49a4      	ldr	r1, [pc, #656]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002766:	4313      	orrs	r3, r2
 8002768:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b00      	cmp	r3, #0
 8002774:	d010      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002776:	4ba0      	ldr	r3, [pc, #640]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800277c:	4a9e      	ldr	r2, [pc, #632]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002782:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002786:	4b9c      	ldr	r3, [pc, #624]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002788:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	4999      	ldr	r1, [pc, #612]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027a4:	4b94      	ldr	r3, [pc, #592]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027b2:	4991      	ldr	r1, [pc, #580]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027c6:	4b8c      	ldr	r3, [pc, #560]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027d4:	4988      	ldr	r1, [pc, #544]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027e8:	4b83      	ldr	r3, [pc, #524]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027f6:	4980      	ldr	r1, [pc, #512]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800280a:	4b7b      	ldr	r3, [pc, #492]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002810:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	4977      	ldr	r1, [pc, #476]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800282c:	4b72      	ldr	r3, [pc, #456]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	f023 0203 	bic.w	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	496f      	ldr	r1, [pc, #444]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800284e:	4b6a      	ldr	r3, [pc, #424]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	f023 020c 	bic.w	r2, r3, #12
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285c:	4966      	ldr	r1, [pc, #408]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002870:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	495e      	ldr	r1, [pc, #376]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002892:	4b59      	ldr	r3, [pc, #356]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002898:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a0:	4955      	ldr	r1, [pc, #340]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028b4:	4b50      	ldr	r3, [pc, #320]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	494d      	ldr	r1, [pc, #308]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028d6:	4b48      	ldr	r3, [pc, #288]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	4944      	ldr	r1, [pc, #272]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028f8:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002906:	493c      	ldr	r1, [pc, #240]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800291a:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002920:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002928:	4933      	ldr	r1, [pc, #204]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800293c:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800294a:	492b      	ldr	r1, [pc, #172]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d011      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800295e:	4b26      	ldr	r3, [pc, #152]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002964:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800296c:	4922      	ldr	r1, [pc, #136]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800297c:	d101      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800297e:	2301      	movs	r3, #1
 8002980:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800298e:	2301      	movs	r3, #1
 8002990:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ac:	4912      	ldr	r1, [pc, #72]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00b      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029c0:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029d0:	4909      	ldr	r1, [pc, #36]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d006      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80d9 	beq.w	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029ec:	4b02      	ldr	r3, [pc, #8]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a01      	ldr	r2, [pc, #4]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029f6:	e001      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80029f8:	40023800 	.word	0x40023800
 80029fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029fe:	f7fe fdc1 	bl	8001584 <HAL_GetTick>
 8002a02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a06:	f7fe fdbd 	bl	8001584 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b64      	cmp	r3, #100	; 0x64
 8002a12:	d901      	bls.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e194      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a18:	4b6c      	ldr	r3, [pc, #432]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f0      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d021      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11d      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a38:	4b64      	ldr	r3, [pc, #400]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a3e:	0c1b      	lsrs	r3, r3, #16
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a46:	4b61      	ldr	r3, [pc, #388]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4c:	0e1b      	lsrs	r3, r3, #24
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	019a      	lsls	r2, r3, #6
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	041b      	lsls	r3, r3, #16
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	061b      	lsls	r3, r3, #24
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	071b      	lsls	r3, r3, #28
 8002a6c:	4957      	ldr	r1, [pc, #348]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d004      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d02e      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a9e:	d129      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002aa0:	4b4a      	ldr	r3, [pc, #296]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa6:	0c1b      	lsrs	r3, r3, #16
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aae:	4b47      	ldr	r3, [pc, #284]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab4:	0f1b      	lsrs	r3, r3, #28
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	019a      	lsls	r2, r3, #6
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	041b      	lsls	r3, r3, #16
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	061b      	lsls	r3, r3, #24
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	071b      	lsls	r3, r3, #28
 8002ad4:	493d      	ldr	r1, [pc, #244]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002adc:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae2:	f023 021f 	bic.w	r2, r3, #31
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	3b01      	subs	r3, #1
 8002aec:	4937      	ldr	r1, [pc, #220]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01d      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b00:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b06:	0e1b      	lsrs	r3, r3, #24
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b0e:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b14:	0f1b      	lsrs	r3, r3, #28
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	019a      	lsls	r2, r3, #6
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	061b      	lsls	r3, r3, #24
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	071b      	lsls	r3, r3, #28
 8002b34:	4925      	ldr	r1, [pc, #148]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d011      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	019a      	lsls	r2, r3, #6
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	061b      	lsls	r3, r3, #24
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	071b      	lsls	r3, r3, #28
 8002b64:	4919      	ldr	r1, [pc, #100]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b78:	f7fe fd04 	bl	8001584 <HAL_GetTick>
 8002b7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b80:	f7fe fd00 	bl	8001584 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0d7      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b92:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	f040 80cd 	bne.w	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a08      	ldr	r2, [pc, #32]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb2:	f7fe fce7 	bl	8001584 <HAL_GetTick>
 8002bb6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bba:	f7fe fce3 	bl	8001584 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b64      	cmp	r3, #100	; 0x64
 8002bc6:	d903      	bls.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e0ba      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002bcc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bd0:	4b5e      	ldr	r3, [pc, #376]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bdc:	d0ed      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d02e      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d12a      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c06:	4b51      	ldr	r3, [pc, #324]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c14:	4b4d      	ldr	r3, [pc, #308]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	0f1b      	lsrs	r3, r3, #28
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	019a      	lsls	r2, r3, #6
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	041b      	lsls	r3, r3, #16
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	061b      	lsls	r3, r3, #24
 8002c34:	431a      	orrs	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	071b      	lsls	r3, r3, #28
 8002c3a:	4944      	ldr	r1, [pc, #272]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c42:	4b42      	ldr	r3, [pc, #264]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	3b01      	subs	r3, #1
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	493d      	ldr	r1, [pc, #244]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d022      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c70:	d11d      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c72:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	0e1b      	lsrs	r3, r3, #24
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c80:	4b32      	ldr	r3, [pc, #200]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c86:	0f1b      	lsrs	r3, r3, #28
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	019a      	lsls	r2, r3, #6
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	041b      	lsls	r3, r3, #16
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	061b      	lsls	r3, r3, #24
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	071b      	lsls	r3, r3, #28
 8002ca6:	4929      	ldr	r1, [pc, #164]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d028      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cba:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	0e1b      	lsrs	r3, r3, #24
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cc8:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	0c1b      	lsrs	r3, r3, #16
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	019a      	lsls	r2, r3, #6
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	041b      	lsls	r3, r3, #16
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	061b      	lsls	r3, r3, #24
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	071b      	lsls	r3, r3, #28
 8002cee:	4917      	ldr	r1, [pc, #92]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	4911      	ldr	r1, [pc, #68]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0e      	ldr	r2, [pc, #56]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d18:	f7fe fc34 	bl	8001584 <HAL_GetTick>
 8002d1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d20:	f7fe fc30 	bl	8001584 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e007      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d3e:	d1ef      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800

08002d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e049      	b.n	8002df6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f841 	bl	8002dfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f000 fa00 	bl	8003194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d001      	beq.n	8002e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e054      	b.n	8002ed6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a26      	ldr	r2, [pc, #152]	; (8002ee4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d022      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x80>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e56:	d01d      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x80>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a22      	ldr	r2, [pc, #136]	; (8002ee8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d018      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x80>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a21      	ldr	r2, [pc, #132]	; (8002eec <HAL_TIM_Base_Start_IT+0xd8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d013      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x80>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00e      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x80>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_TIM_Base_Start_IT+0xe0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d009      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x80>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d004      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x80>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <HAL_TIM_Base_Start_IT+0xe8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d115      	bne.n	8002ec0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_TIM_Base_Start_IT+0xec>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d015      	beq.n	8002ed2 <HAL_TIM_Base_Start_IT+0xbe>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eac:	d011      	beq.n	8002ed2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebe:	e008      	b.n	8002ed2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e000      	b.n	8002ed4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40000800 	.word	0x40000800
 8002ef0:	40000c00 	.word	0x40000c00
 8002ef4:	40010400 	.word	0x40010400
 8002ef8:	40014000 	.word	0x40014000
 8002efc:	40001800 	.word	0x40001800
 8002f00:	00010007 	.word	0x00010007

08002f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d122      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d11b      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0202 	mvn.w	r2, #2
 8002f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f905 	bl	8003156 <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f8f7 	bl	8003142 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f908 	bl	800316a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d122      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0204 	mvn.w	r2, #4
 8002f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f8db 	bl	8003156 <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f8cd 	bl	8003142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f8de 	bl	800316a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d122      	bne.n	8003008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d11b      	bne.n	8003008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0208 	mvn.w	r2, #8
 8002fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2204      	movs	r2, #4
 8002fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f8b1 	bl	8003156 <HAL_TIM_IC_CaptureCallback>
 8002ff4:	e005      	b.n	8003002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f8a3 	bl	8003142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f8b4 	bl	800316a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b10      	cmp	r3, #16
 8003014:	d122      	bne.n	800305c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b10      	cmp	r3, #16
 8003022:	d11b      	bne.n	800305c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0210 	mvn.w	r2, #16
 800302c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2208      	movs	r2, #8
 8003032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f887 	bl	8003156 <HAL_TIM_IC_CaptureCallback>
 8003048:	e005      	b.n	8003056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f879 	bl	8003142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f88a 	bl	800316a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d10e      	bne.n	8003088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d107      	bne.n	8003088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0201 	mvn.w	r2, #1
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fd fff2 	bl	800106c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b80      	cmp	r3, #128	; 0x80
 8003094:	d10e      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a0:	2b80      	cmp	r3, #128	; 0x80
 80030a2:	d107      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f91a 	bl	80032e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c2:	d10e      	bne.n	80030e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ce:	2b80      	cmp	r3, #128	; 0x80
 80030d0:	d107      	bne.n	80030e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f90d 	bl	80032fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	d10e      	bne.n	800310e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	d107      	bne.n	800310e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f838 	bl	800317e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b20      	cmp	r3, #32
 800311a:	d10e      	bne.n	800313a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b20      	cmp	r3, #32
 8003128:	d107      	bne.n	800313a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f06f 0220 	mvn.w	r2, #32
 8003132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f8cd 	bl	80032d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a40      	ldr	r2, [pc, #256]	; (80032a8 <TIM_Base_SetConfig+0x114>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <TIM_Base_SetConfig+0x40>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b2:	d00f      	beq.n	80031d4 <TIM_Base_SetConfig+0x40>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a3d      	ldr	r2, [pc, #244]	; (80032ac <TIM_Base_SetConfig+0x118>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00b      	beq.n	80031d4 <TIM_Base_SetConfig+0x40>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a3c      	ldr	r2, [pc, #240]	; (80032b0 <TIM_Base_SetConfig+0x11c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d007      	beq.n	80031d4 <TIM_Base_SetConfig+0x40>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a3b      	ldr	r2, [pc, #236]	; (80032b4 <TIM_Base_SetConfig+0x120>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_Base_SetConfig+0x40>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a3a      	ldr	r2, [pc, #232]	; (80032b8 <TIM_Base_SetConfig+0x124>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d108      	bne.n	80031e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a2f      	ldr	r2, [pc, #188]	; (80032a8 <TIM_Base_SetConfig+0x114>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d02b      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f4:	d027      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a2c      	ldr	r2, [pc, #176]	; (80032ac <TIM_Base_SetConfig+0x118>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d023      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a2b      	ldr	r2, [pc, #172]	; (80032b0 <TIM_Base_SetConfig+0x11c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d01f      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a2a      	ldr	r2, [pc, #168]	; (80032b4 <TIM_Base_SetConfig+0x120>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01b      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <TIM_Base_SetConfig+0x124>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d017      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a28      	ldr	r2, [pc, #160]	; (80032bc <TIM_Base_SetConfig+0x128>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a27      	ldr	r2, [pc, #156]	; (80032c0 <TIM_Base_SetConfig+0x12c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00f      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a26      	ldr	r2, [pc, #152]	; (80032c4 <TIM_Base_SetConfig+0x130>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00b      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a25      	ldr	r2, [pc, #148]	; (80032c8 <TIM_Base_SetConfig+0x134>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a24      	ldr	r2, [pc, #144]	; (80032cc <TIM_Base_SetConfig+0x138>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a23      	ldr	r2, [pc, #140]	; (80032d0 <TIM_Base_SetConfig+0x13c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d108      	bne.n	8003258 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <TIM_Base_SetConfig+0x114>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d003      	beq.n	800328c <TIM_Base_SetConfig+0xf8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a0c      	ldr	r2, [pc, #48]	; (80032b8 <TIM_Base_SetConfig+0x124>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d103      	bne.n	8003294 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	615a      	str	r2, [r3, #20]
}
 800329a:	bf00      	nop
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40010000 	.word	0x40010000
 80032ac:	40000400 	.word	0x40000400
 80032b0:	40000800 	.word	0x40000800
 80032b4:	40000c00 	.word	0x40000c00
 80032b8:	40010400 	.word	0x40010400
 80032bc:	40014000 	.word	0x40014000
 80032c0:	40014400 	.word	0x40014400
 80032c4:	40014800 	.word	0x40014800
 80032c8:	40001800 	.word	0x40001800
 80032cc:	40001c00 	.word	0x40001c00
 80032d0:	40002000 	.word	0x40002000

080032d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e040      	b.n	80033a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fe f85a 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	; 0x24
 800333c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8b0 	bl	80034b4 <UART_SetConfig>
 8003354:	4603      	mov	r3, r0
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e022      	b.n	80033a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fb08 	bl	800397c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800337a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800338a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fb8f 	bl	8003ac0 <UART_CheckIdleState>
 80033a2:	4603      	mov	r3, r0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	; 0x28
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d171      	bne.n	80034a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_UART_Transmit+0x24>
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e06a      	b.n	80034aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2221      	movs	r2, #33	; 0x21
 80033e0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033e2:	f7fe f8cf 	bl	8001584 <HAL_GetTick>
 80033e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	88fa      	ldrh	r2, [r7, #6]
 80033ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003400:	d108      	bne.n	8003414 <HAL_UART_Transmit+0x68>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d104      	bne.n	8003414 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	e003      	b.n	800341c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003418:	2300      	movs	r3, #0
 800341a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800341c:	e02c      	b.n	8003478 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2200      	movs	r2, #0
 8003426:	2180      	movs	r1, #128	; 0x80
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fb80 	bl	8003b2e <UART_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e038      	b.n	80034aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10b      	bne.n	8003456 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800344c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	3302      	adds	r3, #2
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	e007      	b.n	8003466 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	781a      	ldrb	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	3301      	adds	r3, #1
 8003464:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1cc      	bne.n	800341e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2200      	movs	r2, #0
 800348c:	2140      	movs	r1, #64	; 0x40
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 fb4d 	bl	8003b2e <UART_WaitOnFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e005      	b.n	80034aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2220      	movs	r2, #32
 80034a2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	e000      	b.n	80034aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80034a8:	2302      	movs	r3, #2
  }
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3720      	adds	r7, #32
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	4ba6      	ldr	r3, [pc, #664]	; (8003778 <UART_SetConfig+0x2c4>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	6979      	ldr	r1, [r7, #20]
 80034e8:	430b      	orrs	r3, r1
 80034ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	430a      	orrs	r2, r1
 8003524:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a94      	ldr	r2, [pc, #592]	; (800377c <UART_SetConfig+0x2c8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d120      	bne.n	8003572 <UART_SetConfig+0xbe>
 8003530:	4b93      	ldr	r3, [pc, #588]	; (8003780 <UART_SetConfig+0x2cc>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b03      	cmp	r3, #3
 800353c:	d816      	bhi.n	800356c <UART_SetConfig+0xb8>
 800353e:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <UART_SetConfig+0x90>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	08003555 	.word	0x08003555
 8003548:	08003561 	.word	0x08003561
 800354c:	0800355b 	.word	0x0800355b
 8003550:	08003567 	.word	0x08003567
 8003554:	2301      	movs	r3, #1
 8003556:	77fb      	strb	r3, [r7, #31]
 8003558:	e150      	b.n	80037fc <UART_SetConfig+0x348>
 800355a:	2302      	movs	r3, #2
 800355c:	77fb      	strb	r3, [r7, #31]
 800355e:	e14d      	b.n	80037fc <UART_SetConfig+0x348>
 8003560:	2304      	movs	r3, #4
 8003562:	77fb      	strb	r3, [r7, #31]
 8003564:	e14a      	b.n	80037fc <UART_SetConfig+0x348>
 8003566:	2308      	movs	r3, #8
 8003568:	77fb      	strb	r3, [r7, #31]
 800356a:	e147      	b.n	80037fc <UART_SetConfig+0x348>
 800356c:	2310      	movs	r3, #16
 800356e:	77fb      	strb	r3, [r7, #31]
 8003570:	e144      	b.n	80037fc <UART_SetConfig+0x348>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a83      	ldr	r2, [pc, #524]	; (8003784 <UART_SetConfig+0x2d0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d132      	bne.n	80035e2 <UART_SetConfig+0x12e>
 800357c:	4b80      	ldr	r3, [pc, #512]	; (8003780 <UART_SetConfig+0x2cc>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b0c      	cmp	r3, #12
 8003588:	d828      	bhi.n	80035dc <UART_SetConfig+0x128>
 800358a:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <UART_SetConfig+0xdc>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035c5 	.word	0x080035c5
 8003594:	080035dd 	.word	0x080035dd
 8003598:	080035dd 	.word	0x080035dd
 800359c:	080035dd 	.word	0x080035dd
 80035a0:	080035d1 	.word	0x080035d1
 80035a4:	080035dd 	.word	0x080035dd
 80035a8:	080035dd 	.word	0x080035dd
 80035ac:	080035dd 	.word	0x080035dd
 80035b0:	080035cb 	.word	0x080035cb
 80035b4:	080035dd 	.word	0x080035dd
 80035b8:	080035dd 	.word	0x080035dd
 80035bc:	080035dd 	.word	0x080035dd
 80035c0:	080035d7 	.word	0x080035d7
 80035c4:	2300      	movs	r3, #0
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e118      	b.n	80037fc <UART_SetConfig+0x348>
 80035ca:	2302      	movs	r3, #2
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e115      	b.n	80037fc <UART_SetConfig+0x348>
 80035d0:	2304      	movs	r3, #4
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e112      	b.n	80037fc <UART_SetConfig+0x348>
 80035d6:	2308      	movs	r3, #8
 80035d8:	77fb      	strb	r3, [r7, #31]
 80035da:	e10f      	b.n	80037fc <UART_SetConfig+0x348>
 80035dc:	2310      	movs	r3, #16
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e10c      	b.n	80037fc <UART_SetConfig+0x348>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a68      	ldr	r2, [pc, #416]	; (8003788 <UART_SetConfig+0x2d4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d120      	bne.n	800362e <UART_SetConfig+0x17a>
 80035ec:	4b64      	ldr	r3, [pc, #400]	; (8003780 <UART_SetConfig+0x2cc>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035f6:	2b30      	cmp	r3, #48	; 0x30
 80035f8:	d013      	beq.n	8003622 <UART_SetConfig+0x16e>
 80035fa:	2b30      	cmp	r3, #48	; 0x30
 80035fc:	d814      	bhi.n	8003628 <UART_SetConfig+0x174>
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d009      	beq.n	8003616 <UART_SetConfig+0x162>
 8003602:	2b20      	cmp	r3, #32
 8003604:	d810      	bhi.n	8003628 <UART_SetConfig+0x174>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <UART_SetConfig+0x15c>
 800360a:	2b10      	cmp	r3, #16
 800360c:	d006      	beq.n	800361c <UART_SetConfig+0x168>
 800360e:	e00b      	b.n	8003628 <UART_SetConfig+0x174>
 8003610:	2300      	movs	r3, #0
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	e0f2      	b.n	80037fc <UART_SetConfig+0x348>
 8003616:	2302      	movs	r3, #2
 8003618:	77fb      	strb	r3, [r7, #31]
 800361a:	e0ef      	b.n	80037fc <UART_SetConfig+0x348>
 800361c:	2304      	movs	r3, #4
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e0ec      	b.n	80037fc <UART_SetConfig+0x348>
 8003622:	2308      	movs	r3, #8
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	e0e9      	b.n	80037fc <UART_SetConfig+0x348>
 8003628:	2310      	movs	r3, #16
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e0e6      	b.n	80037fc <UART_SetConfig+0x348>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a56      	ldr	r2, [pc, #344]	; (800378c <UART_SetConfig+0x2d8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d120      	bne.n	800367a <UART_SetConfig+0x1c6>
 8003638:	4b51      	ldr	r3, [pc, #324]	; (8003780 <UART_SetConfig+0x2cc>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003642:	2bc0      	cmp	r3, #192	; 0xc0
 8003644:	d013      	beq.n	800366e <UART_SetConfig+0x1ba>
 8003646:	2bc0      	cmp	r3, #192	; 0xc0
 8003648:	d814      	bhi.n	8003674 <UART_SetConfig+0x1c0>
 800364a:	2b80      	cmp	r3, #128	; 0x80
 800364c:	d009      	beq.n	8003662 <UART_SetConfig+0x1ae>
 800364e:	2b80      	cmp	r3, #128	; 0x80
 8003650:	d810      	bhi.n	8003674 <UART_SetConfig+0x1c0>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <UART_SetConfig+0x1a8>
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	d006      	beq.n	8003668 <UART_SetConfig+0x1b4>
 800365a:	e00b      	b.n	8003674 <UART_SetConfig+0x1c0>
 800365c:	2300      	movs	r3, #0
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e0cc      	b.n	80037fc <UART_SetConfig+0x348>
 8003662:	2302      	movs	r3, #2
 8003664:	77fb      	strb	r3, [r7, #31]
 8003666:	e0c9      	b.n	80037fc <UART_SetConfig+0x348>
 8003668:	2304      	movs	r3, #4
 800366a:	77fb      	strb	r3, [r7, #31]
 800366c:	e0c6      	b.n	80037fc <UART_SetConfig+0x348>
 800366e:	2308      	movs	r3, #8
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	e0c3      	b.n	80037fc <UART_SetConfig+0x348>
 8003674:	2310      	movs	r3, #16
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e0c0      	b.n	80037fc <UART_SetConfig+0x348>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a44      	ldr	r2, [pc, #272]	; (8003790 <UART_SetConfig+0x2dc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d125      	bne.n	80036d0 <UART_SetConfig+0x21c>
 8003684:	4b3e      	ldr	r3, [pc, #248]	; (8003780 <UART_SetConfig+0x2cc>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003692:	d017      	beq.n	80036c4 <UART_SetConfig+0x210>
 8003694:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003698:	d817      	bhi.n	80036ca <UART_SetConfig+0x216>
 800369a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800369e:	d00b      	beq.n	80036b8 <UART_SetConfig+0x204>
 80036a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a4:	d811      	bhi.n	80036ca <UART_SetConfig+0x216>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <UART_SetConfig+0x1fe>
 80036aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ae:	d006      	beq.n	80036be <UART_SetConfig+0x20a>
 80036b0:	e00b      	b.n	80036ca <UART_SetConfig+0x216>
 80036b2:	2300      	movs	r3, #0
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e0a1      	b.n	80037fc <UART_SetConfig+0x348>
 80036b8:	2302      	movs	r3, #2
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e09e      	b.n	80037fc <UART_SetConfig+0x348>
 80036be:	2304      	movs	r3, #4
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e09b      	b.n	80037fc <UART_SetConfig+0x348>
 80036c4:	2308      	movs	r3, #8
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e098      	b.n	80037fc <UART_SetConfig+0x348>
 80036ca:	2310      	movs	r3, #16
 80036cc:	77fb      	strb	r3, [r7, #31]
 80036ce:	e095      	b.n	80037fc <UART_SetConfig+0x348>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a2f      	ldr	r2, [pc, #188]	; (8003794 <UART_SetConfig+0x2e0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d125      	bne.n	8003726 <UART_SetConfig+0x272>
 80036da:	4b29      	ldr	r3, [pc, #164]	; (8003780 <UART_SetConfig+0x2cc>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036e8:	d017      	beq.n	800371a <UART_SetConfig+0x266>
 80036ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036ee:	d817      	bhi.n	8003720 <UART_SetConfig+0x26c>
 80036f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f4:	d00b      	beq.n	800370e <UART_SetConfig+0x25a>
 80036f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036fa:	d811      	bhi.n	8003720 <UART_SetConfig+0x26c>
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <UART_SetConfig+0x254>
 8003700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003704:	d006      	beq.n	8003714 <UART_SetConfig+0x260>
 8003706:	e00b      	b.n	8003720 <UART_SetConfig+0x26c>
 8003708:	2301      	movs	r3, #1
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e076      	b.n	80037fc <UART_SetConfig+0x348>
 800370e:	2302      	movs	r3, #2
 8003710:	77fb      	strb	r3, [r7, #31]
 8003712:	e073      	b.n	80037fc <UART_SetConfig+0x348>
 8003714:	2304      	movs	r3, #4
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e070      	b.n	80037fc <UART_SetConfig+0x348>
 800371a:	2308      	movs	r3, #8
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e06d      	b.n	80037fc <UART_SetConfig+0x348>
 8003720:	2310      	movs	r3, #16
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e06a      	b.n	80037fc <UART_SetConfig+0x348>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1b      	ldr	r2, [pc, #108]	; (8003798 <UART_SetConfig+0x2e4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d138      	bne.n	80037a2 <UART_SetConfig+0x2ee>
 8003730:	4b13      	ldr	r3, [pc, #76]	; (8003780 <UART_SetConfig+0x2cc>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800373a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800373e:	d017      	beq.n	8003770 <UART_SetConfig+0x2bc>
 8003740:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003744:	d82a      	bhi.n	800379c <UART_SetConfig+0x2e8>
 8003746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374a:	d00b      	beq.n	8003764 <UART_SetConfig+0x2b0>
 800374c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003750:	d824      	bhi.n	800379c <UART_SetConfig+0x2e8>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <UART_SetConfig+0x2aa>
 8003756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375a:	d006      	beq.n	800376a <UART_SetConfig+0x2b6>
 800375c:	e01e      	b.n	800379c <UART_SetConfig+0x2e8>
 800375e:	2300      	movs	r3, #0
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e04b      	b.n	80037fc <UART_SetConfig+0x348>
 8003764:	2302      	movs	r3, #2
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	e048      	b.n	80037fc <UART_SetConfig+0x348>
 800376a:	2304      	movs	r3, #4
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e045      	b.n	80037fc <UART_SetConfig+0x348>
 8003770:	2308      	movs	r3, #8
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e042      	b.n	80037fc <UART_SetConfig+0x348>
 8003776:	bf00      	nop
 8003778:	efff69f3 	.word	0xefff69f3
 800377c:	40011000 	.word	0x40011000
 8003780:	40023800 	.word	0x40023800
 8003784:	40004400 	.word	0x40004400
 8003788:	40004800 	.word	0x40004800
 800378c:	40004c00 	.word	0x40004c00
 8003790:	40005000 	.word	0x40005000
 8003794:	40011400 	.word	0x40011400
 8003798:	40007800 	.word	0x40007800
 800379c:	2310      	movs	r3, #16
 800379e:	77fb      	strb	r3, [r7, #31]
 80037a0:	e02c      	b.n	80037fc <UART_SetConfig+0x348>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a72      	ldr	r2, [pc, #456]	; (8003970 <UART_SetConfig+0x4bc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d125      	bne.n	80037f8 <UART_SetConfig+0x344>
 80037ac:	4b71      	ldr	r3, [pc, #452]	; (8003974 <UART_SetConfig+0x4c0>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037ba:	d017      	beq.n	80037ec <UART_SetConfig+0x338>
 80037bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037c0:	d817      	bhi.n	80037f2 <UART_SetConfig+0x33e>
 80037c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c6:	d00b      	beq.n	80037e0 <UART_SetConfig+0x32c>
 80037c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037cc:	d811      	bhi.n	80037f2 <UART_SetConfig+0x33e>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <UART_SetConfig+0x326>
 80037d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d6:	d006      	beq.n	80037e6 <UART_SetConfig+0x332>
 80037d8:	e00b      	b.n	80037f2 <UART_SetConfig+0x33e>
 80037da:	2300      	movs	r3, #0
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e00d      	b.n	80037fc <UART_SetConfig+0x348>
 80037e0:	2302      	movs	r3, #2
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e00a      	b.n	80037fc <UART_SetConfig+0x348>
 80037e6:	2304      	movs	r3, #4
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e007      	b.n	80037fc <UART_SetConfig+0x348>
 80037ec:	2308      	movs	r3, #8
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e004      	b.n	80037fc <UART_SetConfig+0x348>
 80037f2:	2310      	movs	r3, #16
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e001      	b.n	80037fc <UART_SetConfig+0x348>
 80037f8:	2310      	movs	r3, #16
 80037fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003804:	d15b      	bne.n	80038be <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003806:	7ffb      	ldrb	r3, [r7, #31]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d828      	bhi.n	800385e <UART_SetConfig+0x3aa>
 800380c:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <UART_SetConfig+0x360>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003839 	.word	0x08003839
 8003818:	08003841 	.word	0x08003841
 800381c:	08003849 	.word	0x08003849
 8003820:	0800385f 	.word	0x0800385f
 8003824:	0800384f 	.word	0x0800384f
 8003828:	0800385f 	.word	0x0800385f
 800382c:	0800385f 	.word	0x0800385f
 8003830:	0800385f 	.word	0x0800385f
 8003834:	08003857 	.word	0x08003857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003838:	f7fe fe40 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 800383c:	61b8      	str	r0, [r7, #24]
        break;
 800383e:	e013      	b.n	8003868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003840:	f7fe fe50 	bl	80024e4 <HAL_RCC_GetPCLK2Freq>
 8003844:	61b8      	str	r0, [r7, #24]
        break;
 8003846:	e00f      	b.n	8003868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003848:	4b4b      	ldr	r3, [pc, #300]	; (8003978 <UART_SetConfig+0x4c4>)
 800384a:	61bb      	str	r3, [r7, #24]
        break;
 800384c:	e00c      	b.n	8003868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800384e:	f7fe fd63 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 8003852:	61b8      	str	r0, [r7, #24]
        break;
 8003854:	e008      	b.n	8003868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800385a:	61bb      	str	r3, [r7, #24]
        break;
 800385c:	e004      	b.n	8003868 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	77bb      	strb	r3, [r7, #30]
        break;
 8003866:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d074      	beq.n	8003958 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	005a      	lsls	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	085b      	lsrs	r3, r3, #1
 8003878:	441a      	add	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b0f      	cmp	r3, #15
 8003888:	d916      	bls.n	80038b8 <UART_SetConfig+0x404>
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003890:	d212      	bcs.n	80038b8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	b29b      	uxth	r3, r3
 8003896:	f023 030f 	bic.w	r3, r3, #15
 800389a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	89fb      	ldrh	r3, [r7, #14]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	89fa      	ldrh	r2, [r7, #14]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	e04f      	b.n	8003958 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	77bb      	strb	r3, [r7, #30]
 80038bc:	e04c      	b.n	8003958 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d828      	bhi.n	8003916 <UART_SetConfig+0x462>
 80038c4:	a201      	add	r2, pc, #4	; (adr r2, 80038cc <UART_SetConfig+0x418>)
 80038c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ca:	bf00      	nop
 80038cc:	080038f1 	.word	0x080038f1
 80038d0:	080038f9 	.word	0x080038f9
 80038d4:	08003901 	.word	0x08003901
 80038d8:	08003917 	.word	0x08003917
 80038dc:	08003907 	.word	0x08003907
 80038e0:	08003917 	.word	0x08003917
 80038e4:	08003917 	.word	0x08003917
 80038e8:	08003917 	.word	0x08003917
 80038ec:	0800390f 	.word	0x0800390f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f0:	f7fe fde4 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 80038f4:	61b8      	str	r0, [r7, #24]
        break;
 80038f6:	e013      	b.n	8003920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038f8:	f7fe fdf4 	bl	80024e4 <HAL_RCC_GetPCLK2Freq>
 80038fc:	61b8      	str	r0, [r7, #24]
        break;
 80038fe:	e00f      	b.n	8003920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003900:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <UART_SetConfig+0x4c4>)
 8003902:	61bb      	str	r3, [r7, #24]
        break;
 8003904:	e00c      	b.n	8003920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003906:	f7fe fd07 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 800390a:	61b8      	str	r0, [r7, #24]
        break;
 800390c:	e008      	b.n	8003920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800390e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003912:	61bb      	str	r3, [r7, #24]
        break;
 8003914:	e004      	b.n	8003920 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	77bb      	strb	r3, [r7, #30]
        break;
 800391e:	bf00      	nop
    }

    if (pclk != 0U)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d018      	beq.n	8003958 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	085a      	lsrs	r2, r3, #1
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	441a      	add	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b0f      	cmp	r3, #15
 800393e:	d909      	bls.n	8003954 <UART_SetConfig+0x4a0>
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003946:	d205      	bcs.n	8003954 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	b29a      	uxth	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	e001      	b.n	8003958 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003964:	7fbb      	ldrb	r3, [r7, #30]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40007c00 	.word	0x40007c00
 8003974:	40023800 	.word	0x40023800
 8003978:	00f42400 	.word	0x00f42400

0800397c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01a      	beq.n	8003a92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a7a:	d10a      	bne.n	8003a92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	605a      	str	r2, [r3, #4]
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ad0:	f7fd fd58 	bl	8001584 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d10e      	bne.n	8003b02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f81b 	bl	8003b2e <UART_WaitOnFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e011      	b.n	8003b26 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b09c      	sub	sp, #112	; 0x70
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3e:	e0a7      	b.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b46:	f000 80a3 	beq.w	8003c90 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4a:	f7fd fd1b 	bl	8001584 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d302      	bcc.n	8003b60 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d13f      	bne.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b74:	667b      	str	r3, [r7, #100]	; 0x64
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e6      	bne.n	8003b60 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3308      	adds	r3, #8
 8003b98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	663b      	str	r3, [r7, #96]	; 0x60
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3308      	adds	r3, #8
 8003bb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003bb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e5      	bne.n	8003b92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e068      	b.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d050      	beq.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bfc:	d148      	bne.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c06:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c26:	637b      	str	r3, [r7, #52]	; 0x34
 8003c28:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e6      	bne.n	8003c08 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	613b      	str	r3, [r7, #16]
   return(result);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3308      	adds	r3, #8
 8003c58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c5a:	623a      	str	r2, [r7, #32]
 8003c5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	69f9      	ldr	r1, [r7, #28]
 8003c60:	6a3a      	ldr	r2, [r7, #32]
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e5      	bne.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e010      	b.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	f43f af48 	beq.w	8003b40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3770      	adds	r7, #112	; 0x70
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ccc:	2b84      	cmp	r3, #132	; 0x84
 8003cce:	d005      	beq.n	8003cdc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003cd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3303      	adds	r3, #3
 8003cda:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003cee:	f000 fe43 	bl	8004978 <vTaskStartScheduler>
  
  return osOK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cfa:	b089      	sub	sp, #36	; 0x24
 8003cfc:	af04      	add	r7, sp, #16
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d020      	beq.n	8003d4c <osThreadCreate+0x54>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d01c      	beq.n	8003d4c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685c      	ldr	r4, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691e      	ldr	r6, [r3, #16]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ffc8 	bl	8003cba <makeFreeRtosPriority>
 8003d2a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d34:	9202      	str	r2, [sp, #8]
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	9100      	str	r1, [sp, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	4632      	mov	r2, r6
 8003d3e:	4629      	mov	r1, r5
 8003d40:	4620      	mov	r0, r4
 8003d42:	f000 fc47 	bl	80045d4 <xTaskCreateStatic>
 8003d46:	4603      	mov	r3, r0
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	e01c      	b.n	8003d86 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685c      	ldr	r4, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d58:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ffaa 	bl	8003cba <makeFreeRtosPriority>
 8003d66:	4602      	mov	r2, r0
 8003d68:	f107 030c 	add.w	r3, r7, #12
 8003d6c:	9301      	str	r3, [sp, #4]
 8003d6e:	9200      	str	r2, [sp, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4632      	mov	r2, r6
 8003d74:	4629      	mov	r1, r5
 8003d76:	4620      	mov	r0, r4
 8003d78:	f000 fc8f 	bl	800469a <xTaskCreate>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d001      	beq.n	8003d86 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e000      	b.n	8003d88 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d86:	68fb      	ldr	r3, [r7, #12]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d90 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <osDelay+0x16>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	e000      	b.n	8003da8 <osDelay+0x18>
 8003da6:	2301      	movs	r3, #1
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fdaf 	bl	800490c <vTaskDelay>
  
  return osOK;
 8003dae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00f      	beq.n	8003dea <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d10a      	bne.n	8003de6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	9200      	str	r2, [sp, #0]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2100      	movs	r1, #0
 8003ddc:	2001      	movs	r0, #1
 8003dde:	f000 f93b 	bl	8004058 <xQueueGenericCreateStatic>
 8003de2:	4603      	mov	r3, r0
 8003de4:	e016      	b.n	8003e14 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e014      	b.n	8003e14 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d110      	bne.n	8003e12 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003df0:	2203      	movs	r2, #3
 8003df2:	2100      	movs	r1, #0
 8003df4:	2001      	movs	r0, #1
 8003df6:	f000 f9b1 	bl	800415c <xQueueGenericCreate>
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <osSemaphoreCreate+0x56>
 8003e02:	2300      	movs	r3, #0
 8003e04:	2200      	movs	r2, #0
 8003e06:	2100      	movs	r1, #0
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fa09 	bl	8004220 <xQueueGenericSend>
      return sema;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	e000      	b.n	8003e14 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003e12:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f103 0208 	add.w	r2, r3, #8
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f103 0208 	add.w	r2, r3, #8
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f103 0208 	add.w	r2, r3, #8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e76:	b480      	push	{r7}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	601a      	str	r2, [r3, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ed4:	d103      	bne.n	8003ede <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	e00c      	b.n	8003ef8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e002      	b.n	8003eec <vListInsert+0x2e>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d2f6      	bcs.n	8003ee6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	601a      	str	r2, [r3, #0]
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6892      	ldr	r2, [r2, #8]
 8003f46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6852      	ldr	r2, [r2, #4]
 8003f50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d103      	bne.n	8003f64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	1e5a      	subs	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10c      	bne.n	8003fb2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	b672      	cpsid	i
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	b662      	cpsie	i
 8003fac:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003fae:	bf00      	nop
 8003fb0:	e7fe      	b.n	8003fb0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003fb2:	f001 fc13 	bl	80057dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	68f9      	ldr	r1, [r7, #12]
 8003fc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	441a      	add	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	68f9      	ldr	r1, [r7, #12]
 8003fe6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	441a      	add	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	22ff      	movs	r2, #255	; 0xff
 8003ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	22ff      	movs	r2, #255	; 0xff
 8003ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d114      	bne.n	8004032 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01a      	beq.n	8004046 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3310      	adds	r3, #16
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fefd 	bl	8004e14 <xTaskRemoveFromEventList>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d012      	beq.n	8004046 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <xQueueGenericReset+0xd0>)
 8004022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	e009      	b.n	8004046 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3310      	adds	r3, #16
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fef0 	bl	8003e1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3324      	adds	r3, #36	; 0x24
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff feeb 	bl	8003e1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004046:	f001 fbfd 	bl	8005844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800404a:	2301      	movs	r3, #1
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	e000ed04 	.word	0xe000ed04

08004058 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08e      	sub	sp, #56	; 0x38
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10c      	bne.n	8004086 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	b672      	cpsid	i
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	b662      	cpsie	i
 8004080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004082:	bf00      	nop
 8004084:	e7fe      	b.n	8004084 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10c      	bne.n	80040a6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	b672      	cpsid	i
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	b662      	cpsie	i
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <xQueueGenericCreateStatic+0x5a>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <xQueueGenericCreateStatic+0x5e>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <xQueueGenericCreateStatic+0x60>
 80040b6:	2300      	movs	r3, #0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10c      	bne.n	80040d6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	b672      	cpsid	i
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	b662      	cpsie	i
 80040d0:	623b      	str	r3, [r7, #32]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d102      	bne.n	80040e2 <xQueueGenericCreateStatic+0x8a>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <xQueueGenericCreateStatic+0x8e>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <xQueueGenericCreateStatic+0x90>
 80040e6:	2300      	movs	r3, #0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10c      	bne.n	8004106 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	b672      	cpsid	i
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	b662      	cpsie	i
 8004100:	61fb      	str	r3, [r7, #28]
}
 8004102:	bf00      	nop
 8004104:	e7fe      	b.n	8004104 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004106:	2348      	movs	r3, #72	; 0x48
 8004108:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b48      	cmp	r3, #72	; 0x48
 800410e:	d00c      	beq.n	800412a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	b672      	cpsid	i
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	b662      	cpsie	i
 8004124:	61bb      	str	r3, [r7, #24]
}
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800412a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00d      	beq.n	8004152 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800413e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	4613      	mov	r3, r2
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f847 	bl	80041e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004154:	4618      	mov	r0, r3
 8004156:	3730      	adds	r7, #48	; 0x30
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	4613      	mov	r3, r2
 8004168:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10c      	bne.n	800418a <xQueueGenericCreate+0x2e>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	b672      	cpsid	i
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	b662      	cpsie	i
 8004184:	613b      	str	r3, [r7, #16]
}
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	e004      	b.n	80041a0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	3348      	adds	r3, #72	; 0x48
 80041a4:	4618      	mov	r0, r3
 80041a6:	f001 fc01 	bl	80059ac <pvPortMalloc>
 80041aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d011      	beq.n	80041d6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	3348      	adds	r3, #72	; 0x48
 80041ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041c4:	79fa      	ldrb	r2, [r7, #7]
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	4613      	mov	r3, r2
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f805 	bl	80041e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041d6:	69bb      	ldr	r3, [r7, #24]
	}
 80041d8:	4618      	mov	r0, r3
 80041da:	3720      	adds	r7, #32
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d103      	bne.n	80041fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e002      	b.n	8004202 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800420e:	2101      	movs	r1, #1
 8004210:	69b8      	ldr	r0, [r7, #24]
 8004212:	f7ff feb7 	bl	8003f84 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004216:	bf00      	nop
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08e      	sub	sp, #56	; 0x38
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800422e:	2300      	movs	r3, #0
 8004230:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10c      	bne.n	8004256 <xQueueGenericSend+0x36>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	b672      	cpsid	i
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	b662      	cpsie	i
 8004250:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d103      	bne.n	8004264 <xQueueGenericSend+0x44>
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <xQueueGenericSend+0x48>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <xQueueGenericSend+0x4a>
 8004268:	2300      	movs	r3, #0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10c      	bne.n	8004288 <xQueueGenericSend+0x68>
	__asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	b672      	cpsid	i
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	b662      	cpsie	i
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d103      	bne.n	8004296 <xQueueGenericSend+0x76>
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <xQueueGenericSend+0x7a>
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <xQueueGenericSend+0x7c>
 800429a:	2300      	movs	r3, #0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10c      	bne.n	80042ba <xQueueGenericSend+0x9a>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	b672      	cpsid	i
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	b662      	cpsie	i
 80042b4:	623b      	str	r3, [r7, #32]
}
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042ba:	f000 ff6f 	bl	800519c <xTaskGetSchedulerState>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d102      	bne.n	80042ca <xQueueGenericSend+0xaa>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <xQueueGenericSend+0xae>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <xQueueGenericSend+0xb0>
 80042ce:	2300      	movs	r3, #0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10c      	bne.n	80042ee <xQueueGenericSend+0xce>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	b672      	cpsid	i
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	b662      	cpsie	i
 80042e8:	61fb      	str	r3, [r7, #28]
}
 80042ea:	bf00      	nop
 80042ec:	e7fe      	b.n	80042ec <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042ee:	f001 fa75 	bl	80057dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d302      	bcc.n	8004304 <xQueueGenericSend+0xe4>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d129      	bne.n	8004358 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800430a:	f000 f88f 	bl	800442c <prvCopyDataToQueue>
 800430e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	2b00      	cmp	r3, #0
 8004316:	d010      	beq.n	800433a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	3324      	adds	r3, #36	; 0x24
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fd79 	bl	8004e14 <xTaskRemoveFromEventList>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d013      	beq.n	8004350 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004328:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <xQueueGenericSend+0x208>)
 800432a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	e00a      	b.n	8004350 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d007      	beq.n	8004350 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004340:	4b39      	ldr	r3, [pc, #228]	; (8004428 <xQueueGenericSend+0x208>)
 8004342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004350:	f001 fa78 	bl	8005844 <vPortExitCritical>
				return pdPASS;
 8004354:	2301      	movs	r3, #1
 8004356:	e063      	b.n	8004420 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800435e:	f001 fa71 	bl	8005844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004362:	2300      	movs	r3, #0
 8004364:	e05c      	b.n	8004420 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800436c:	f107 0314 	add.w	r3, r7, #20
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fdb3 	bl	8004edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004376:	2301      	movs	r3, #1
 8004378:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800437a:	f001 fa63 	bl	8005844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800437e:	f000 fb5f 	bl	8004a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004382:	f001 fa2b 	bl	80057dc <vPortEnterCritical>
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800438c:	b25b      	sxtb	r3, r3
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004392:	d103      	bne.n	800439c <xQueueGenericSend+0x17c>
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043a2:	b25b      	sxtb	r3, r3
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a8:	d103      	bne.n	80043b2 <xQueueGenericSend+0x192>
 80043aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043b2:	f001 fa47 	bl	8005844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043b6:	1d3a      	adds	r2, r7, #4
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	4611      	mov	r1, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fda2 	bl	8004f08 <xTaskCheckForTimeOut>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d124      	bne.n	8004414 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043cc:	f000 f8ea 	bl	80045a4 <prvIsQueueFull>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d018      	beq.n	8004408 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	3310      	adds	r3, #16
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	4611      	mov	r1, r2
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fcf2 	bl	8004dc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043e6:	f000 f88b 	bl	8004500 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043ea:	f000 fb37 	bl	8004a5c <xTaskResumeAll>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f47f af7c 	bne.w	80042ee <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80043f6:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <xQueueGenericSend+0x208>)
 80043f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	e772      	b.n	80042ee <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800440a:	f000 f879 	bl	8004500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800440e:	f000 fb25 	bl	8004a5c <xTaskResumeAll>
 8004412:	e76c      	b.n	80042ee <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004416:	f000 f873 	bl	8004500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800441a:	f000 fb1f 	bl	8004a5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800441e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004420:	4618      	mov	r0, r3
 8004422:	3738      	adds	r7, #56	; 0x38
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	e000ed04 	.word	0xe000ed04

0800442c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10d      	bne.n	8004466 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d14d      	bne.n	80044ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 febe 	bl	80051d8 <xTaskPriorityDisinherit>
 800445c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	e043      	b.n	80044ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d119      	bne.n	80044a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6858      	ldr	r0, [r3, #4]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	461a      	mov	r2, r3
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	f001 feed 	bl	8006256 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	441a      	add	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	429a      	cmp	r2, r3
 8004494:	d32b      	bcc.n	80044ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	e026      	b.n	80044ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	68d8      	ldr	r0, [r3, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	461a      	mov	r2, r3
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	f001 fed3 	bl	8006256 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	425b      	negs	r3, r3
 80044ba:	441a      	add	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d207      	bcs.n	80044dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	425b      	negs	r3, r3
 80044d6:	441a      	add	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d105      	bne.n	80044ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80044f6:	697b      	ldr	r3, [r7, #20]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004508:	f001 f968 	bl	80057dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004512:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004514:	e011      	b.n	800453a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	2b00      	cmp	r3, #0
 800451c:	d012      	beq.n	8004544 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3324      	adds	r3, #36	; 0x24
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fc76 	bl	8004e14 <xTaskRemoveFromEventList>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800452e:	f000 fd51 	bl	8004fd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	3b01      	subs	r3, #1
 8004536:	b2db      	uxtb	r3, r3
 8004538:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800453a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	dce9      	bgt.n	8004516 <prvUnlockQueue+0x16>
 8004542:	e000      	b.n	8004546 <prvUnlockQueue+0x46>
					break;
 8004544:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	22ff      	movs	r2, #255	; 0xff
 800454a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800454e:	f001 f979 	bl	8005844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004552:	f001 f943 	bl	80057dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800455c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800455e:	e011      	b.n	8004584 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d012      	beq.n	800458e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3310      	adds	r3, #16
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fc51 	bl	8004e14 <xTaskRemoveFromEventList>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004578:	f000 fd2c 	bl	8004fd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800457c:	7bbb      	ldrb	r3, [r7, #14]
 800457e:	3b01      	subs	r3, #1
 8004580:	b2db      	uxtb	r3, r3
 8004582:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004588:	2b00      	cmp	r3, #0
 800458a:	dce9      	bgt.n	8004560 <prvUnlockQueue+0x60>
 800458c:	e000      	b.n	8004590 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800458e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	22ff      	movs	r2, #255	; 0xff
 8004594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004598:	f001 f954 	bl	8005844 <vPortExitCritical>
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045ac:	f001 f916 	bl	80057dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d102      	bne.n	80045c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80045bc:	2301      	movs	r3, #1
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e001      	b.n	80045c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045c6:	f001 f93d 	bl	8005844 <vPortExitCritical>

	return xReturn;
 80045ca:	68fb      	ldr	r3, [r7, #12]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08e      	sub	sp, #56	; 0x38
 80045d8:	af04      	add	r7, sp, #16
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10c      	bne.n	8004602 <xTaskCreateStatic+0x2e>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	b672      	cpsid	i
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	b662      	cpsie	i
 80045fc:	623b      	str	r3, [r7, #32]
}
 80045fe:	bf00      	nop
 8004600:	e7fe      	b.n	8004600 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10c      	bne.n	8004622 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	b672      	cpsid	i
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	b662      	cpsie	i
 800461c:	61fb      	str	r3, [r7, #28]
}
 800461e:	bf00      	nop
 8004620:	e7fe      	b.n	8004620 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004622:	2354      	movs	r3, #84	; 0x54
 8004624:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b54      	cmp	r3, #84	; 0x54
 800462a:	d00c      	beq.n	8004646 <xTaskCreateStatic+0x72>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	b672      	cpsid	i
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	b662      	cpsie	i
 8004640:	61bb      	str	r3, [r7, #24]
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004646:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01e      	beq.n	800468c <xTaskCreateStatic+0xb8>
 800464e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01b      	beq.n	800468c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800465c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	2202      	movs	r2, #2
 8004662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004666:	2300      	movs	r3, #0
 8004668:	9303      	str	r3, [sp, #12]
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	9302      	str	r3, [sp, #8]
 800466e:	f107 0314 	add.w	r3, r7, #20
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f850 	bl	8004724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004686:	f000 f8d7 	bl	8004838 <prvAddNewTaskToReadyList>
 800468a:	e001      	b.n	8004690 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004690:	697b      	ldr	r3, [r7, #20]
	}
 8004692:	4618      	mov	r0, r3
 8004694:	3728      	adds	r7, #40	; 0x28
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800469a:	b580      	push	{r7, lr}
 800469c:	b08c      	sub	sp, #48	; 0x30
 800469e:	af04      	add	r7, sp, #16
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	603b      	str	r3, [r7, #0]
 80046a6:	4613      	mov	r3, r2
 80046a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f001 f97c 	bl	80059ac <pvPortMalloc>
 80046b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00e      	beq.n	80046da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046bc:	2054      	movs	r0, #84	; 0x54
 80046be:	f001 f975 	bl	80059ac <pvPortMalloc>
 80046c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
 80046d0:	e005      	b.n	80046de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046d2:	6978      	ldr	r0, [r7, #20]
 80046d4:	f001 fa34 	bl	8005b40 <vPortFree>
 80046d8:	e001      	b.n	80046de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d017      	beq.n	8004714 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046ec:	88fa      	ldrh	r2, [r7, #6]
 80046ee:	2300      	movs	r3, #0
 80046f0:	9303      	str	r3, [sp, #12]
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	9302      	str	r3, [sp, #8]
 80046f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f80e 	bl	8004724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004708:	69f8      	ldr	r0, [r7, #28]
 800470a:	f000 f895 	bl	8004838 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800470e:	2301      	movs	r3, #1
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e002      	b.n	800471a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004718:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800471a:	69bb      	ldr	r3, [r7, #24]
	}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800473c:	440b      	add	r3, r1
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	f023 0307 	bic.w	r3, r3, #7
 800474a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	b672      	cpsid	i
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	b662      	cpsie	i
 800476a:	617b      	str	r3, [r7, #20]
}
 800476c:	bf00      	nop
 800476e:	e7fe      	b.n	800476e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d01f      	beq.n	80047b6 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004776:	2300      	movs	r3, #0
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	e012      	b.n	80047a2 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4413      	add	r3, r2
 8004782:	7819      	ldrb	r1, [r3, #0]
 8004784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	4413      	add	r3, r2
 800478a:	3334      	adds	r3, #52	; 0x34
 800478c:	460a      	mov	r2, r1
 800478e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d006      	beq.n	80047aa <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	3301      	adds	r3, #1
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b0f      	cmp	r3, #15
 80047a6:	d9e9      	bls.n	800477c <prvInitialiseNewTask+0x58>
 80047a8:	e000      	b.n	80047ac <prvInitialiseNewTask+0x88>
			{
				break;
 80047aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047b4:	e003      	b.n	80047be <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	2b06      	cmp	r3, #6
 80047c2:	d901      	bls.n	80047c8 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047c4:	2306      	movs	r3, #6
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	2200      	movs	r2, #0
 80047d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	3304      	adds	r3, #4
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fb3c 	bl	8003e5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	3318      	adds	r3, #24
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff fb37 	bl	8003e5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	f1c3 0207 	rsb	r2, r3, #7
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004802:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	2200      	movs	r2, #0
 8004808:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	68f9      	ldr	r1, [r7, #12]
 8004816:	69b8      	ldr	r0, [r7, #24]
 8004818:	f000 fed2 	bl	80055c0 <pxPortInitialiseStack>
 800481c:	4602      	mov	r2, r0
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800482c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800482e:	bf00      	nop
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004840:	f000 ffcc 	bl	80057dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004844:	4b2a      	ldr	r3, [pc, #168]	; (80048f0 <prvAddNewTaskToReadyList+0xb8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3301      	adds	r3, #1
 800484a:	4a29      	ldr	r2, [pc, #164]	; (80048f0 <prvAddNewTaskToReadyList+0xb8>)
 800484c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800484e:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <prvAddNewTaskToReadyList+0xbc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004856:	4a27      	ldr	r2, [pc, #156]	; (80048f4 <prvAddNewTaskToReadyList+0xbc>)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800485c:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <prvAddNewTaskToReadyList+0xb8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d110      	bne.n	8004886 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004864:	f000 fbda 	bl	800501c <prvInitialiseTaskLists>
 8004868:	e00d      	b.n	8004886 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800486a:	4b23      	ldr	r3, [pc, #140]	; (80048f8 <prvAddNewTaskToReadyList+0xc0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d109      	bne.n	8004886 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004872:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <prvAddNewTaskToReadyList+0xbc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	429a      	cmp	r2, r3
 800487e:	d802      	bhi.n	8004886 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004880:	4a1c      	ldr	r2, [pc, #112]	; (80048f4 <prvAddNewTaskToReadyList+0xbc>)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004886:	4b1d      	ldr	r3, [pc, #116]	; (80048fc <prvAddNewTaskToReadyList+0xc4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3301      	adds	r3, #1
 800488c:	4a1b      	ldr	r2, [pc, #108]	; (80048fc <prvAddNewTaskToReadyList+0xc4>)
 800488e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	2201      	movs	r2, #1
 8004896:	409a      	lsls	r2, r3
 8004898:	4b19      	ldr	r3, [pc, #100]	; (8004900 <prvAddNewTaskToReadyList+0xc8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4313      	orrs	r3, r2
 800489e:	4a18      	ldr	r2, [pc, #96]	; (8004900 <prvAddNewTaskToReadyList+0xc8>)
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4a15      	ldr	r2, [pc, #84]	; (8004904 <prvAddNewTaskToReadyList+0xcc>)
 80048b0:	441a      	add	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3304      	adds	r3, #4
 80048b6:	4619      	mov	r1, r3
 80048b8:	4610      	mov	r0, r2
 80048ba:	f7ff fadc 	bl	8003e76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048be:	f000 ffc1 	bl	8005844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048c2:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <prvAddNewTaskToReadyList+0xc0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00e      	beq.n	80048e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <prvAddNewTaskToReadyList+0xbc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d207      	bcs.n	80048e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048d8:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <prvAddNewTaskToReadyList+0xd0>)
 80048da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	200004cc 	.word	0x200004cc
 80048f4:	200003cc 	.word	0x200003cc
 80048f8:	200004d8 	.word	0x200004d8
 80048fc:	200004e8 	.word	0x200004e8
 8004900:	200004d4 	.word	0x200004d4
 8004904:	200003d0 	.word	0x200003d0
 8004908:	e000ed04 	.word	0xe000ed04

0800490c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d019      	beq.n	8004952 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800491e:	4b14      	ldr	r3, [pc, #80]	; (8004970 <vTaskDelay+0x64>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00c      	beq.n	8004940 <vTaskDelay+0x34>
	__asm volatile
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	b672      	cpsid	i
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	b662      	cpsie	i
 800493a:	60bb      	str	r3, [r7, #8]
}
 800493c:	bf00      	nop
 800493e:	e7fe      	b.n	800493e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004940:	f000 f87e 	bl	8004a40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004944:	2100      	movs	r1, #0
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fdd4 	bl	80054f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800494c:	f000 f886 	bl	8004a5c <xTaskResumeAll>
 8004950:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <vTaskDelay+0x68>)
 800495a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	200004f4 	.word	0x200004f4
 8004974:	e000ed04 	.word	0xe000ed04

08004978 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08a      	sub	sp, #40	; 0x28
 800497c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800497e:	2300      	movs	r3, #0
 8004980:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004986:	463a      	mov	r2, r7
 8004988:	1d39      	adds	r1, r7, #4
 800498a:	f107 0308 	add.w	r3, r7, #8
 800498e:	4618      	mov	r0, r3
 8004990:	f7fb fdbc 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004994:	6839      	ldr	r1, [r7, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	9202      	str	r2, [sp, #8]
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	2300      	movs	r3, #0
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	2300      	movs	r3, #0
 80049a4:	460a      	mov	r2, r1
 80049a6:	4920      	ldr	r1, [pc, #128]	; (8004a28 <vTaskStartScheduler+0xb0>)
 80049a8:	4820      	ldr	r0, [pc, #128]	; (8004a2c <vTaskStartScheduler+0xb4>)
 80049aa:	f7ff fe13 	bl	80045d4 <xTaskCreateStatic>
 80049ae:	4603      	mov	r3, r0
 80049b0:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <vTaskStartScheduler+0xb8>)
 80049b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049b4:	4b1e      	ldr	r3, [pc, #120]	; (8004a30 <vTaskStartScheduler+0xb8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049bc:	2301      	movs	r3, #1
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	e001      	b.n	80049c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d118      	bne.n	80049fe <vTaskStartScheduler+0x86>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	b672      	cpsid	i
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	b662      	cpsie	i
 80049e0:	613b      	str	r3, [r7, #16]
}
 80049e2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049e4:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <vTaskStartScheduler+0xbc>)
 80049e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049ec:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <vTaskStartScheduler+0xc0>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049f2:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <vTaskStartScheduler+0xc4>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049f8:	f000 fe72 	bl	80056e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049fc:	e010      	b.n	8004a20 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a04:	d10c      	bne.n	8004a20 <vTaskStartScheduler+0xa8>
	__asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	b672      	cpsid	i
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	b662      	cpsie	i
 8004a1a:	60fb      	str	r3, [r7, #12]
}
 8004a1c:	bf00      	nop
 8004a1e:	e7fe      	b.n	8004a1e <vTaskStartScheduler+0xa6>
}
 8004a20:	bf00      	nop
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	08006764 	.word	0x08006764
 8004a2c:	08004fed 	.word	0x08004fed
 8004a30:	200004f0 	.word	0x200004f0
 8004a34:	200004ec 	.word	0x200004ec
 8004a38:	200004d8 	.word	0x200004d8
 8004a3c:	200004d0 	.word	0x200004d0

08004a40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a44:	4b04      	ldr	r3, [pc, #16]	; (8004a58 <vTaskSuspendAll+0x18>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	4a03      	ldr	r2, [pc, #12]	; (8004a58 <vTaskSuspendAll+0x18>)
 8004a4c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004a4e:	bf00      	nop
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	200004f4 	.word	0x200004f4

08004a5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a6a:	4b42      	ldr	r3, [pc, #264]	; (8004b74 <xTaskResumeAll+0x118>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10c      	bne.n	8004a8c <xTaskResumeAll+0x30>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	b672      	cpsid	i
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	b662      	cpsie	i
 8004a86:	603b      	str	r3, [r7, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	e7fe      	b.n	8004a8a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a8c:	f000 fea6 	bl	80057dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a90:	4b38      	ldr	r3, [pc, #224]	; (8004b74 <xTaskResumeAll+0x118>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	4a37      	ldr	r2, [pc, #220]	; (8004b74 <xTaskResumeAll+0x118>)
 8004a98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a9a:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <xTaskResumeAll+0x118>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d161      	bne.n	8004b66 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004aa2:	4b35      	ldr	r3, [pc, #212]	; (8004b78 <xTaskResumeAll+0x11c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d05d      	beq.n	8004b66 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aaa:	e02e      	b.n	8004b0a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aac:	4b33      	ldr	r3, [pc, #204]	; (8004b7c <xTaskResumeAll+0x120>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3318      	adds	r3, #24
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fa39 	bl	8003f30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff fa34 	bl	8003f30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	2201      	movs	r2, #1
 8004ace:	409a      	lsls	r2, r3
 8004ad0:	4b2b      	ldr	r3, [pc, #172]	; (8004b80 <xTaskResumeAll+0x124>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	4a2a      	ldr	r2, [pc, #168]	; (8004b80 <xTaskResumeAll+0x124>)
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4a27      	ldr	r2, [pc, #156]	; (8004b84 <xTaskResumeAll+0x128>)
 8004ae8:	441a      	add	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3304      	adds	r3, #4
 8004aee:	4619      	mov	r1, r3
 8004af0:	4610      	mov	r0, r2
 8004af2:	f7ff f9c0 	bl	8003e76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afa:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <xTaskResumeAll+0x12c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004b04:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <xTaskResumeAll+0x130>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b0a:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <xTaskResumeAll+0x120>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1cc      	bne.n	8004aac <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b18:	f000 fb20 	bl	800515c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b1c:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <xTaskResumeAll+0x134>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d010      	beq.n	8004b4a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b28:	f000 f836 	bl	8004b98 <xTaskIncrementTick>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004b32:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <xTaskResumeAll+0x130>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f1      	bne.n	8004b28 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004b44:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <xTaskResumeAll+0x134>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b4a:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <xTaskResumeAll+0x130>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b56:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <xTaskResumeAll+0x138>)
 8004b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b66:	f000 fe6d 	bl	8005844 <vPortExitCritical>

	return xAlreadyYielded;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	200004f4 	.word	0x200004f4
 8004b78:	200004cc 	.word	0x200004cc
 8004b7c:	2000048c 	.word	0x2000048c
 8004b80:	200004d4 	.word	0x200004d4
 8004b84:	200003d0 	.word	0x200003d0
 8004b88:	200003cc 	.word	0x200003cc
 8004b8c:	200004e0 	.word	0x200004e0
 8004b90:	200004dc 	.word	0x200004dc
 8004b94:	e000ed04 	.word	0xe000ed04

08004b98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba2:	4b4f      	ldr	r3, [pc, #316]	; (8004ce0 <xTaskIncrementTick+0x148>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f040 808a 	bne.w	8004cc0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bac:	4b4d      	ldr	r3, [pc, #308]	; (8004ce4 <xTaskIncrementTick+0x14c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bb4:	4a4b      	ldr	r2, [pc, #300]	; (8004ce4 <xTaskIncrementTick+0x14c>)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d122      	bne.n	8004c06 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bc0:	4b49      	ldr	r3, [pc, #292]	; (8004ce8 <xTaskIncrementTick+0x150>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00c      	beq.n	8004be4 <xTaskIncrementTick+0x4c>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	b672      	cpsid	i
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	b662      	cpsie	i
 8004bde:	603b      	str	r3, [r7, #0]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <xTaskIncrementTick+0x4a>
 8004be4:	4b40      	ldr	r3, [pc, #256]	; (8004ce8 <xTaskIncrementTick+0x150>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	4b40      	ldr	r3, [pc, #256]	; (8004cec <xTaskIncrementTick+0x154>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a3e      	ldr	r2, [pc, #248]	; (8004ce8 <xTaskIncrementTick+0x150>)
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	4a3e      	ldr	r2, [pc, #248]	; (8004cec <xTaskIncrementTick+0x154>)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	4b3d      	ldr	r3, [pc, #244]	; (8004cf0 <xTaskIncrementTick+0x158>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	4a3c      	ldr	r2, [pc, #240]	; (8004cf0 <xTaskIncrementTick+0x158>)
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	f000 faab 	bl	800515c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c06:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <xTaskIncrementTick+0x15c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d348      	bcc.n	8004ca2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c10:	4b35      	ldr	r3, [pc, #212]	; (8004ce8 <xTaskIncrementTick+0x150>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d104      	bne.n	8004c24 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1a:	4b36      	ldr	r3, [pc, #216]	; (8004cf4 <xTaskIncrementTick+0x15c>)
 8004c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c20:	601a      	str	r2, [r3, #0]
					break;
 8004c22:	e03e      	b.n	8004ca2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c24:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <xTaskIncrementTick+0x150>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d203      	bcs.n	8004c44 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c3c:	4a2d      	ldr	r2, [pc, #180]	; (8004cf4 <xTaskIncrementTick+0x15c>)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c42:	e02e      	b.n	8004ca2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff f971 	bl	8003f30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d004      	beq.n	8004c60 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	3318      	adds	r3, #24
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff f968 	bl	8003f30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	2201      	movs	r2, #1
 8004c66:	409a      	lsls	r2, r3
 8004c68:	4b23      	ldr	r3, [pc, #140]	; (8004cf8 <xTaskIncrementTick+0x160>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	4a22      	ldr	r2, [pc, #136]	; (8004cf8 <xTaskIncrementTick+0x160>)
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4a1f      	ldr	r2, [pc, #124]	; (8004cfc <xTaskIncrementTick+0x164>)
 8004c80:	441a      	add	r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	3304      	adds	r3, #4
 8004c86:	4619      	mov	r1, r3
 8004c88:	4610      	mov	r0, r2
 8004c8a:	f7ff f8f4 	bl	8003e76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c92:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <xTaskIncrementTick+0x168>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d3b9      	bcc.n	8004c10 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca0:	e7b6      	b.n	8004c10 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ca2:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <xTaskIncrementTick+0x168>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca8:	4914      	ldr	r1, [pc, #80]	; (8004cfc <xTaskIncrementTick+0x164>)
 8004caa:	4613      	mov	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d907      	bls.n	8004cca <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	e004      	b.n	8004cca <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004cc0:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <xTaskIncrementTick+0x16c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	4a0f      	ldr	r2, [pc, #60]	; (8004d04 <xTaskIncrementTick+0x16c>)
 8004cc8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004cca:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <xTaskIncrementTick+0x170>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004cd6:	697b      	ldr	r3, [r7, #20]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	200004f4 	.word	0x200004f4
 8004ce4:	200004d0 	.word	0x200004d0
 8004ce8:	20000484 	.word	0x20000484
 8004cec:	20000488 	.word	0x20000488
 8004cf0:	200004e4 	.word	0x200004e4
 8004cf4:	200004ec 	.word	0x200004ec
 8004cf8:	200004d4 	.word	0x200004d4
 8004cfc:	200003d0 	.word	0x200003d0
 8004d00:	200003cc 	.word	0x200003cc
 8004d04:	200004dc 	.word	0x200004dc
 8004d08:	200004e0 	.word	0x200004e0

08004d0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d12:	4b28      	ldr	r3, [pc, #160]	; (8004db4 <vTaskSwitchContext+0xa8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d1a:	4b27      	ldr	r3, [pc, #156]	; (8004db8 <vTaskSwitchContext+0xac>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d20:	e041      	b.n	8004da6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004d22:	4b25      	ldr	r3, [pc, #148]	; (8004db8 <vTaskSwitchContext+0xac>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d28:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <vTaskSwitchContext+0xb0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	fab3 f383 	clz	r3, r3
 8004d34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d36:	7afb      	ldrb	r3, [r7, #11]
 8004d38:	f1c3 031f 	rsb	r3, r3, #31
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	4920      	ldr	r1, [pc, #128]	; (8004dc0 <vTaskSwitchContext+0xb4>)
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10c      	bne.n	8004d6c <vTaskSwitchContext+0x60>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	b672      	cpsid	i
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	b662      	cpsie	i
 8004d66:	607b      	str	r3, [r7, #4]
}
 8004d68:	bf00      	nop
 8004d6a:	e7fe      	b.n	8004d6a <vTaskSwitchContext+0x5e>
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4a12      	ldr	r2, [pc, #72]	; (8004dc0 <vTaskSwitchContext+0xb4>)
 8004d78:	4413      	add	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d104      	bne.n	8004d9c <vTaskSwitchContext+0x90>
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	605a      	str	r2, [r3, #4]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <vTaskSwitchContext+0xb8>)
 8004da4:	6013      	str	r3, [r2, #0]
}
 8004da6:	bf00      	nop
 8004da8:	371c      	adds	r7, #28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	200004f4 	.word	0x200004f4
 8004db8:	200004e0 	.word	0x200004e0
 8004dbc:	200004d4 	.word	0x200004d4
 8004dc0:	200003d0 	.word	0x200003d0
 8004dc4:	200003cc 	.word	0x200003cc

08004dc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10c      	bne.n	8004df2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	b672      	cpsid	i
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	b662      	cpsie	i
 8004dec:	60fb      	str	r3, [r7, #12]
}
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004df2:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <vTaskPlaceOnEventList+0x48>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3318      	adds	r3, #24
 8004df8:	4619      	mov	r1, r3
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff f85f 	bl	8003ebe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e00:	2101      	movs	r1, #1
 8004e02:	6838      	ldr	r0, [r7, #0]
 8004e04:	f000 fb76 	bl	80054f4 <prvAddCurrentTaskToDelayedList>
}
 8004e08:	bf00      	nop
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	200003cc 	.word	0x200003cc

08004e14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10c      	bne.n	8004e44 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	b672      	cpsid	i
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	b662      	cpsie	i
 8004e3e:	60fb      	str	r3, [r7, #12]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	3318      	adds	r3, #24
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff f871 	bl	8003f30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <xTaskRemoveFromEventList+0xb0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d11c      	bne.n	8004e90 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff f868 	bl	8003f30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	2201      	movs	r2, #1
 8004e66:	409a      	lsls	r2, r3
 8004e68:	4b17      	ldr	r3, [pc, #92]	; (8004ec8 <xTaskRemoveFromEventList+0xb4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	4a16      	ldr	r2, [pc, #88]	; (8004ec8 <xTaskRemoveFromEventList+0xb4>)
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4a13      	ldr	r2, [pc, #76]	; (8004ecc <xTaskRemoveFromEventList+0xb8>)
 8004e80:	441a      	add	r2, r3
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	3304      	adds	r3, #4
 8004e86:	4619      	mov	r1, r3
 8004e88:	4610      	mov	r0, r2
 8004e8a:	f7fe fff4 	bl	8003e76 <vListInsertEnd>
 8004e8e:	e005      	b.n	8004e9c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	3318      	adds	r3, #24
 8004e94:	4619      	mov	r1, r3
 8004e96:	480e      	ldr	r0, [pc, #56]	; (8004ed0 <xTaskRemoveFromEventList+0xbc>)
 8004e98:	f7fe ffed 	bl	8003e76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <xTaskRemoveFromEventList+0xc0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d905      	bls.n	8004eb6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004eae:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <xTaskRemoveFromEventList+0xc4>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e001      	b.n	8004eba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004eba:	697b      	ldr	r3, [r7, #20]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	200004f4 	.word	0x200004f4
 8004ec8:	200004d4 	.word	0x200004d4
 8004ecc:	200003d0 	.word	0x200003d0
 8004ed0:	2000048c 	.word	0x2000048c
 8004ed4:	200003cc 	.word	0x200003cc
 8004ed8:	200004e0 	.word	0x200004e0

08004edc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ee4:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <vTaskInternalSetTimeOutState+0x24>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <vTaskInternalSetTimeOutState+0x28>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	605a      	str	r2, [r3, #4]
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	200004e4 	.word	0x200004e4
 8004f04:	200004d0 	.word	0x200004d0

08004f08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10c      	bne.n	8004f32 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	b672      	cpsid	i
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	b662      	cpsie	i
 8004f2c:	613b      	str	r3, [r7, #16]
}
 8004f2e:	bf00      	nop
 8004f30:	e7fe      	b.n	8004f30 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10c      	bne.n	8004f52 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3c:	b672      	cpsid	i
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	b662      	cpsie	i
 8004f4c:	60fb      	str	r3, [r7, #12]
}
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8004f52:	f000 fc43 	bl	80057dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f56:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <xTaskCheckForTimeOut+0xc4>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f6e:	d102      	bne.n	8004f76 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f70:	2300      	movs	r3, #0
 8004f72:	61fb      	str	r3, [r7, #28]
 8004f74:	e023      	b.n	8004fbe <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <xTaskCheckForTimeOut+0xc8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d007      	beq.n	8004f92 <xTaskCheckForTimeOut+0x8a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d302      	bcc.n	8004f92 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	e015      	b.n	8004fbe <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d20b      	bcs.n	8004fb4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	1ad2      	subs	r2, r2, r3
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff ff97 	bl	8004edc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	e004      	b.n	8004fbe <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004fbe:	f000 fc41 	bl	8005844 <vPortExitCritical>

	return xReturn;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3720      	adds	r7, #32
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	200004d0 	.word	0x200004d0
 8004fd0:	200004e4 	.word	0x200004e4

08004fd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004fd8:	4b03      	ldr	r3, [pc, #12]	; (8004fe8 <vTaskMissedYield+0x14>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
}
 8004fde:	bf00      	nop
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	200004e0 	.word	0x200004e0

08004fec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ff4:	f000 f852 	bl	800509c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ff8:	4b06      	ldr	r3, [pc, #24]	; (8005014 <prvIdleTask+0x28>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d9f9      	bls.n	8004ff4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005000:	4b05      	ldr	r3, [pc, #20]	; (8005018 <prvIdleTask+0x2c>)
 8005002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005010:	e7f0      	b.n	8004ff4 <prvIdleTask+0x8>
 8005012:	bf00      	nop
 8005014:	200003d0 	.word	0x200003d0
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005022:	2300      	movs	r3, #0
 8005024:	607b      	str	r3, [r7, #4]
 8005026:	e00c      	b.n	8005042 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4a12      	ldr	r2, [pc, #72]	; (800507c <prvInitialiseTaskLists+0x60>)
 8005034:	4413      	add	r3, r2
 8005036:	4618      	mov	r0, r3
 8005038:	f7fe fef0 	bl	8003e1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3301      	adds	r3, #1
 8005040:	607b      	str	r3, [r7, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b06      	cmp	r3, #6
 8005046:	d9ef      	bls.n	8005028 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005048:	480d      	ldr	r0, [pc, #52]	; (8005080 <prvInitialiseTaskLists+0x64>)
 800504a:	f7fe fee7 	bl	8003e1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800504e:	480d      	ldr	r0, [pc, #52]	; (8005084 <prvInitialiseTaskLists+0x68>)
 8005050:	f7fe fee4 	bl	8003e1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005054:	480c      	ldr	r0, [pc, #48]	; (8005088 <prvInitialiseTaskLists+0x6c>)
 8005056:	f7fe fee1 	bl	8003e1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800505a:	480c      	ldr	r0, [pc, #48]	; (800508c <prvInitialiseTaskLists+0x70>)
 800505c:	f7fe fede 	bl	8003e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005060:	480b      	ldr	r0, [pc, #44]	; (8005090 <prvInitialiseTaskLists+0x74>)
 8005062:	f7fe fedb 	bl	8003e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005066:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <prvInitialiseTaskLists+0x78>)
 8005068:	4a05      	ldr	r2, [pc, #20]	; (8005080 <prvInitialiseTaskLists+0x64>)
 800506a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <prvInitialiseTaskLists+0x7c>)
 800506e:	4a05      	ldr	r2, [pc, #20]	; (8005084 <prvInitialiseTaskLists+0x68>)
 8005070:	601a      	str	r2, [r3, #0]
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	200003d0 	.word	0x200003d0
 8005080:	2000045c 	.word	0x2000045c
 8005084:	20000470 	.word	0x20000470
 8005088:	2000048c 	.word	0x2000048c
 800508c:	200004a0 	.word	0x200004a0
 8005090:	200004b8 	.word	0x200004b8
 8005094:	20000484 	.word	0x20000484
 8005098:	20000488 	.word	0x20000488

0800509c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050a2:	e019      	b.n	80050d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050a4:	f000 fb9a 	bl	80057dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a8:	4b10      	ldr	r3, [pc, #64]	; (80050ec <prvCheckTasksWaitingTermination+0x50>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fe ff3b 	bl	8003f30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050ba:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <prvCheckTasksWaitingTermination+0x54>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3b01      	subs	r3, #1
 80050c0:	4a0b      	ldr	r2, [pc, #44]	; (80050f0 <prvCheckTasksWaitingTermination+0x54>)
 80050c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050c4:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <prvCheckTasksWaitingTermination+0x58>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	4a0a      	ldr	r2, [pc, #40]	; (80050f4 <prvCheckTasksWaitingTermination+0x58>)
 80050cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050ce:	f000 fbb9 	bl	8005844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f810 	bl	80050f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050d8:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <prvCheckTasksWaitingTermination+0x58>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e1      	bne.n	80050a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	200004a0 	.word	0x200004a0
 80050f0:	200004cc 	.word	0x200004cc
 80050f4:	200004b4 	.word	0x200004b4

080050f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005106:	2b00      	cmp	r3, #0
 8005108:	d108      	bne.n	800511c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fd16 	bl	8005b40 <vPortFree>
				vPortFree( pxTCB );
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fd13 	bl	8005b40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800511a:	e01a      	b.n	8005152 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005122:	2b01      	cmp	r3, #1
 8005124:	d103      	bne.n	800512e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fd0a 	bl	8005b40 <vPortFree>
	}
 800512c:	e011      	b.n	8005152 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005134:	2b02      	cmp	r3, #2
 8005136:	d00c      	beq.n	8005152 <prvDeleteTCB+0x5a>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	b672      	cpsid	i
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	b662      	cpsie	i
 800514c:	60fb      	str	r3, [r7, #12]
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <prvDeleteTCB+0x58>
	}
 8005152:	bf00      	nop
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005162:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <prvResetNextTaskUnblockTime+0x38>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d104      	bne.n	8005176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800516c:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <prvResetNextTaskUnblockTime+0x3c>)
 800516e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005174:	e008      	b.n	8005188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005176:	4b07      	ldr	r3, [pc, #28]	; (8005194 <prvResetNextTaskUnblockTime+0x38>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	4a04      	ldr	r2, [pc, #16]	; (8005198 <prvResetNextTaskUnblockTime+0x3c>)
 8005186:	6013      	str	r3, [r2, #0]
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	20000484 	.word	0x20000484
 8005198:	200004ec 	.word	0x200004ec

0800519c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051a2:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <xTaskGetSchedulerState+0x34>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d102      	bne.n	80051b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051aa:	2301      	movs	r3, #1
 80051ac:	607b      	str	r3, [r7, #4]
 80051ae:	e008      	b.n	80051c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051b0:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <xTaskGetSchedulerState+0x38>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d102      	bne.n	80051be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051b8:	2302      	movs	r3, #2
 80051ba:	607b      	str	r3, [r7, #4]
 80051bc:	e001      	b.n	80051c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051be:	2300      	movs	r3, #0
 80051c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051c2:	687b      	ldr	r3, [r7, #4]
	}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	200004d8 	.word	0x200004d8
 80051d4:	200004f4 	.word	0x200004f4

080051d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d072      	beq.n	80052d4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80051ee:	4b3c      	ldr	r3, [pc, #240]	; (80052e0 <xTaskPriorityDisinherit+0x108>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d00c      	beq.n	8005212 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	b672      	cpsid	i
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	b662      	cpsie	i
 800520c:	60fb      	str	r3, [r7, #12]
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10c      	bne.n	8005234 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	b672      	cpsid	i
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	b662      	cpsie	i
 800522e:	60bb      	str	r3, [r7, #8]
}
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005238:	1e5a      	subs	r2, r3, #1
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005246:	429a      	cmp	r2, r3
 8005248:	d044      	beq.n	80052d4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524e:	2b00      	cmp	r3, #0
 8005250:	d140      	bne.n	80052d4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3304      	adds	r3, #4
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe fe6a 	bl	8003f30 <uxListRemove>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d115      	bne.n	800528e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005266:	491f      	ldr	r1, [pc, #124]	; (80052e4 <xTaskPriorityDisinherit+0x10c>)
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <xTaskPriorityDisinherit+0xb6>
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	2201      	movs	r2, #1
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	43da      	mvns	r2, r3
 8005284:	4b18      	ldr	r3, [pc, #96]	; (80052e8 <xTaskPriorityDisinherit+0x110>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4013      	ands	r3, r2
 800528a:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <xTaskPriorityDisinherit+0x110>)
 800528c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	f1c3 0207 	rsb	r2, r3, #7
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	2201      	movs	r2, #1
 80052a8:	409a      	lsls	r2, r3
 80052aa:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <xTaskPriorityDisinherit+0x110>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	4a0d      	ldr	r2, [pc, #52]	; (80052e8 <xTaskPriorityDisinherit+0x110>)
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4a08      	ldr	r2, [pc, #32]	; (80052e4 <xTaskPriorityDisinherit+0x10c>)
 80052c2:	441a      	add	r2, r3
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	3304      	adds	r3, #4
 80052c8:	4619      	mov	r1, r3
 80052ca:	4610      	mov	r0, r2
 80052cc:	f7fe fdd3 	bl	8003e76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052d0:	2301      	movs	r3, #1
 80052d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052d4:	697b      	ldr	r3, [r7, #20]
	}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	200003cc 	.word	0x200003cc
 80052e4:	200003d0 	.word	0x200003d0
 80052e8:	200004d4 	.word	0x200004d4

080052ec <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80052f6:	f000 fa71 	bl	80057dc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80052fa:	4b1e      	ldr	r3, [pc, #120]	; (8005374 <ulTaskNotifyTake+0x88>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d113      	bne.n	800532c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005304:	4b1b      	ldr	r3, [pc, #108]	; (8005374 <ulTaskNotifyTake+0x88>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00b      	beq.n	800532c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005314:	2101      	movs	r1, #1
 8005316:	6838      	ldr	r0, [r7, #0]
 8005318:	f000 f8ec 	bl	80054f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800531c:	4b16      	ldr	r3, [pc, #88]	; (8005378 <ulTaskNotifyTake+0x8c>)
 800531e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800532c:	f000 fa8a 	bl	8005844 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005330:	f000 fa54 	bl	80057dc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005334:	4b0f      	ldr	r3, [pc, #60]	; (8005374 <ulTaskNotifyTake+0x88>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00c      	beq.n	800535c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d004      	beq.n	8005352 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005348:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <ulTaskNotifyTake+0x88>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2200      	movs	r2, #0
 800534e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005350:	e004      	b.n	800535c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005352:	4b08      	ldr	r3, [pc, #32]	; (8005374 <ulTaskNotifyTake+0x88>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	3a01      	subs	r2, #1
 800535a:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <ulTaskNotifyTake+0x88>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8005366:	f000 fa6d 	bl	8005844 <vPortExitCritical>

		return ulReturn;
 800536a:	68fb      	ldr	r3, [r7, #12]
	}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	200003cc 	.word	0x200003cc
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	; 0x28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800538c:	2301      	movs	r3, #1
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10c      	bne.n	80053b0 <xTaskGenericNotify+0x34>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	b672      	cpsid	i
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	b662      	cpsie	i
 80053aa:	61bb      	str	r3, [r7, #24]
}
 80053ac:	bf00      	nop
 80053ae:	e7fe      	b.n	80053ae <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80053b4:	f000 fa12 	bl	80057dc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053cc:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	2202      	movs	r2, #2
 80053d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80053d6:	79fb      	ldrb	r3, [r7, #7]
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d828      	bhi.n	800542e <xTaskGenericNotify+0xb2>
 80053dc:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <xTaskGenericNotify+0x68>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	08005453 	.word	0x08005453
 80053e8:	080053f9 	.word	0x080053f9
 80053ec:	08005407 	.word	0x08005407
 80053f0:	08005413 	.word	0x08005413
 80053f4:	0800541b 	.word	0x0800541b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	431a      	orrs	r2, r3
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005404:	e028      	b.n	8005458 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005410:	e022      	b.n	8005458 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005418:	e01e      	b.n	8005458 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800541a:	7ffb      	ldrb	r3, [r7, #31]
 800541c:	2b02      	cmp	r3, #2
 800541e:	d003      	beq.n	8005428 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005426:	e017      	b.n	8005458 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 8005428:	2300      	movs	r3, #0
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800542c:	e014      	b.n	8005458 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005436:	d00e      	beq.n	8005456 <xTaskGenericNotify+0xda>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	b672      	cpsid	i
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	b662      	cpsie	i
 800544c:	617b      	str	r3, [r7, #20]
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <xTaskGenericNotify+0xd4>
					break;
 8005452:	bf00      	nop
 8005454:	e000      	b.n	8005458 <xTaskGenericNotify+0xdc>

					break;
 8005456:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005458:	7ffb      	ldrb	r3, [r7, #31]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d13b      	bne.n	80054d6 <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	3304      	adds	r3, #4
 8005462:	4618      	mov	r0, r3
 8005464:	f7fe fd64 	bl	8003f30 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	2201      	movs	r2, #1
 800546e:	409a      	lsls	r2, r3
 8005470:	4b1c      	ldr	r3, [pc, #112]	; (80054e4 <xTaskGenericNotify+0x168>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4313      	orrs	r3, r2
 8005476:	4a1b      	ldr	r2, [pc, #108]	; (80054e4 <xTaskGenericNotify+0x168>)
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4a18      	ldr	r2, [pc, #96]	; (80054e8 <xTaskGenericNotify+0x16c>)
 8005488:	441a      	add	r2, r3
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	3304      	adds	r3, #4
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f7fe fcf0 	bl	8003e76 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00c      	beq.n	80054b8 <xTaskGenericNotify+0x13c>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	b672      	cpsid	i
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	b662      	cpsie	i
 80054b2:	613b      	str	r3, [r7, #16]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054bc:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <xTaskGenericNotify+0x170>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d907      	bls.n	80054d6 <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <xTaskGenericNotify+0x174>)
 80054c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80054d6:	f000 f9b5 	bl	8005844 <vPortExitCritical>

		return xReturn;
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80054dc:	4618      	mov	r0, r3
 80054de:	3728      	adds	r7, #40	; 0x28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	200004d4 	.word	0x200004d4
 80054e8:	200003d0 	.word	0x200003d0
 80054ec:	200003cc 	.word	0x200003cc
 80054f0:	e000ed04 	.word	0xe000ed04

080054f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054fe:	4b29      	ldr	r3, [pc, #164]	; (80055a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005504:	4b28      	ldr	r3, [pc, #160]	; (80055a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3304      	adds	r3, #4
 800550a:	4618      	mov	r0, r3
 800550c:	f7fe fd10 	bl	8003f30 <uxListRemove>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10b      	bne.n	800552e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005516:	4b24      	ldr	r3, [pc, #144]	; (80055a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	2201      	movs	r2, #1
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	43da      	mvns	r2, r3
 8005524:	4b21      	ldr	r3, [pc, #132]	; (80055ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4013      	ands	r3, r2
 800552a:	4a20      	ldr	r2, [pc, #128]	; (80055ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800552c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005534:	d10a      	bne.n	800554c <prvAddCurrentTaskToDelayedList+0x58>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d007      	beq.n	800554c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800553c:	4b1a      	ldr	r3, [pc, #104]	; (80055a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3304      	adds	r3, #4
 8005542:	4619      	mov	r1, r3
 8005544:	481a      	ldr	r0, [pc, #104]	; (80055b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005546:	f7fe fc96 	bl	8003e76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800554a:	e026      	b.n	800559a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4413      	add	r3, r2
 8005552:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005554:	4b14      	ldr	r3, [pc, #80]	; (80055a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	429a      	cmp	r2, r3
 8005562:	d209      	bcs.n	8005578 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005564:	4b13      	ldr	r3, [pc, #76]	; (80055b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	4b0f      	ldr	r3, [pc, #60]	; (80055a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3304      	adds	r3, #4
 800556e:	4619      	mov	r1, r3
 8005570:	4610      	mov	r0, r2
 8005572:	f7fe fca4 	bl	8003ebe <vListInsert>
}
 8005576:	e010      	b.n	800559a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005578:	4b0f      	ldr	r3, [pc, #60]	; (80055b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3304      	adds	r3, #4
 8005582:	4619      	mov	r1, r3
 8005584:	4610      	mov	r0, r2
 8005586:	f7fe fc9a 	bl	8003ebe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800558a:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	429a      	cmp	r2, r3
 8005592:	d202      	bcs.n	800559a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005594:	4a09      	ldr	r2, [pc, #36]	; (80055bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6013      	str	r3, [r2, #0]
}
 800559a:	bf00      	nop
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	200004d0 	.word	0x200004d0
 80055a8:	200003cc 	.word	0x200003cc
 80055ac:	200004d4 	.word	0x200004d4
 80055b0:	200004b8 	.word	0x200004b8
 80055b4:	20000488 	.word	0x20000488
 80055b8:	20000484 	.word	0x20000484
 80055bc:	200004ec 	.word	0x200004ec

080055c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3b04      	subs	r3, #4
 80055d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3b04      	subs	r3, #4
 80055de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f023 0201 	bic.w	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3b04      	subs	r3, #4
 80055ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055f0:	4a0c      	ldr	r2, [pc, #48]	; (8005624 <pxPortInitialiseStack+0x64>)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3b14      	subs	r3, #20
 80055fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3b04      	subs	r3, #4
 8005606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f06f 0202 	mvn.w	r2, #2
 800560e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3b20      	subs	r3, #32
 8005614:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005616:	68fb      	ldr	r3, [r7, #12]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	08005629 	.word	0x08005629

08005628 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800562e:	2300      	movs	r3, #0
 8005630:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005632:	4b14      	ldr	r3, [pc, #80]	; (8005684 <prvTaskExitError+0x5c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800563a:	d00c      	beq.n	8005656 <prvTaskExitError+0x2e>
	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	b672      	cpsid	i
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	b662      	cpsie	i
 8005650:	60fb      	str	r3, [r7, #12]
}
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <prvTaskExitError+0x2c>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	b672      	cpsid	i
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	b662      	cpsie	i
 800566a:	60bb      	str	r3, [r7, #8]
}
 800566c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800566e:	bf00      	nop
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0fc      	beq.n	8005670 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005676:	bf00      	nop
 8005678:	bf00      	nop
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	2000000c 	.word	0x2000000c
	...

08005690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <pxCurrentTCBConst2>)
 8005692:	6819      	ldr	r1, [r3, #0]
 8005694:	6808      	ldr	r0, [r1, #0]
 8005696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569a:	f380 8809 	msr	PSP, r0
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f380 8811 	msr	BASEPRI, r0
 80056aa:	4770      	bx	lr
 80056ac:	f3af 8000 	nop.w

080056b0 <pxCurrentTCBConst2>:
 80056b0:	200003cc 	.word	0x200003cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop

080056b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056b8:	4808      	ldr	r0, [pc, #32]	; (80056dc <prvPortStartFirstTask+0x24>)
 80056ba:	6800      	ldr	r0, [r0, #0]
 80056bc:	6800      	ldr	r0, [r0, #0]
 80056be:	f380 8808 	msr	MSP, r0
 80056c2:	f04f 0000 	mov.w	r0, #0
 80056c6:	f380 8814 	msr	CONTROL, r0
 80056ca:	b662      	cpsie	i
 80056cc:	b661      	cpsie	f
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	df00      	svc	0
 80056d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056da:	bf00      	nop
 80056dc:	e000ed08 	.word	0xe000ed08

080056e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056e6:	4b37      	ldr	r3, [pc, #220]	; (80057c4 <xPortStartScheduler+0xe4>)
 80056e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	22ff      	movs	r2, #255	; 0xff
 80056f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005708:	b2da      	uxtb	r2, r3
 800570a:	4b2f      	ldr	r3, [pc, #188]	; (80057c8 <xPortStartScheduler+0xe8>)
 800570c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800570e:	4b2f      	ldr	r3, [pc, #188]	; (80057cc <xPortStartScheduler+0xec>)
 8005710:	2207      	movs	r2, #7
 8005712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005714:	e009      	b.n	800572a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005716:	4b2d      	ldr	r3, [pc, #180]	; (80057cc <xPortStartScheduler+0xec>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3b01      	subs	r3, #1
 800571c:	4a2b      	ldr	r2, [pc, #172]	; (80057cc <xPortStartScheduler+0xec>)
 800571e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	b2db      	uxtb	r3, r3
 8005728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	2b80      	cmp	r3, #128	; 0x80
 8005734:	d0ef      	beq.n	8005716 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005736:	4b25      	ldr	r3, [pc, #148]	; (80057cc <xPortStartScheduler+0xec>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f1c3 0307 	rsb	r3, r3, #7
 800573e:	2b04      	cmp	r3, #4
 8005740:	d00c      	beq.n	800575c <xPortStartScheduler+0x7c>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	b672      	cpsid	i
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	b662      	cpsie	i
 8005756:	60bb      	str	r3, [r7, #8]
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800575c:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <xPortStartScheduler+0xec>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	4a1a      	ldr	r2, [pc, #104]	; (80057cc <xPortStartScheduler+0xec>)
 8005764:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005766:	4b19      	ldr	r3, [pc, #100]	; (80057cc <xPortStartScheduler+0xec>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800576e:	4a17      	ldr	r2, [pc, #92]	; (80057cc <xPortStartScheduler+0xec>)
 8005770:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	b2da      	uxtb	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800577a:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <xPortStartScheduler+0xf0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a14      	ldr	r2, [pc, #80]	; (80057d0 <xPortStartScheduler+0xf0>)
 8005780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005784:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005786:	4b12      	ldr	r3, [pc, #72]	; (80057d0 <xPortStartScheduler+0xf0>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a11      	ldr	r2, [pc, #68]	; (80057d0 <xPortStartScheduler+0xf0>)
 800578c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005790:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005792:	f000 f8dd 	bl	8005950 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005796:	4b0f      	ldr	r3, [pc, #60]	; (80057d4 <xPortStartScheduler+0xf4>)
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800579c:	f000 f8fc 	bl	8005998 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057a0:	4b0d      	ldr	r3, [pc, #52]	; (80057d8 <xPortStartScheduler+0xf8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a0c      	ldr	r2, [pc, #48]	; (80057d8 <xPortStartScheduler+0xf8>)
 80057a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80057aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057ac:	f7ff ff84 	bl	80056b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057b0:	f7ff faac 	bl	8004d0c <vTaskSwitchContext>
	prvTaskExitError();
 80057b4:	f7ff ff38 	bl	8005628 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	e000e400 	.word	0xe000e400
 80057c8:	200004f8 	.word	0x200004f8
 80057cc:	200004fc 	.word	0x200004fc
 80057d0:	e000ed20 	.word	0xe000ed20
 80057d4:	2000000c 	.word	0x2000000c
 80057d8:	e000ef34 	.word	0xe000ef34

080057dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	b672      	cpsid	i
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	b662      	cpsie	i
 80057f6:	607b      	str	r3, [r7, #4]
}
 80057f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057fa:	4b10      	ldr	r3, [pc, #64]	; (800583c <vPortEnterCritical+0x60>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3301      	adds	r3, #1
 8005800:	4a0e      	ldr	r2, [pc, #56]	; (800583c <vPortEnterCritical+0x60>)
 8005802:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005804:	4b0d      	ldr	r3, [pc, #52]	; (800583c <vPortEnterCritical+0x60>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d111      	bne.n	8005830 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <vPortEnterCritical+0x64>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00c      	beq.n	8005830 <vPortEnterCritical+0x54>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	b672      	cpsid	i
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	b662      	cpsie	i
 800582a:	603b      	str	r3, [r7, #0]
}
 800582c:	bf00      	nop
 800582e:	e7fe      	b.n	800582e <vPortEnterCritical+0x52>
	}
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	2000000c 	.word	0x2000000c
 8005840:	e000ed04 	.word	0xe000ed04

08005844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800584a:	4b13      	ldr	r3, [pc, #76]	; (8005898 <vPortExitCritical+0x54>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10c      	bne.n	800586c <vPortExitCritical+0x28>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	b672      	cpsid	i
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	b662      	cpsie	i
 8005866:	607b      	str	r3, [r7, #4]
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800586c:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <vPortExitCritical+0x54>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3b01      	subs	r3, #1
 8005872:	4a09      	ldr	r2, [pc, #36]	; (8005898 <vPortExitCritical+0x54>)
 8005874:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005876:	4b08      	ldr	r3, [pc, #32]	; (8005898 <vPortExitCritical+0x54>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d105      	bne.n	800588a <vPortExitCritical+0x46>
 800587e:	2300      	movs	r3, #0
 8005880:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005888:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	2000000c 	.word	0x2000000c
 800589c:	00000000 	.word	0x00000000

080058a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058a0:	f3ef 8009 	mrs	r0, PSP
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	4b15      	ldr	r3, [pc, #84]	; (8005900 <pxCurrentTCBConst>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	f01e 0f10 	tst.w	lr, #16
 80058b0:	bf08      	it	eq
 80058b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ba:	6010      	str	r0, [r2, #0]
 80058bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80058c4:	b672      	cpsid	i
 80058c6:	f380 8811 	msr	BASEPRI, r0
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	b662      	cpsie	i
 80058d4:	f7ff fa1a 	bl	8004d0c <vTaskSwitchContext>
 80058d8:	f04f 0000 	mov.w	r0, #0
 80058dc:	f380 8811 	msr	BASEPRI, r0
 80058e0:	bc09      	pop	{r0, r3}
 80058e2:	6819      	ldr	r1, [r3, #0]
 80058e4:	6808      	ldr	r0, [r1, #0]
 80058e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ea:	f01e 0f10 	tst.w	lr, #16
 80058ee:	bf08      	it	eq
 80058f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058f4:	f380 8809 	msr	PSP, r0
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop

08005900 <pxCurrentTCBConst>:
 8005900:	200003cc 	.word	0x200003cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop

08005908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	b672      	cpsid	i
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	b662      	cpsie	i
 8005922:	607b      	str	r3, [r7, #4]
}
 8005924:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005926:	f7ff f937 	bl	8004b98 <xTaskIncrementTick>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005930:	4b06      	ldr	r3, [pc, #24]	; (800594c <SysTick_Handler+0x44>)
 8005932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	2300      	movs	r3, #0
 800593a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	f383 8811 	msr	BASEPRI, r3
}
 8005942:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005944:	bf00      	nop
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	e000ed04 	.word	0xe000ed04

08005950 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005954:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <vPortSetupTimerInterrupt+0x34>)
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800595a:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <vPortSetupTimerInterrupt+0x38>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005960:	4b0a      	ldr	r3, [pc, #40]	; (800598c <vPortSetupTimerInterrupt+0x3c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a0a      	ldr	r2, [pc, #40]	; (8005990 <vPortSetupTimerInterrupt+0x40>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	099b      	lsrs	r3, r3, #6
 800596c:	4a09      	ldr	r2, [pc, #36]	; (8005994 <vPortSetupTimerInterrupt+0x44>)
 800596e:	3b01      	subs	r3, #1
 8005970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005972:	4b04      	ldr	r3, [pc, #16]	; (8005984 <vPortSetupTimerInterrupt+0x34>)
 8005974:	2207      	movs	r2, #7
 8005976:	601a      	str	r2, [r3, #0]
}
 8005978:	bf00      	nop
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	e000e010 	.word	0xe000e010
 8005988:	e000e018 	.word	0xe000e018
 800598c:	20000000 	.word	0x20000000
 8005990:	10624dd3 	.word	0x10624dd3
 8005994:	e000e014 	.word	0xe000e014

08005998 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005998:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80059a8 <vPortEnableVFP+0x10>
 800599c:	6801      	ldr	r1, [r0, #0]
 800599e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80059a2:	6001      	str	r1, [r0, #0]
 80059a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059a6:	bf00      	nop
 80059a8:	e000ed88 	.word	0xe000ed88

080059ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08a      	sub	sp, #40	; 0x28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059b8:	f7ff f842 	bl	8004a40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059bc:	4b5b      	ldr	r3, [pc, #364]	; (8005b2c <pvPortMalloc+0x180>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80059c4:	f000 f91a 	bl	8005bfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059c8:	4b59      	ldr	r3, [pc, #356]	; (8005b30 <pvPortMalloc+0x184>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f040 8092 	bne.w	8005afa <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01f      	beq.n	8005a1c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80059dc:	2208      	movs	r2, #8
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4413      	add	r3, r2
 80059e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d016      	beq.n	8005a1c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f023 0307 	bic.w	r3, r3, #7
 80059f4:	3308      	adds	r3, #8
 80059f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00c      	beq.n	8005a1c <pvPortMalloc+0x70>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	b672      	cpsid	i
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	b662      	cpsie	i
 8005a16:	617b      	str	r3, [r7, #20]
}
 8005a18:	bf00      	nop
 8005a1a:	e7fe      	b.n	8005a1a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d06b      	beq.n	8005afa <pvPortMalloc+0x14e>
 8005a22:	4b44      	ldr	r3, [pc, #272]	; (8005b34 <pvPortMalloc+0x188>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d866      	bhi.n	8005afa <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a2c:	4b42      	ldr	r3, [pc, #264]	; (8005b38 <pvPortMalloc+0x18c>)
 8005a2e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a30:	4b41      	ldr	r3, [pc, #260]	; (8005b38 <pvPortMalloc+0x18c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a36:	e004      	b.n	8005a42 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d903      	bls.n	8005a54 <pvPortMalloc+0xa8>
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1f1      	bne.n	8005a38 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a54:	4b35      	ldr	r3, [pc, #212]	; (8005b2c <pvPortMalloc+0x180>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d04d      	beq.n	8005afa <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2208      	movs	r2, #8
 8005a64:	4413      	add	r3, r2
 8005a66:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	1ad2      	subs	r2, r2, r3
 8005a78:	2308      	movs	r3, #8
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d921      	bls.n	8005ac4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4413      	add	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00c      	beq.n	8005aac <pvPortMalloc+0x100>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	b672      	cpsid	i
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	b662      	cpsie	i
 8005aa6:	613b      	str	r3, [r7, #16]
}
 8005aa8:	bf00      	nop
 8005aaa:	e7fe      	b.n	8005aaa <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	1ad2      	subs	r2, r2, r3
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005abe:	69b8      	ldr	r0, [r7, #24]
 8005ac0:	f000 f8fe 	bl	8005cc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ac4:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <pvPortMalloc+0x188>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	4a19      	ldr	r2, [pc, #100]	; (8005b34 <pvPortMalloc+0x188>)
 8005ad0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ad2:	4b18      	ldr	r3, [pc, #96]	; (8005b34 <pvPortMalloc+0x188>)
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4b19      	ldr	r3, [pc, #100]	; (8005b3c <pvPortMalloc+0x190>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d203      	bcs.n	8005ae6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ade:	4b15      	ldr	r3, [pc, #84]	; (8005b34 <pvPortMalloc+0x188>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a16      	ldr	r2, [pc, #88]	; (8005b3c <pvPortMalloc+0x190>)
 8005ae4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	4b11      	ldr	r3, [pc, #68]	; (8005b30 <pvPortMalloc+0x184>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	431a      	orrs	r2, r3
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005afa:	f7fe ffaf 	bl	8004a5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00c      	beq.n	8005b22 <pvPortMalloc+0x176>
	__asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	b672      	cpsid	i
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	b662      	cpsie	i
 8005b1c:	60fb      	str	r3, [r7, #12]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <pvPortMalloc+0x174>
	return pvReturn;
 8005b22:	69fb      	ldr	r3, [r7, #28]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3728      	adds	r7, #40	; 0x28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20004108 	.word	0x20004108
 8005b30:	20004114 	.word	0x20004114
 8005b34:	2000410c 	.word	0x2000410c
 8005b38:	20004100 	.word	0x20004100
 8005b3c:	20004110 	.word	0x20004110

08005b40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d04c      	beq.n	8005bec <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b52:	2308      	movs	r3, #8
 8005b54:	425b      	negs	r3, r3
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4413      	add	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	4b23      	ldr	r3, [pc, #140]	; (8005bf4 <vPortFree+0xb4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10c      	bne.n	8005b88 <vPortFree+0x48>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	b672      	cpsid	i
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	b662      	cpsie	i
 8005b82:	60fb      	str	r3, [r7, #12]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00c      	beq.n	8005baa <vPortFree+0x6a>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	b672      	cpsid	i
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	b662      	cpsie	i
 8005ba4:	60bb      	str	r3, [r7, #8]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <vPortFree+0xb4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d019      	beq.n	8005bec <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d115      	bne.n	8005bec <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <vPortFree+0xb4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	401a      	ands	r2, r3
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005bd0:	f7fe ff36 	bl	8004a40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	4b07      	ldr	r3, [pc, #28]	; (8005bf8 <vPortFree+0xb8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4413      	add	r3, r2
 8005bde:	4a06      	ldr	r2, [pc, #24]	; (8005bf8 <vPortFree+0xb8>)
 8005be0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005be2:	6938      	ldr	r0, [r7, #16]
 8005be4:	f000 f86c 	bl	8005cc0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005be8:	f7fe ff38 	bl	8004a5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005bec:	bf00      	nop
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20004114 	.word	0x20004114
 8005bf8:	2000410c 	.word	0x2000410c

08005bfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c02:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c08:	4b27      	ldr	r3, [pc, #156]	; (8005ca8 <prvHeapInit+0xac>)
 8005c0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00c      	beq.n	8005c30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3307      	adds	r3, #7
 8005c1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0307 	bic.w	r3, r3, #7
 8005c22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	4a1f      	ldr	r2, [pc, #124]	; (8005ca8 <prvHeapInit+0xac>)
 8005c2c:	4413      	add	r3, r2
 8005c2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c34:	4a1d      	ldr	r2, [pc, #116]	; (8005cac <prvHeapInit+0xb0>)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c3a:	4b1c      	ldr	r3, [pc, #112]	; (8005cac <prvHeapInit+0xb0>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	4413      	add	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c48:	2208      	movs	r2, #8
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	1a9b      	subs	r3, r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0307 	bic.w	r3, r3, #7
 8005c56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4a15      	ldr	r2, [pc, #84]	; (8005cb0 <prvHeapInit+0xb4>)
 8005c5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c5e:	4b14      	ldr	r3, [pc, #80]	; (8005cb0 <prvHeapInit+0xb4>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2200      	movs	r2, #0
 8005c64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c66:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <prvHeapInit+0xb4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	1ad2      	subs	r2, r2, r3
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c7c:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <prvHeapInit+0xb4>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4a0a      	ldr	r2, [pc, #40]	; (8005cb4 <prvHeapInit+0xb8>)
 8005c8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	4a09      	ldr	r2, [pc, #36]	; (8005cb8 <prvHeapInit+0xbc>)
 8005c92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c94:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <prvHeapInit+0xc0>)
 8005c96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c9a:	601a      	str	r2, [r3, #0]
}
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	20000500 	.word	0x20000500
 8005cac:	20004100 	.word	0x20004100
 8005cb0:	20004108 	.word	0x20004108
 8005cb4:	20004110 	.word	0x20004110
 8005cb8:	2000410c 	.word	0x2000410c
 8005cbc:	20004114 	.word	0x20004114

08005cc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005cc8:	4b28      	ldr	r3, [pc, #160]	; (8005d6c <prvInsertBlockIntoFreeList+0xac>)
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	e002      	b.n	8005cd4 <prvInsertBlockIntoFreeList+0x14>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d8f7      	bhi.n	8005cce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	4413      	add	r3, r2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d108      	bne.n	8005d02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	441a      	add	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	441a      	add	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d118      	bne.n	8005d48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <prvInsertBlockIntoFreeList+0xb0>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d00d      	beq.n	8005d3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	441a      	add	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	e008      	b.n	8005d50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <prvInsertBlockIntoFreeList+0xb0>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	e003      	b.n	8005d50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d002      	beq.n	8005d5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20004100 	.word	0x20004100
 8005d70:	20004108 	.word	0x20004108

08005d74 <std>:
 8005d74:	2300      	movs	r3, #0
 8005d76:	b510      	push	{r4, lr}
 8005d78:	4604      	mov	r4, r0
 8005d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d82:	6083      	str	r3, [r0, #8]
 8005d84:	8181      	strh	r1, [r0, #12]
 8005d86:	6643      	str	r3, [r0, #100]	; 0x64
 8005d88:	81c2      	strh	r2, [r0, #14]
 8005d8a:	6183      	str	r3, [r0, #24]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	2208      	movs	r2, #8
 8005d90:	305c      	adds	r0, #92	; 0x5c
 8005d92:	f000 f9e5 	bl	8006160 <memset>
 8005d96:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <std+0x58>)
 8005d98:	6263      	str	r3, [r4, #36]	; 0x24
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	; (8005dd0 <std+0x5c>)
 8005d9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d9e:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <std+0x60>)
 8005da0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005da2:	4b0d      	ldr	r3, [pc, #52]	; (8005dd8 <std+0x64>)
 8005da4:	6323      	str	r3, [r4, #48]	; 0x30
 8005da6:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <std+0x68>)
 8005da8:	6224      	str	r4, [r4, #32]
 8005daa:	429c      	cmp	r4, r3
 8005dac:	d006      	beq.n	8005dbc <std+0x48>
 8005dae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005db2:	4294      	cmp	r4, r2
 8005db4:	d002      	beq.n	8005dbc <std+0x48>
 8005db6:	33d0      	adds	r3, #208	; 0xd0
 8005db8:	429c      	cmp	r4, r3
 8005dba:	d105      	bne.n	8005dc8 <std+0x54>
 8005dbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc4:	f000 ba44 	b.w	8006250 <__retarget_lock_init_recursive>
 8005dc8:	bd10      	pop	{r4, pc}
 8005dca:	bf00      	nop
 8005dcc:	08005fb1 	.word	0x08005fb1
 8005dd0:	08005fd3 	.word	0x08005fd3
 8005dd4:	0800600b 	.word	0x0800600b
 8005dd8:	0800602f 	.word	0x0800602f
 8005ddc:	20004118 	.word	0x20004118

08005de0 <stdio_exit_handler>:
 8005de0:	4a02      	ldr	r2, [pc, #8]	; (8005dec <stdio_exit_handler+0xc>)
 8005de2:	4903      	ldr	r1, [pc, #12]	; (8005df0 <stdio_exit_handler+0x10>)
 8005de4:	4803      	ldr	r0, [pc, #12]	; (8005df4 <stdio_exit_handler+0x14>)
 8005de6:	f000 b869 	b.w	8005ebc <_fwalk_sglue>
 8005dea:	bf00      	nop
 8005dec:	20000010 	.word	0x20000010
 8005df0:	08006571 	.word	0x08006571
 8005df4:	2000001c 	.word	0x2000001c

08005df8 <cleanup_stdio>:
 8005df8:	6841      	ldr	r1, [r0, #4]
 8005dfa:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <cleanup_stdio+0x34>)
 8005dfc:	4299      	cmp	r1, r3
 8005dfe:	b510      	push	{r4, lr}
 8005e00:	4604      	mov	r4, r0
 8005e02:	d001      	beq.n	8005e08 <cleanup_stdio+0x10>
 8005e04:	f000 fbb4 	bl	8006570 <_fflush_r>
 8005e08:	68a1      	ldr	r1, [r4, #8]
 8005e0a:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <cleanup_stdio+0x38>)
 8005e0c:	4299      	cmp	r1, r3
 8005e0e:	d002      	beq.n	8005e16 <cleanup_stdio+0x1e>
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 fbad 	bl	8006570 <_fflush_r>
 8005e16:	68e1      	ldr	r1, [r4, #12]
 8005e18:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <cleanup_stdio+0x3c>)
 8005e1a:	4299      	cmp	r1, r3
 8005e1c:	d004      	beq.n	8005e28 <cleanup_stdio+0x30>
 8005e1e:	4620      	mov	r0, r4
 8005e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e24:	f000 bba4 	b.w	8006570 <_fflush_r>
 8005e28:	bd10      	pop	{r4, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20004118 	.word	0x20004118
 8005e30:	20004180 	.word	0x20004180
 8005e34:	200041e8 	.word	0x200041e8

08005e38 <global_stdio_init.part.0>:
 8005e38:	b510      	push	{r4, lr}
 8005e3a:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <global_stdio_init.part.0+0x30>)
 8005e3c:	4c0b      	ldr	r4, [pc, #44]	; (8005e6c <global_stdio_init.part.0+0x34>)
 8005e3e:	4a0c      	ldr	r2, [pc, #48]	; (8005e70 <global_stdio_init.part.0+0x38>)
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	4620      	mov	r0, r4
 8005e44:	2200      	movs	r2, #0
 8005e46:	2104      	movs	r1, #4
 8005e48:	f7ff ff94 	bl	8005d74 <std>
 8005e4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e50:	2201      	movs	r2, #1
 8005e52:	2109      	movs	r1, #9
 8005e54:	f7ff ff8e 	bl	8005d74 <std>
 8005e58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e62:	2112      	movs	r1, #18
 8005e64:	f7ff bf86 	b.w	8005d74 <std>
 8005e68:	20004250 	.word	0x20004250
 8005e6c:	20004118 	.word	0x20004118
 8005e70:	08005de1 	.word	0x08005de1

08005e74 <__sfp_lock_acquire>:
 8005e74:	4801      	ldr	r0, [pc, #4]	; (8005e7c <__sfp_lock_acquire+0x8>)
 8005e76:	f000 b9ec 	b.w	8006252 <__retarget_lock_acquire_recursive>
 8005e7a:	bf00      	nop
 8005e7c:	20004259 	.word	0x20004259

08005e80 <__sfp_lock_release>:
 8005e80:	4801      	ldr	r0, [pc, #4]	; (8005e88 <__sfp_lock_release+0x8>)
 8005e82:	f000 b9e7 	b.w	8006254 <__retarget_lock_release_recursive>
 8005e86:	bf00      	nop
 8005e88:	20004259 	.word	0x20004259

08005e8c <__sinit>:
 8005e8c:	b510      	push	{r4, lr}
 8005e8e:	4604      	mov	r4, r0
 8005e90:	f7ff fff0 	bl	8005e74 <__sfp_lock_acquire>
 8005e94:	6a23      	ldr	r3, [r4, #32]
 8005e96:	b11b      	cbz	r3, 8005ea0 <__sinit+0x14>
 8005e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e9c:	f7ff bff0 	b.w	8005e80 <__sfp_lock_release>
 8005ea0:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <__sinit+0x28>)
 8005ea2:	6223      	str	r3, [r4, #32]
 8005ea4:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <__sinit+0x2c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1f5      	bne.n	8005e98 <__sinit+0xc>
 8005eac:	f7ff ffc4 	bl	8005e38 <global_stdio_init.part.0>
 8005eb0:	e7f2      	b.n	8005e98 <__sinit+0xc>
 8005eb2:	bf00      	nop
 8005eb4:	08005df9 	.word	0x08005df9
 8005eb8:	20004250 	.word	0x20004250

08005ebc <_fwalk_sglue>:
 8005ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec0:	4607      	mov	r7, r0
 8005ec2:	4688      	mov	r8, r1
 8005ec4:	4614      	mov	r4, r2
 8005ec6:	2600      	movs	r6, #0
 8005ec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8005ed0:	d505      	bpl.n	8005ede <_fwalk_sglue+0x22>
 8005ed2:	6824      	ldr	r4, [r4, #0]
 8005ed4:	2c00      	cmp	r4, #0
 8005ed6:	d1f7      	bne.n	8005ec8 <_fwalk_sglue+0xc>
 8005ed8:	4630      	mov	r0, r6
 8005eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ede:	89ab      	ldrh	r3, [r5, #12]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d907      	bls.n	8005ef4 <_fwalk_sglue+0x38>
 8005ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	d003      	beq.n	8005ef4 <_fwalk_sglue+0x38>
 8005eec:	4629      	mov	r1, r5
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c0      	blx	r8
 8005ef2:	4306      	orrs	r6, r0
 8005ef4:	3568      	adds	r5, #104	; 0x68
 8005ef6:	e7e9      	b.n	8005ecc <_fwalk_sglue+0x10>

08005ef8 <_puts_r>:
 8005ef8:	6a03      	ldr	r3, [r0, #32]
 8005efa:	b570      	push	{r4, r5, r6, lr}
 8005efc:	6884      	ldr	r4, [r0, #8]
 8005efe:	4605      	mov	r5, r0
 8005f00:	460e      	mov	r6, r1
 8005f02:	b90b      	cbnz	r3, 8005f08 <_puts_r+0x10>
 8005f04:	f7ff ffc2 	bl	8005e8c <__sinit>
 8005f08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f0a:	07db      	lsls	r3, r3, #31
 8005f0c:	d405      	bmi.n	8005f1a <_puts_r+0x22>
 8005f0e:	89a3      	ldrh	r3, [r4, #12]
 8005f10:	0598      	lsls	r0, r3, #22
 8005f12:	d402      	bmi.n	8005f1a <_puts_r+0x22>
 8005f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f16:	f000 f99c 	bl	8006252 <__retarget_lock_acquire_recursive>
 8005f1a:	89a3      	ldrh	r3, [r4, #12]
 8005f1c:	0719      	lsls	r1, r3, #28
 8005f1e:	d513      	bpl.n	8005f48 <_puts_r+0x50>
 8005f20:	6923      	ldr	r3, [r4, #16]
 8005f22:	b18b      	cbz	r3, 8005f48 <_puts_r+0x50>
 8005f24:	3e01      	subs	r6, #1
 8005f26:	68a3      	ldr	r3, [r4, #8]
 8005f28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	60a3      	str	r3, [r4, #8]
 8005f30:	b9e9      	cbnz	r1, 8005f6e <_puts_r+0x76>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	da2e      	bge.n	8005f94 <_puts_r+0x9c>
 8005f36:	4622      	mov	r2, r4
 8005f38:	210a      	movs	r1, #10
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f000 f87b 	bl	8006036 <__swbuf_r>
 8005f40:	3001      	adds	r0, #1
 8005f42:	d007      	beq.n	8005f54 <_puts_r+0x5c>
 8005f44:	250a      	movs	r5, #10
 8005f46:	e007      	b.n	8005f58 <_puts_r+0x60>
 8005f48:	4621      	mov	r1, r4
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f000 f8b0 	bl	80060b0 <__swsetup_r>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d0e7      	beq.n	8005f24 <_puts_r+0x2c>
 8005f54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005f58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f5a:	07da      	lsls	r2, r3, #31
 8005f5c:	d405      	bmi.n	8005f6a <_puts_r+0x72>
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	059b      	lsls	r3, r3, #22
 8005f62:	d402      	bmi.n	8005f6a <_puts_r+0x72>
 8005f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f66:	f000 f975 	bl	8006254 <__retarget_lock_release_recursive>
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	bd70      	pop	{r4, r5, r6, pc}
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da04      	bge.n	8005f7c <_puts_r+0x84>
 8005f72:	69a2      	ldr	r2, [r4, #24]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	dc06      	bgt.n	8005f86 <_puts_r+0x8e>
 8005f78:	290a      	cmp	r1, #10
 8005f7a:	d004      	beq.n	8005f86 <_puts_r+0x8e>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	6022      	str	r2, [r4, #0]
 8005f82:	7019      	strb	r1, [r3, #0]
 8005f84:	e7cf      	b.n	8005f26 <_puts_r+0x2e>
 8005f86:	4622      	mov	r2, r4
 8005f88:	4628      	mov	r0, r5
 8005f8a:	f000 f854 	bl	8006036 <__swbuf_r>
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d1c9      	bne.n	8005f26 <_puts_r+0x2e>
 8005f92:	e7df      	b.n	8005f54 <_puts_r+0x5c>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	250a      	movs	r5, #10
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	6022      	str	r2, [r4, #0]
 8005f9c:	701d      	strb	r5, [r3, #0]
 8005f9e:	e7db      	b.n	8005f58 <_puts_r+0x60>

08005fa0 <puts>:
 8005fa0:	4b02      	ldr	r3, [pc, #8]	; (8005fac <puts+0xc>)
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	6818      	ldr	r0, [r3, #0]
 8005fa6:	f7ff bfa7 	b.w	8005ef8 <_puts_r>
 8005faa:	bf00      	nop
 8005fac:	20000068 	.word	0x20000068

08005fb0 <__sread>:
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb8:	f000 f8fc 	bl	80061b4 <_read_r>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	bfab      	itete	ge
 8005fc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8005fc4:	181b      	addge	r3, r3, r0
 8005fc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fca:	bfac      	ite	ge
 8005fcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fce:	81a3      	strhlt	r3, [r4, #12]
 8005fd0:	bd10      	pop	{r4, pc}

08005fd2 <__swrite>:
 8005fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd6:	461f      	mov	r7, r3
 8005fd8:	898b      	ldrh	r3, [r1, #12]
 8005fda:	05db      	lsls	r3, r3, #23
 8005fdc:	4605      	mov	r5, r0
 8005fde:	460c      	mov	r4, r1
 8005fe0:	4616      	mov	r6, r2
 8005fe2:	d505      	bpl.n	8005ff0 <__swrite+0x1e>
 8005fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe8:	2302      	movs	r3, #2
 8005fea:	2200      	movs	r2, #0
 8005fec:	f000 f8d0 	bl	8006190 <_lseek_r>
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ffa:	81a3      	strh	r3, [r4, #12]
 8005ffc:	4632      	mov	r2, r6
 8005ffe:	463b      	mov	r3, r7
 8006000:	4628      	mov	r0, r5
 8006002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006006:	f000 b8e7 	b.w	80061d8 <_write_r>

0800600a <__sseek>:
 800600a:	b510      	push	{r4, lr}
 800600c:	460c      	mov	r4, r1
 800600e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006012:	f000 f8bd 	bl	8006190 <_lseek_r>
 8006016:	1c43      	adds	r3, r0, #1
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	bf15      	itete	ne
 800601c:	6560      	strne	r0, [r4, #84]	; 0x54
 800601e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006026:	81a3      	strheq	r3, [r4, #12]
 8006028:	bf18      	it	ne
 800602a:	81a3      	strhne	r3, [r4, #12]
 800602c:	bd10      	pop	{r4, pc}

0800602e <__sclose>:
 800602e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006032:	f000 b89d 	b.w	8006170 <_close_r>

08006036 <__swbuf_r>:
 8006036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006038:	460e      	mov	r6, r1
 800603a:	4614      	mov	r4, r2
 800603c:	4605      	mov	r5, r0
 800603e:	b118      	cbz	r0, 8006048 <__swbuf_r+0x12>
 8006040:	6a03      	ldr	r3, [r0, #32]
 8006042:	b90b      	cbnz	r3, 8006048 <__swbuf_r+0x12>
 8006044:	f7ff ff22 	bl	8005e8c <__sinit>
 8006048:	69a3      	ldr	r3, [r4, #24]
 800604a:	60a3      	str	r3, [r4, #8]
 800604c:	89a3      	ldrh	r3, [r4, #12]
 800604e:	071a      	lsls	r2, r3, #28
 8006050:	d525      	bpl.n	800609e <__swbuf_r+0x68>
 8006052:	6923      	ldr	r3, [r4, #16]
 8006054:	b31b      	cbz	r3, 800609e <__swbuf_r+0x68>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	6922      	ldr	r2, [r4, #16]
 800605a:	1a98      	subs	r0, r3, r2
 800605c:	6963      	ldr	r3, [r4, #20]
 800605e:	b2f6      	uxtb	r6, r6
 8006060:	4283      	cmp	r3, r0
 8006062:	4637      	mov	r7, r6
 8006064:	dc04      	bgt.n	8006070 <__swbuf_r+0x3a>
 8006066:	4621      	mov	r1, r4
 8006068:	4628      	mov	r0, r5
 800606a:	f000 fa81 	bl	8006570 <_fflush_r>
 800606e:	b9e0      	cbnz	r0, 80060aa <__swbuf_r+0x74>
 8006070:	68a3      	ldr	r3, [r4, #8]
 8006072:	3b01      	subs	r3, #1
 8006074:	60a3      	str	r3, [r4, #8]
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	6022      	str	r2, [r4, #0]
 800607c:	701e      	strb	r6, [r3, #0]
 800607e:	6962      	ldr	r2, [r4, #20]
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	429a      	cmp	r2, r3
 8006084:	d004      	beq.n	8006090 <__swbuf_r+0x5a>
 8006086:	89a3      	ldrh	r3, [r4, #12]
 8006088:	07db      	lsls	r3, r3, #31
 800608a:	d506      	bpl.n	800609a <__swbuf_r+0x64>
 800608c:	2e0a      	cmp	r6, #10
 800608e:	d104      	bne.n	800609a <__swbuf_r+0x64>
 8006090:	4621      	mov	r1, r4
 8006092:	4628      	mov	r0, r5
 8006094:	f000 fa6c 	bl	8006570 <_fflush_r>
 8006098:	b938      	cbnz	r0, 80060aa <__swbuf_r+0x74>
 800609a:	4638      	mov	r0, r7
 800609c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800609e:	4621      	mov	r1, r4
 80060a0:	4628      	mov	r0, r5
 80060a2:	f000 f805 	bl	80060b0 <__swsetup_r>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d0d5      	beq.n	8006056 <__swbuf_r+0x20>
 80060aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80060ae:	e7f4      	b.n	800609a <__swbuf_r+0x64>

080060b0 <__swsetup_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4b2a      	ldr	r3, [pc, #168]	; (800615c <__swsetup_r+0xac>)
 80060b4:	4605      	mov	r5, r0
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	460c      	mov	r4, r1
 80060ba:	b118      	cbz	r0, 80060c4 <__swsetup_r+0x14>
 80060bc:	6a03      	ldr	r3, [r0, #32]
 80060be:	b90b      	cbnz	r3, 80060c4 <__swsetup_r+0x14>
 80060c0:	f7ff fee4 	bl	8005e8c <__sinit>
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060ca:	0718      	lsls	r0, r3, #28
 80060cc:	d422      	bmi.n	8006114 <__swsetup_r+0x64>
 80060ce:	06d9      	lsls	r1, r3, #27
 80060d0:	d407      	bmi.n	80060e2 <__swsetup_r+0x32>
 80060d2:	2309      	movs	r3, #9
 80060d4:	602b      	str	r3, [r5, #0]
 80060d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060da:	81a3      	strh	r3, [r4, #12]
 80060dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060e0:	e034      	b.n	800614c <__swsetup_r+0x9c>
 80060e2:	0758      	lsls	r0, r3, #29
 80060e4:	d512      	bpl.n	800610c <__swsetup_r+0x5c>
 80060e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060e8:	b141      	cbz	r1, 80060fc <__swsetup_r+0x4c>
 80060ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060ee:	4299      	cmp	r1, r3
 80060f0:	d002      	beq.n	80060f8 <__swsetup_r+0x48>
 80060f2:	4628      	mov	r0, r5
 80060f4:	f000 f8be 	bl	8006274 <_free_r>
 80060f8:	2300      	movs	r3, #0
 80060fa:	6363      	str	r3, [r4, #52]	; 0x34
 80060fc:	89a3      	ldrh	r3, [r4, #12]
 80060fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006102:	81a3      	strh	r3, [r4, #12]
 8006104:	2300      	movs	r3, #0
 8006106:	6063      	str	r3, [r4, #4]
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	6023      	str	r3, [r4, #0]
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	f043 0308 	orr.w	r3, r3, #8
 8006112:	81a3      	strh	r3, [r4, #12]
 8006114:	6923      	ldr	r3, [r4, #16]
 8006116:	b94b      	cbnz	r3, 800612c <__swsetup_r+0x7c>
 8006118:	89a3      	ldrh	r3, [r4, #12]
 800611a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800611e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006122:	d003      	beq.n	800612c <__swsetup_r+0x7c>
 8006124:	4621      	mov	r1, r4
 8006126:	4628      	mov	r0, r5
 8006128:	f000 fa70 	bl	800660c <__smakebuf_r>
 800612c:	89a0      	ldrh	r0, [r4, #12]
 800612e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006132:	f010 0301 	ands.w	r3, r0, #1
 8006136:	d00a      	beq.n	800614e <__swsetup_r+0x9e>
 8006138:	2300      	movs	r3, #0
 800613a:	60a3      	str	r3, [r4, #8]
 800613c:	6963      	ldr	r3, [r4, #20]
 800613e:	425b      	negs	r3, r3
 8006140:	61a3      	str	r3, [r4, #24]
 8006142:	6923      	ldr	r3, [r4, #16]
 8006144:	b943      	cbnz	r3, 8006158 <__swsetup_r+0xa8>
 8006146:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800614a:	d1c4      	bne.n	80060d6 <__swsetup_r+0x26>
 800614c:	bd38      	pop	{r3, r4, r5, pc}
 800614e:	0781      	lsls	r1, r0, #30
 8006150:	bf58      	it	pl
 8006152:	6963      	ldrpl	r3, [r4, #20]
 8006154:	60a3      	str	r3, [r4, #8]
 8006156:	e7f4      	b.n	8006142 <__swsetup_r+0x92>
 8006158:	2000      	movs	r0, #0
 800615a:	e7f7      	b.n	800614c <__swsetup_r+0x9c>
 800615c:	20000068 	.word	0x20000068

08006160 <memset>:
 8006160:	4402      	add	r2, r0
 8006162:	4603      	mov	r3, r0
 8006164:	4293      	cmp	r3, r2
 8006166:	d100      	bne.n	800616a <memset+0xa>
 8006168:	4770      	bx	lr
 800616a:	f803 1b01 	strb.w	r1, [r3], #1
 800616e:	e7f9      	b.n	8006164 <memset+0x4>

08006170 <_close_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	4d06      	ldr	r5, [pc, #24]	; (800618c <_close_r+0x1c>)
 8006174:	2300      	movs	r3, #0
 8006176:	4604      	mov	r4, r0
 8006178:	4608      	mov	r0, r1
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	f7fb f889 	bl	8001292 <_close>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	d102      	bne.n	800618a <_close_r+0x1a>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	b103      	cbz	r3, 800618a <_close_r+0x1a>
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	20004254 	.word	0x20004254

08006190 <_lseek_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4d07      	ldr	r5, [pc, #28]	; (80061b0 <_lseek_r+0x20>)
 8006194:	4604      	mov	r4, r0
 8006196:	4608      	mov	r0, r1
 8006198:	4611      	mov	r1, r2
 800619a:	2200      	movs	r2, #0
 800619c:	602a      	str	r2, [r5, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	f7fb f89e 	bl	80012e0 <_lseek>
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	d102      	bne.n	80061ae <_lseek_r+0x1e>
 80061a8:	682b      	ldr	r3, [r5, #0]
 80061aa:	b103      	cbz	r3, 80061ae <_lseek_r+0x1e>
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	bd38      	pop	{r3, r4, r5, pc}
 80061b0:	20004254 	.word	0x20004254

080061b4 <_read_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4d07      	ldr	r5, [pc, #28]	; (80061d4 <_read_r+0x20>)
 80061b8:	4604      	mov	r4, r0
 80061ba:	4608      	mov	r0, r1
 80061bc:	4611      	mov	r1, r2
 80061be:	2200      	movs	r2, #0
 80061c0:	602a      	str	r2, [r5, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	f7fb f82c 	bl	8001220 <_read>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d102      	bne.n	80061d2 <_read_r+0x1e>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	b103      	cbz	r3, 80061d2 <_read_r+0x1e>
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	20004254 	.word	0x20004254

080061d8 <_write_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d07      	ldr	r5, [pc, #28]	; (80061f8 <_write_r+0x20>)
 80061dc:	4604      	mov	r4, r0
 80061de:	4608      	mov	r0, r1
 80061e0:	4611      	mov	r1, r2
 80061e2:	2200      	movs	r2, #0
 80061e4:	602a      	str	r2, [r5, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f7fb f837 	bl	800125a <_write>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d102      	bne.n	80061f6 <_write_r+0x1e>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	b103      	cbz	r3, 80061f6 <_write_r+0x1e>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	20004254 	.word	0x20004254

080061fc <__errno>:
 80061fc:	4b01      	ldr	r3, [pc, #4]	; (8006204 <__errno+0x8>)
 80061fe:	6818      	ldr	r0, [r3, #0]
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	20000068 	.word	0x20000068

08006208 <__libc_init_array>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	4d0d      	ldr	r5, [pc, #52]	; (8006240 <__libc_init_array+0x38>)
 800620c:	4c0d      	ldr	r4, [pc, #52]	; (8006244 <__libc_init_array+0x3c>)
 800620e:	1b64      	subs	r4, r4, r5
 8006210:	10a4      	asrs	r4, r4, #2
 8006212:	2600      	movs	r6, #0
 8006214:	42a6      	cmp	r6, r4
 8006216:	d109      	bne.n	800622c <__libc_init_array+0x24>
 8006218:	4d0b      	ldr	r5, [pc, #44]	; (8006248 <__libc_init_array+0x40>)
 800621a:	4c0c      	ldr	r4, [pc, #48]	; (800624c <__libc_init_array+0x44>)
 800621c:	f000 fa64 	bl	80066e8 <_init>
 8006220:	1b64      	subs	r4, r4, r5
 8006222:	10a4      	asrs	r4, r4, #2
 8006224:	2600      	movs	r6, #0
 8006226:	42a6      	cmp	r6, r4
 8006228:	d105      	bne.n	8006236 <__libc_init_array+0x2e>
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006230:	4798      	blx	r3
 8006232:	3601      	adds	r6, #1
 8006234:	e7ee      	b.n	8006214 <__libc_init_array+0xc>
 8006236:	f855 3b04 	ldr.w	r3, [r5], #4
 800623a:	4798      	blx	r3
 800623c:	3601      	adds	r6, #1
 800623e:	e7f2      	b.n	8006226 <__libc_init_array+0x1e>
 8006240:	0800678c 	.word	0x0800678c
 8006244:	0800678c 	.word	0x0800678c
 8006248:	0800678c 	.word	0x0800678c
 800624c:	08006790 	.word	0x08006790

08006250 <__retarget_lock_init_recursive>:
 8006250:	4770      	bx	lr

08006252 <__retarget_lock_acquire_recursive>:
 8006252:	4770      	bx	lr

08006254 <__retarget_lock_release_recursive>:
 8006254:	4770      	bx	lr

08006256 <memcpy>:
 8006256:	440a      	add	r2, r1
 8006258:	4291      	cmp	r1, r2
 800625a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800625e:	d100      	bne.n	8006262 <memcpy+0xc>
 8006260:	4770      	bx	lr
 8006262:	b510      	push	{r4, lr}
 8006264:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006268:	f803 4f01 	strb.w	r4, [r3, #1]!
 800626c:	4291      	cmp	r1, r2
 800626e:	d1f9      	bne.n	8006264 <memcpy+0xe>
 8006270:	bd10      	pop	{r4, pc}
	...

08006274 <_free_r>:
 8006274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006276:	2900      	cmp	r1, #0
 8006278:	d044      	beq.n	8006304 <_free_r+0x90>
 800627a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800627e:	9001      	str	r0, [sp, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	f1a1 0404 	sub.w	r4, r1, #4
 8006286:	bfb8      	it	lt
 8006288:	18e4      	addlt	r4, r4, r3
 800628a:	f000 f8df 	bl	800644c <__malloc_lock>
 800628e:	4a1e      	ldr	r2, [pc, #120]	; (8006308 <_free_r+0x94>)
 8006290:	9801      	ldr	r0, [sp, #4]
 8006292:	6813      	ldr	r3, [r2, #0]
 8006294:	b933      	cbnz	r3, 80062a4 <_free_r+0x30>
 8006296:	6063      	str	r3, [r4, #4]
 8006298:	6014      	str	r4, [r2, #0]
 800629a:	b003      	add	sp, #12
 800629c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062a0:	f000 b8da 	b.w	8006458 <__malloc_unlock>
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d908      	bls.n	80062ba <_free_r+0x46>
 80062a8:	6825      	ldr	r5, [r4, #0]
 80062aa:	1961      	adds	r1, r4, r5
 80062ac:	428b      	cmp	r3, r1
 80062ae:	bf01      	itttt	eq
 80062b0:	6819      	ldreq	r1, [r3, #0]
 80062b2:	685b      	ldreq	r3, [r3, #4]
 80062b4:	1949      	addeq	r1, r1, r5
 80062b6:	6021      	streq	r1, [r4, #0]
 80062b8:	e7ed      	b.n	8006296 <_free_r+0x22>
 80062ba:	461a      	mov	r2, r3
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	b10b      	cbz	r3, 80062c4 <_free_r+0x50>
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	d9fa      	bls.n	80062ba <_free_r+0x46>
 80062c4:	6811      	ldr	r1, [r2, #0]
 80062c6:	1855      	adds	r5, r2, r1
 80062c8:	42a5      	cmp	r5, r4
 80062ca:	d10b      	bne.n	80062e4 <_free_r+0x70>
 80062cc:	6824      	ldr	r4, [r4, #0]
 80062ce:	4421      	add	r1, r4
 80062d0:	1854      	adds	r4, r2, r1
 80062d2:	42a3      	cmp	r3, r4
 80062d4:	6011      	str	r1, [r2, #0]
 80062d6:	d1e0      	bne.n	800629a <_free_r+0x26>
 80062d8:	681c      	ldr	r4, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	6053      	str	r3, [r2, #4]
 80062de:	440c      	add	r4, r1
 80062e0:	6014      	str	r4, [r2, #0]
 80062e2:	e7da      	b.n	800629a <_free_r+0x26>
 80062e4:	d902      	bls.n	80062ec <_free_r+0x78>
 80062e6:	230c      	movs	r3, #12
 80062e8:	6003      	str	r3, [r0, #0]
 80062ea:	e7d6      	b.n	800629a <_free_r+0x26>
 80062ec:	6825      	ldr	r5, [r4, #0]
 80062ee:	1961      	adds	r1, r4, r5
 80062f0:	428b      	cmp	r3, r1
 80062f2:	bf04      	itt	eq
 80062f4:	6819      	ldreq	r1, [r3, #0]
 80062f6:	685b      	ldreq	r3, [r3, #4]
 80062f8:	6063      	str	r3, [r4, #4]
 80062fa:	bf04      	itt	eq
 80062fc:	1949      	addeq	r1, r1, r5
 80062fe:	6021      	streq	r1, [r4, #0]
 8006300:	6054      	str	r4, [r2, #4]
 8006302:	e7ca      	b.n	800629a <_free_r+0x26>
 8006304:	b003      	add	sp, #12
 8006306:	bd30      	pop	{r4, r5, pc}
 8006308:	2000425c 	.word	0x2000425c

0800630c <sbrk_aligned>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	4e0e      	ldr	r6, [pc, #56]	; (8006348 <sbrk_aligned+0x3c>)
 8006310:	460c      	mov	r4, r1
 8006312:	6831      	ldr	r1, [r6, #0]
 8006314:	4605      	mov	r5, r0
 8006316:	b911      	cbnz	r1, 800631e <sbrk_aligned+0x12>
 8006318:	f000 f9d6 	bl	80066c8 <_sbrk_r>
 800631c:	6030      	str	r0, [r6, #0]
 800631e:	4621      	mov	r1, r4
 8006320:	4628      	mov	r0, r5
 8006322:	f000 f9d1 	bl	80066c8 <_sbrk_r>
 8006326:	1c43      	adds	r3, r0, #1
 8006328:	d00a      	beq.n	8006340 <sbrk_aligned+0x34>
 800632a:	1cc4      	adds	r4, r0, #3
 800632c:	f024 0403 	bic.w	r4, r4, #3
 8006330:	42a0      	cmp	r0, r4
 8006332:	d007      	beq.n	8006344 <sbrk_aligned+0x38>
 8006334:	1a21      	subs	r1, r4, r0
 8006336:	4628      	mov	r0, r5
 8006338:	f000 f9c6 	bl	80066c8 <_sbrk_r>
 800633c:	3001      	adds	r0, #1
 800633e:	d101      	bne.n	8006344 <sbrk_aligned+0x38>
 8006340:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006344:	4620      	mov	r0, r4
 8006346:	bd70      	pop	{r4, r5, r6, pc}
 8006348:	20004260 	.word	0x20004260

0800634c <_malloc_r>:
 800634c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006350:	1ccd      	adds	r5, r1, #3
 8006352:	f025 0503 	bic.w	r5, r5, #3
 8006356:	3508      	adds	r5, #8
 8006358:	2d0c      	cmp	r5, #12
 800635a:	bf38      	it	cc
 800635c:	250c      	movcc	r5, #12
 800635e:	2d00      	cmp	r5, #0
 8006360:	4607      	mov	r7, r0
 8006362:	db01      	blt.n	8006368 <_malloc_r+0x1c>
 8006364:	42a9      	cmp	r1, r5
 8006366:	d905      	bls.n	8006374 <_malloc_r+0x28>
 8006368:	230c      	movs	r3, #12
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	2600      	movs	r6, #0
 800636e:	4630      	mov	r0, r6
 8006370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006374:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006448 <_malloc_r+0xfc>
 8006378:	f000 f868 	bl	800644c <__malloc_lock>
 800637c:	f8d8 3000 	ldr.w	r3, [r8]
 8006380:	461c      	mov	r4, r3
 8006382:	bb5c      	cbnz	r4, 80063dc <_malloc_r+0x90>
 8006384:	4629      	mov	r1, r5
 8006386:	4638      	mov	r0, r7
 8006388:	f7ff ffc0 	bl	800630c <sbrk_aligned>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	4604      	mov	r4, r0
 8006390:	d155      	bne.n	800643e <_malloc_r+0xf2>
 8006392:	f8d8 4000 	ldr.w	r4, [r8]
 8006396:	4626      	mov	r6, r4
 8006398:	2e00      	cmp	r6, #0
 800639a:	d145      	bne.n	8006428 <_malloc_r+0xdc>
 800639c:	2c00      	cmp	r4, #0
 800639e:	d048      	beq.n	8006432 <_malloc_r+0xe6>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	4631      	mov	r1, r6
 80063a4:	4638      	mov	r0, r7
 80063a6:	eb04 0903 	add.w	r9, r4, r3
 80063aa:	f000 f98d 	bl	80066c8 <_sbrk_r>
 80063ae:	4581      	cmp	r9, r0
 80063b0:	d13f      	bne.n	8006432 <_malloc_r+0xe6>
 80063b2:	6821      	ldr	r1, [r4, #0]
 80063b4:	1a6d      	subs	r5, r5, r1
 80063b6:	4629      	mov	r1, r5
 80063b8:	4638      	mov	r0, r7
 80063ba:	f7ff ffa7 	bl	800630c <sbrk_aligned>
 80063be:	3001      	adds	r0, #1
 80063c0:	d037      	beq.n	8006432 <_malloc_r+0xe6>
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	442b      	add	r3, r5
 80063c6:	6023      	str	r3, [r4, #0]
 80063c8:	f8d8 3000 	ldr.w	r3, [r8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d038      	beq.n	8006442 <_malloc_r+0xf6>
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	42a2      	cmp	r2, r4
 80063d4:	d12b      	bne.n	800642e <_malloc_r+0xe2>
 80063d6:	2200      	movs	r2, #0
 80063d8:	605a      	str	r2, [r3, #4]
 80063da:	e00f      	b.n	80063fc <_malloc_r+0xb0>
 80063dc:	6822      	ldr	r2, [r4, #0]
 80063de:	1b52      	subs	r2, r2, r5
 80063e0:	d41f      	bmi.n	8006422 <_malloc_r+0xd6>
 80063e2:	2a0b      	cmp	r2, #11
 80063e4:	d917      	bls.n	8006416 <_malloc_r+0xca>
 80063e6:	1961      	adds	r1, r4, r5
 80063e8:	42a3      	cmp	r3, r4
 80063ea:	6025      	str	r5, [r4, #0]
 80063ec:	bf18      	it	ne
 80063ee:	6059      	strne	r1, [r3, #4]
 80063f0:	6863      	ldr	r3, [r4, #4]
 80063f2:	bf08      	it	eq
 80063f4:	f8c8 1000 	streq.w	r1, [r8]
 80063f8:	5162      	str	r2, [r4, r5]
 80063fa:	604b      	str	r3, [r1, #4]
 80063fc:	4638      	mov	r0, r7
 80063fe:	f104 060b 	add.w	r6, r4, #11
 8006402:	f000 f829 	bl	8006458 <__malloc_unlock>
 8006406:	f026 0607 	bic.w	r6, r6, #7
 800640a:	1d23      	adds	r3, r4, #4
 800640c:	1af2      	subs	r2, r6, r3
 800640e:	d0ae      	beq.n	800636e <_malloc_r+0x22>
 8006410:	1b9b      	subs	r3, r3, r6
 8006412:	50a3      	str	r3, [r4, r2]
 8006414:	e7ab      	b.n	800636e <_malloc_r+0x22>
 8006416:	42a3      	cmp	r3, r4
 8006418:	6862      	ldr	r2, [r4, #4]
 800641a:	d1dd      	bne.n	80063d8 <_malloc_r+0x8c>
 800641c:	f8c8 2000 	str.w	r2, [r8]
 8006420:	e7ec      	b.n	80063fc <_malloc_r+0xb0>
 8006422:	4623      	mov	r3, r4
 8006424:	6864      	ldr	r4, [r4, #4]
 8006426:	e7ac      	b.n	8006382 <_malloc_r+0x36>
 8006428:	4634      	mov	r4, r6
 800642a:	6876      	ldr	r6, [r6, #4]
 800642c:	e7b4      	b.n	8006398 <_malloc_r+0x4c>
 800642e:	4613      	mov	r3, r2
 8006430:	e7cc      	b.n	80063cc <_malloc_r+0x80>
 8006432:	230c      	movs	r3, #12
 8006434:	603b      	str	r3, [r7, #0]
 8006436:	4638      	mov	r0, r7
 8006438:	f000 f80e 	bl	8006458 <__malloc_unlock>
 800643c:	e797      	b.n	800636e <_malloc_r+0x22>
 800643e:	6025      	str	r5, [r4, #0]
 8006440:	e7dc      	b.n	80063fc <_malloc_r+0xb0>
 8006442:	605b      	str	r3, [r3, #4]
 8006444:	deff      	udf	#255	; 0xff
 8006446:	bf00      	nop
 8006448:	2000425c 	.word	0x2000425c

0800644c <__malloc_lock>:
 800644c:	4801      	ldr	r0, [pc, #4]	; (8006454 <__malloc_lock+0x8>)
 800644e:	f7ff bf00 	b.w	8006252 <__retarget_lock_acquire_recursive>
 8006452:	bf00      	nop
 8006454:	20004258 	.word	0x20004258

08006458 <__malloc_unlock>:
 8006458:	4801      	ldr	r0, [pc, #4]	; (8006460 <__malloc_unlock+0x8>)
 800645a:	f7ff befb 	b.w	8006254 <__retarget_lock_release_recursive>
 800645e:	bf00      	nop
 8006460:	20004258 	.word	0x20004258

08006464 <__sflush_r>:
 8006464:	898a      	ldrh	r2, [r1, #12]
 8006466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800646a:	4605      	mov	r5, r0
 800646c:	0710      	lsls	r0, r2, #28
 800646e:	460c      	mov	r4, r1
 8006470:	d458      	bmi.n	8006524 <__sflush_r+0xc0>
 8006472:	684b      	ldr	r3, [r1, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	dc05      	bgt.n	8006484 <__sflush_r+0x20>
 8006478:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	dc02      	bgt.n	8006484 <__sflush_r+0x20>
 800647e:	2000      	movs	r0, #0
 8006480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006484:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006486:	2e00      	cmp	r6, #0
 8006488:	d0f9      	beq.n	800647e <__sflush_r+0x1a>
 800648a:	2300      	movs	r3, #0
 800648c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006490:	682f      	ldr	r7, [r5, #0]
 8006492:	6a21      	ldr	r1, [r4, #32]
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	d032      	beq.n	80064fe <__sflush_r+0x9a>
 8006498:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800649a:	89a3      	ldrh	r3, [r4, #12]
 800649c:	075a      	lsls	r2, r3, #29
 800649e:	d505      	bpl.n	80064ac <__sflush_r+0x48>
 80064a0:	6863      	ldr	r3, [r4, #4]
 80064a2:	1ac0      	subs	r0, r0, r3
 80064a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064a6:	b10b      	cbz	r3, 80064ac <__sflush_r+0x48>
 80064a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064aa:	1ac0      	subs	r0, r0, r3
 80064ac:	2300      	movs	r3, #0
 80064ae:	4602      	mov	r2, r0
 80064b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064b2:	6a21      	ldr	r1, [r4, #32]
 80064b4:	4628      	mov	r0, r5
 80064b6:	47b0      	blx	r6
 80064b8:	1c43      	adds	r3, r0, #1
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	d106      	bne.n	80064cc <__sflush_r+0x68>
 80064be:	6829      	ldr	r1, [r5, #0]
 80064c0:	291d      	cmp	r1, #29
 80064c2:	d82b      	bhi.n	800651c <__sflush_r+0xb8>
 80064c4:	4a29      	ldr	r2, [pc, #164]	; (800656c <__sflush_r+0x108>)
 80064c6:	410a      	asrs	r2, r1
 80064c8:	07d6      	lsls	r6, r2, #31
 80064ca:	d427      	bmi.n	800651c <__sflush_r+0xb8>
 80064cc:	2200      	movs	r2, #0
 80064ce:	6062      	str	r2, [r4, #4]
 80064d0:	04d9      	lsls	r1, r3, #19
 80064d2:	6922      	ldr	r2, [r4, #16]
 80064d4:	6022      	str	r2, [r4, #0]
 80064d6:	d504      	bpl.n	80064e2 <__sflush_r+0x7e>
 80064d8:	1c42      	adds	r2, r0, #1
 80064da:	d101      	bne.n	80064e0 <__sflush_r+0x7c>
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	b903      	cbnz	r3, 80064e2 <__sflush_r+0x7e>
 80064e0:	6560      	str	r0, [r4, #84]	; 0x54
 80064e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064e4:	602f      	str	r7, [r5, #0]
 80064e6:	2900      	cmp	r1, #0
 80064e8:	d0c9      	beq.n	800647e <__sflush_r+0x1a>
 80064ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064ee:	4299      	cmp	r1, r3
 80064f0:	d002      	beq.n	80064f8 <__sflush_r+0x94>
 80064f2:	4628      	mov	r0, r5
 80064f4:	f7ff febe 	bl	8006274 <_free_r>
 80064f8:	2000      	movs	r0, #0
 80064fa:	6360      	str	r0, [r4, #52]	; 0x34
 80064fc:	e7c0      	b.n	8006480 <__sflush_r+0x1c>
 80064fe:	2301      	movs	r3, #1
 8006500:	4628      	mov	r0, r5
 8006502:	47b0      	blx	r6
 8006504:	1c41      	adds	r1, r0, #1
 8006506:	d1c8      	bne.n	800649a <__sflush_r+0x36>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0c5      	beq.n	800649a <__sflush_r+0x36>
 800650e:	2b1d      	cmp	r3, #29
 8006510:	d001      	beq.n	8006516 <__sflush_r+0xb2>
 8006512:	2b16      	cmp	r3, #22
 8006514:	d101      	bne.n	800651a <__sflush_r+0xb6>
 8006516:	602f      	str	r7, [r5, #0]
 8006518:	e7b1      	b.n	800647e <__sflush_r+0x1a>
 800651a:	89a3      	ldrh	r3, [r4, #12]
 800651c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006520:	81a3      	strh	r3, [r4, #12]
 8006522:	e7ad      	b.n	8006480 <__sflush_r+0x1c>
 8006524:	690f      	ldr	r7, [r1, #16]
 8006526:	2f00      	cmp	r7, #0
 8006528:	d0a9      	beq.n	800647e <__sflush_r+0x1a>
 800652a:	0793      	lsls	r3, r2, #30
 800652c:	680e      	ldr	r6, [r1, #0]
 800652e:	bf08      	it	eq
 8006530:	694b      	ldreq	r3, [r1, #20]
 8006532:	600f      	str	r7, [r1, #0]
 8006534:	bf18      	it	ne
 8006536:	2300      	movne	r3, #0
 8006538:	eba6 0807 	sub.w	r8, r6, r7
 800653c:	608b      	str	r3, [r1, #8]
 800653e:	f1b8 0f00 	cmp.w	r8, #0
 8006542:	dd9c      	ble.n	800647e <__sflush_r+0x1a>
 8006544:	6a21      	ldr	r1, [r4, #32]
 8006546:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006548:	4643      	mov	r3, r8
 800654a:	463a      	mov	r2, r7
 800654c:	4628      	mov	r0, r5
 800654e:	47b0      	blx	r6
 8006550:	2800      	cmp	r0, #0
 8006552:	dc06      	bgt.n	8006562 <__sflush_r+0xfe>
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800655a:	81a3      	strh	r3, [r4, #12]
 800655c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006560:	e78e      	b.n	8006480 <__sflush_r+0x1c>
 8006562:	4407      	add	r7, r0
 8006564:	eba8 0800 	sub.w	r8, r8, r0
 8006568:	e7e9      	b.n	800653e <__sflush_r+0xda>
 800656a:	bf00      	nop
 800656c:	dfbffffe 	.word	0xdfbffffe

08006570 <_fflush_r>:
 8006570:	b538      	push	{r3, r4, r5, lr}
 8006572:	690b      	ldr	r3, [r1, #16]
 8006574:	4605      	mov	r5, r0
 8006576:	460c      	mov	r4, r1
 8006578:	b913      	cbnz	r3, 8006580 <_fflush_r+0x10>
 800657a:	2500      	movs	r5, #0
 800657c:	4628      	mov	r0, r5
 800657e:	bd38      	pop	{r3, r4, r5, pc}
 8006580:	b118      	cbz	r0, 800658a <_fflush_r+0x1a>
 8006582:	6a03      	ldr	r3, [r0, #32]
 8006584:	b90b      	cbnz	r3, 800658a <_fflush_r+0x1a>
 8006586:	f7ff fc81 	bl	8005e8c <__sinit>
 800658a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0f3      	beq.n	800657a <_fflush_r+0xa>
 8006592:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006594:	07d0      	lsls	r0, r2, #31
 8006596:	d404      	bmi.n	80065a2 <_fflush_r+0x32>
 8006598:	0599      	lsls	r1, r3, #22
 800659a:	d402      	bmi.n	80065a2 <_fflush_r+0x32>
 800659c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800659e:	f7ff fe58 	bl	8006252 <__retarget_lock_acquire_recursive>
 80065a2:	4628      	mov	r0, r5
 80065a4:	4621      	mov	r1, r4
 80065a6:	f7ff ff5d 	bl	8006464 <__sflush_r>
 80065aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065ac:	07da      	lsls	r2, r3, #31
 80065ae:	4605      	mov	r5, r0
 80065b0:	d4e4      	bmi.n	800657c <_fflush_r+0xc>
 80065b2:	89a3      	ldrh	r3, [r4, #12]
 80065b4:	059b      	lsls	r3, r3, #22
 80065b6:	d4e1      	bmi.n	800657c <_fflush_r+0xc>
 80065b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ba:	f7ff fe4b 	bl	8006254 <__retarget_lock_release_recursive>
 80065be:	e7dd      	b.n	800657c <_fflush_r+0xc>

080065c0 <__swhatbuf_r>:
 80065c0:	b570      	push	{r4, r5, r6, lr}
 80065c2:	460c      	mov	r4, r1
 80065c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c8:	2900      	cmp	r1, #0
 80065ca:	b096      	sub	sp, #88	; 0x58
 80065cc:	4615      	mov	r5, r2
 80065ce:	461e      	mov	r6, r3
 80065d0:	da0d      	bge.n	80065ee <__swhatbuf_r+0x2e>
 80065d2:	89a3      	ldrh	r3, [r4, #12]
 80065d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80065d8:	f04f 0100 	mov.w	r1, #0
 80065dc:	bf0c      	ite	eq
 80065de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80065e2:	2340      	movne	r3, #64	; 0x40
 80065e4:	2000      	movs	r0, #0
 80065e6:	6031      	str	r1, [r6, #0]
 80065e8:	602b      	str	r3, [r5, #0]
 80065ea:	b016      	add	sp, #88	; 0x58
 80065ec:	bd70      	pop	{r4, r5, r6, pc}
 80065ee:	466a      	mov	r2, sp
 80065f0:	f000 f848 	bl	8006684 <_fstat_r>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	dbec      	blt.n	80065d2 <__swhatbuf_r+0x12>
 80065f8:	9901      	ldr	r1, [sp, #4]
 80065fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80065fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006602:	4259      	negs	r1, r3
 8006604:	4159      	adcs	r1, r3
 8006606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800660a:	e7eb      	b.n	80065e4 <__swhatbuf_r+0x24>

0800660c <__smakebuf_r>:
 800660c:	898b      	ldrh	r3, [r1, #12]
 800660e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006610:	079d      	lsls	r5, r3, #30
 8006612:	4606      	mov	r6, r0
 8006614:	460c      	mov	r4, r1
 8006616:	d507      	bpl.n	8006628 <__smakebuf_r+0x1c>
 8006618:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	6123      	str	r3, [r4, #16]
 8006620:	2301      	movs	r3, #1
 8006622:	6163      	str	r3, [r4, #20]
 8006624:	b002      	add	sp, #8
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	ab01      	add	r3, sp, #4
 800662a:	466a      	mov	r2, sp
 800662c:	f7ff ffc8 	bl	80065c0 <__swhatbuf_r>
 8006630:	9900      	ldr	r1, [sp, #0]
 8006632:	4605      	mov	r5, r0
 8006634:	4630      	mov	r0, r6
 8006636:	f7ff fe89 	bl	800634c <_malloc_r>
 800663a:	b948      	cbnz	r0, 8006650 <__smakebuf_r+0x44>
 800663c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006640:	059a      	lsls	r2, r3, #22
 8006642:	d4ef      	bmi.n	8006624 <__smakebuf_r+0x18>
 8006644:	f023 0303 	bic.w	r3, r3, #3
 8006648:	f043 0302 	orr.w	r3, r3, #2
 800664c:	81a3      	strh	r3, [r4, #12]
 800664e:	e7e3      	b.n	8006618 <__smakebuf_r+0xc>
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	6020      	str	r0, [r4, #0]
 8006654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006658:	81a3      	strh	r3, [r4, #12]
 800665a:	9b00      	ldr	r3, [sp, #0]
 800665c:	6163      	str	r3, [r4, #20]
 800665e:	9b01      	ldr	r3, [sp, #4]
 8006660:	6120      	str	r0, [r4, #16]
 8006662:	b15b      	cbz	r3, 800667c <__smakebuf_r+0x70>
 8006664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006668:	4630      	mov	r0, r6
 800666a:	f000 f81d 	bl	80066a8 <_isatty_r>
 800666e:	b128      	cbz	r0, 800667c <__smakebuf_r+0x70>
 8006670:	89a3      	ldrh	r3, [r4, #12]
 8006672:	f023 0303 	bic.w	r3, r3, #3
 8006676:	f043 0301 	orr.w	r3, r3, #1
 800667a:	81a3      	strh	r3, [r4, #12]
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	431d      	orrs	r5, r3
 8006680:	81a5      	strh	r5, [r4, #12]
 8006682:	e7cf      	b.n	8006624 <__smakebuf_r+0x18>

08006684 <_fstat_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4d07      	ldr	r5, [pc, #28]	; (80066a4 <_fstat_r+0x20>)
 8006688:	2300      	movs	r3, #0
 800668a:	4604      	mov	r4, r0
 800668c:	4608      	mov	r0, r1
 800668e:	4611      	mov	r1, r2
 8006690:	602b      	str	r3, [r5, #0]
 8006692:	f7fa fe0a 	bl	80012aa <_fstat>
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	d102      	bne.n	80066a0 <_fstat_r+0x1c>
 800669a:	682b      	ldr	r3, [r5, #0]
 800669c:	b103      	cbz	r3, 80066a0 <_fstat_r+0x1c>
 800669e:	6023      	str	r3, [r4, #0]
 80066a0:	bd38      	pop	{r3, r4, r5, pc}
 80066a2:	bf00      	nop
 80066a4:	20004254 	.word	0x20004254

080066a8 <_isatty_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d06      	ldr	r5, [pc, #24]	; (80066c4 <_isatty_r+0x1c>)
 80066ac:	2300      	movs	r3, #0
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	602b      	str	r3, [r5, #0]
 80066b4:	f7fa fe09 	bl	80012ca <_isatty>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d102      	bne.n	80066c2 <_isatty_r+0x1a>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	b103      	cbz	r3, 80066c2 <_isatty_r+0x1a>
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	bd38      	pop	{r3, r4, r5, pc}
 80066c4:	20004254 	.word	0x20004254

080066c8 <_sbrk_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4d06      	ldr	r5, [pc, #24]	; (80066e4 <_sbrk_r+0x1c>)
 80066cc:	2300      	movs	r3, #0
 80066ce:	4604      	mov	r4, r0
 80066d0:	4608      	mov	r0, r1
 80066d2:	602b      	str	r3, [r5, #0]
 80066d4:	f7fa fe12 	bl	80012fc <_sbrk>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_sbrk_r+0x1a>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_sbrk_r+0x1a>
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	20004254 	.word	0x20004254

080066e8 <_init>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	bf00      	nop
 80066ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ee:	bc08      	pop	{r3}
 80066f0:	469e      	mov	lr, r3
 80066f2:	4770      	bx	lr

080066f4 <_fini>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr

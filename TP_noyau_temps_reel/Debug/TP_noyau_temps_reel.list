
TP_noyau_temps_reel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800702c  0800702c  0001702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007124  08007124  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007124  08007124  00017124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800712c  0800712c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800712c  0800712c  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007130  08007130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004200  2000006c  080071a0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000426c  080071a0  0002426c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016141  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035bb  00000000  00000000  00036220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  000397e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f00  00000000  00000000  0003ab48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000295a4  00000000  00000000  0003ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000170e8  00000000  00000000  00064fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc544  00000000  00000000  0007c0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000578c  00000000  00000000  00178618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0017dda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007014 	.word	0x08007014

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08007014 	.word	0x08007014

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000090 	.word	0x20000090
 80005dc:	200000e4 	.word	0x200000e4

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2101      	movs	r1, #1
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 fc6b 	bl	8003ed0 <osSemaphoreCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a0b      	ldr	r2, [pc, #44]	; (800062c <MX_FREERTOS_Init+0x4c>)
 80005fe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_FREERTOS_Init+0x50>)
 8000602:	1d3c      	adds	r4, r7, #4
 8000604:	461d      	mov	r5, r3
 8000606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fbfa 	bl	8003e10 <osThreadCreate>
 800061c:	4603      	mov	r3, r0
 800061e:	4a05      	ldr	r2, [pc, #20]	; (8000634 <MX_FREERTOS_Init+0x54>)
 8000620:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000622:	bf00      	nop
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bdb0      	pop	{r4, r5, r7, pc}
 800062a:	bf00      	nop
 800062c:	2000008c 	.word	0x2000008c
 8000630:	08007038 	.word	0x08007038
 8000634:	20000088 	.word	0x20000088

08000638 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOI, LED1_Pin);
 8000640:	2102      	movs	r1, #2
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <StartDefaultTask+0x18>)
 8000644:	f001 faf9 	bl	8001c3a <HAL_GPIO_TogglePin>
    osDelay(100/portTICK_PERIOD_MS);
 8000648:	2064      	movs	r0, #100	; 0x64
 800064a:	f003 fc2d 	bl	8003ea8 <osDelay>
	HAL_GPIO_TogglePin(GPIOI, LED1_Pin);
 800064e:	e7f7      	b.n	8000640 <StartDefaultTask+0x8>
 8000650:	40022000 	.word	0x40022000

08000654 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b090      	sub	sp, #64	; 0x40
 8000658:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800066a:	4bad      	ldr	r3, [pc, #692]	; (8000920 <MX_GPIO_Init+0x2cc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4aac      	ldr	r2, [pc, #688]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000670:	f043 0310 	orr.w	r3, r3, #16
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4baa      	ldr	r3, [pc, #680]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0310 	and.w	r3, r3, #16
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000680:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000682:	4ba7      	ldr	r3, [pc, #668]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4aa6      	ldr	r2, [pc, #664]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4ba4      	ldr	r3, [pc, #656]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
 8000698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4ba1      	ldr	r3, [pc, #644]	; (8000920 <MX_GPIO_Init+0x2cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4aa0      	ldr	r2, [pc, #640]	; (8000920 <MX_GPIO_Init+0x2cc>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b9e      	ldr	r3, [pc, #632]	; (8000920 <MX_GPIO_Init+0x2cc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
 80006b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b2:	4b9b      	ldr	r3, [pc, #620]	; (8000920 <MX_GPIO_Init+0x2cc>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a9a      	ldr	r2, [pc, #616]	; (8000920 <MX_GPIO_Init+0x2cc>)
 80006b8:	f043 0308 	orr.w	r3, r3, #8
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b98      	ldr	r3, [pc, #608]	; (8000920 <MX_GPIO_Init+0x2cc>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0308 	and.w	r3, r3, #8
 80006c6:	61fb      	str	r3, [r7, #28]
 80006c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b95      	ldr	r3, [pc, #596]	; (8000920 <MX_GPIO_Init+0x2cc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a94      	ldr	r2, [pc, #592]	; (8000920 <MX_GPIO_Init+0x2cc>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b92      	ldr	r3, [pc, #584]	; (8000920 <MX_GPIO_Init+0x2cc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	61bb      	str	r3, [r7, #24]
 80006e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b8f      	ldr	r3, [pc, #572]	; (8000920 <MX_GPIO_Init+0x2cc>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a8e      	ldr	r2, [pc, #568]	; (8000920 <MX_GPIO_Init+0x2cc>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b8c      	ldr	r3, [pc, #560]	; (8000920 <MX_GPIO_Init+0x2cc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006fa:	4b89      	ldr	r3, [pc, #548]	; (8000920 <MX_GPIO_Init+0x2cc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a88      	ldr	r2, [pc, #544]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b86      	ldr	r3, [pc, #536]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000712:	4b83      	ldr	r3, [pc, #524]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a82      	ldr	r2, [pc, #520]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b80      	ldr	r3, [pc, #512]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800072a:	4b7d      	ldr	r3, [pc, #500]	; (8000920 <MX_GPIO_Init+0x2cc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a7c      	ldr	r2, [pc, #496]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000730:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b7a      	ldr	r3, [pc, #488]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000742:	4b77      	ldr	r3, [pc, #476]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a76      	ldr	r2, [pc, #472]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b74      	ldr	r3, [pc, #464]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0320 	and.w	r3, r3, #32
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	4b71      	ldr	r3, [pc, #452]	; (8000920 <MX_GPIO_Init+0x2cc>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a70      	ldr	r2, [pc, #448]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b6e      	ldr	r3, [pc, #440]	; (8000920 <MX_GPIO_Init+0x2cc>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2120      	movs	r1, #32
 8000776:	486b      	ldr	r0, [pc, #428]	; (8000924 <MX_GPIO_Init+0x2d0>)
 8000778:	f001 fa46 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED1_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f241 010e 	movw	r1, #4110	; 0x100e
 8000782:	4869      	ldr	r0, [pc, #420]	; (8000928 <MX_GPIO_Init+0x2d4>)
 8000784:	f001 fa40 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2108      	movs	r1, #8
 800078c:	4867      	ldr	r0, [pc, #412]	; (800092c <MX_GPIO_Init+0x2d8>)
 800078e:	f001 fa3b 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000798:	4865      	ldr	r0, [pc, #404]	; (8000930 <MX_GPIO_Init+0x2dc>)
 800079a:	f001 fa35 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	21c8      	movs	r1, #200	; 0xc8
 80007a2:	4864      	ldr	r0, [pc, #400]	; (8000934 <MX_GPIO_Init+0x2e0>)
 80007a4:	f001 fa30 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80007a8:	2310      	movs	r3, #16
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007b8:	230e      	movs	r3, #14
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007c0:	4619      	mov	r1, r3
 80007c2:	485d      	ldr	r0, [pc, #372]	; (8000938 <MX_GPIO_Init+0x2e4>)
 80007c4:	f001 f874 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007c8:	2308      	movs	r3, #8
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d8:	4619      	mov	r1, r3
 80007da:	4857      	ldr	r0, [pc, #348]	; (8000938 <MX_GPIO_Init+0x2e4>)
 80007dc:	f001 f868 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007e0:	2304      	movs	r3, #4
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007f0:	2309      	movs	r3, #9
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f8:	4619      	mov	r1, r3
 80007fa:	484f      	ldr	r0, [pc, #316]	; (8000938 <MX_GPIO_Init+0x2e4>)
 80007fc:	f001 f858 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000800:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000812:	230b      	movs	r3, #11
 8000814:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800081a:	4619      	mov	r1, r3
 800081c:	4845      	ldr	r0, [pc, #276]	; (8000934 <MX_GPIO_Init+0x2e0>)
 800081e:	f001 f847 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000822:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000834:	230c      	movs	r3, #12
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083c:	4619      	mov	r1, r3
 800083e:	483e      	ldr	r0, [pc, #248]	; (8000938 <MX_GPIO_Init+0x2e4>)
 8000840:	f001 f836 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000844:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084a:	2312      	movs	r3, #18
 800084c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000856:	2304      	movs	r3, #4
 8000858:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085e:	4619      	mov	r1, r3
 8000860:	4836      	ldr	r0, [pc, #216]	; (800093c <MX_GPIO_Init+0x2e8>)
 8000862:	f001 f825 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000866:	f643 4323 	movw	r3, #15395	; 0x3c23
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000874:	2303      	movs	r3, #3
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000878:	230a      	movs	r3, #10
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000880:	4619      	mov	r1, r3
 8000882:	482e      	ldr	r0, [pc, #184]	; (800093c <MX_GPIO_Init+0x2e8>)
 8000884:	f001 f814 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000888:	2310      	movs	r3, #16
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000898:	2302      	movs	r3, #2
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a0:	4619      	mov	r1, r3
 80008a2:	4826      	ldr	r0, [pc, #152]	; (800093c <MX_GPIO_Init+0x2e8>)
 80008a4:	f001 f804 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80008b8:	2308      	movs	r3, #8
 80008ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008c0:	4619      	mov	r1, r3
 80008c2:	4818      	ldr	r0, [pc, #96]	; (8000924 <MX_GPIO_Init+0x2d0>)
 80008c4:	f000 fff4 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008c8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008da:	230c      	movs	r3, #12
 80008dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e2:	4619      	mov	r1, r3
 80008e4:	4816      	ldr	r0, [pc, #88]	; (8000940 <MX_GPIO_Init+0x2ec>)
 80008e6:	f000 ffe3 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008fc:	2301      	movs	r3, #1
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000904:	4619      	mov	r1, r3
 8000906:	480f      	ldr	r0, [pc, #60]	; (8000944 <MX_GPIO_Init+0x2f0>)
 8000908:	f000 ffd2 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800090c:	2360      	movs	r3, #96	; 0x60
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800091c:	230d      	movs	r3, #13
 800091e:	e013      	b.n	8000948 <MX_GPIO_Init+0x2f4>
 8000920:	40023800 	.word	0x40023800
 8000924:	40020c00 	.word	0x40020c00
 8000928:	40022000 	.word	0x40022000
 800092c:	40022800 	.word	0x40022800
 8000930:	40021c00 	.word	0x40021c00
 8000934:	40021800 	.word	0x40021800
 8000938:	40021000 	.word	0x40021000
 800093c:	40020400 	.word	0x40020400
 8000940:	40020800 	.word	0x40020800
 8000944:	40020000 	.word	0x40020000
 8000948:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800094e:	4619      	mov	r1, r3
 8000950:	48bc      	ldr	r0, [pc, #752]	; (8000c44 <MX_GPIO_Init+0x5f0>)
 8000952:	f000 ffad 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000956:	2340      	movs	r3, #64	; 0x40
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000966:	230a      	movs	r3, #10
 8000968:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096e:	4619      	mov	r1, r3
 8000970:	48b5      	ldr	r0, [pc, #724]	; (8000c48 <MX_GPIO_Init+0x5f4>)
 8000972:	f000 ff9d 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000976:	f248 1333 	movw	r3, #33075	; 0x8133
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000988:	230c      	movs	r3, #12
 800098a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800098c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000990:	4619      	mov	r1, r3
 8000992:	48ae      	ldr	r0, [pc, #696]	; (8000c4c <MX_GPIO_Init+0x5f8>)
 8000994:	f000 ff8c 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000998:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009aa:	230e      	movs	r3, #14
 80009ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b2:	4619      	mov	r1, r3
 80009b4:	48a6      	ldr	r0, [pc, #664]	; (8000c50 <MX_GPIO_Init+0x5fc>)
 80009b6:	f000 ff7b 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80009ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009cc:	4619      	mov	r1, r3
 80009ce:	48a0      	ldr	r0, [pc, #640]	; (8000c50 <MX_GPIO_Init+0x5fc>)
 80009d0:	f000 ff6e 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009d4:	2340      	movs	r3, #64	; 0x40
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e6:	4619      	mov	r1, r3
 80009e8:	489a      	ldr	r0, [pc, #616]	; (8000c54 <MX_GPIO_Init+0x600>)
 80009ea:	f000 ff61 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009ee:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a00:	230c      	movs	r3, #12
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4892      	ldr	r0, [pc, #584]	; (8000c54 <MX_GPIO_Init+0x600>)
 8000a0c:	f000 ff50 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a22:	230a      	movs	r3, #10
 8000a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	488a      	ldr	r0, [pc, #552]	; (8000c58 <MX_GPIO_Init+0x604>)
 8000a2e:	f000 ff3f 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a32:	23f0      	movs	r3, #240	; 0xf0
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a42:	230a      	movs	r3, #10
 8000a44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4883      	ldr	r0, [pc, #524]	; (8000c5c <MX_GPIO_Init+0x608>)
 8000a4e:	f000 ff2f 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a52:	23f7      	movs	r3, #247	; 0xf7
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a62:	230e      	movs	r3, #14
 8000a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	487c      	ldr	r0, [pc, #496]	; (8000c60 <MX_GPIO_Init+0x60c>)
 8000a6e:	f000 ff1f 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a84:	2309      	movs	r3, #9
 8000a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	486f      	ldr	r0, [pc, #444]	; (8000c4c <MX_GPIO_Init+0x5f8>)
 8000a90:	f000 ff0e 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4866      	ldr	r0, [pc, #408]	; (8000c4c <MX_GPIO_Init+0x5f8>)
 8000ab2:	f000 fefd 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ab6:	2320      	movs	r3, #32
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aca:	4619      	mov	r1, r3
 8000acc:	4861      	ldr	r0, [pc, #388]	; (8000c54 <MX_GPIO_Init+0x600>)
 8000ace:	f000 feef 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ae2:	230d      	movs	r3, #13
 8000ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aea:	4619      	mov	r1, r3
 8000aec:	4859      	ldr	r0, [pc, #356]	; (8000c54 <MX_GPIO_Init+0x600>)
 8000aee:	f000 fedf 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED1_Pin|LCD_DISP_Pin;
 8000af2:	f241 030e 	movw	r3, #4110	; 0x100e
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4854      	ldr	r0, [pc, #336]	; (8000c5c <MX_GPIO_Init+0x608>)
 8000b0c:	f000 fed0 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b16:	2300      	movs	r3, #0
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b22:	4619      	mov	r1, r3
 8000b24:	484f      	ldr	r0, [pc, #316]	; (8000c64 <MX_GPIO_Init+0x610>)
 8000b26:	f000 fec3 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b2a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b44:	4619      	mov	r1, r3
 8000b46:	4848      	ldr	r0, [pc, #288]	; (8000c68 <MX_GPIO_Init+0x614>)
 8000b48:	f000 feb2 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b4c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b5e:	230e      	movs	r3, #14
 8000b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b66:	4619      	mov	r1, r3
 8000b68:	483c      	ldr	r0, [pc, #240]	; (8000c5c <MX_GPIO_Init+0x608>)
 8000b6a:	f000 fea1 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b6e:	2308      	movs	r3, #8
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b82:	4619      	mov	r1, r3
 8000b84:	4836      	ldr	r0, [pc, #216]	; (8000c60 <MX_GPIO_Init+0x60c>)
 8000b86:	f000 fe93 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b9c:	230d      	movs	r3, #13
 8000b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4829      	ldr	r0, [pc, #164]	; (8000c4c <MX_GPIO_Init+0x5f8>)
 8000ba8:	f000 fe82 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bac:	2310      	movs	r3, #16
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4825      	ldr	r0, [pc, #148]	; (8000c54 <MX_GPIO_Init+0x600>)
 8000bc0:	f000 fe76 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bdc:	4619      	mov	r1, r3
 8000bde:	481d      	ldr	r0, [pc, #116]	; (8000c54 <MX_GPIO_Init+0x600>)
 8000be0:	f000 fe66 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000be4:	f248 0304 	movw	r3, #32772	; 0x8004
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bea:	2300      	movs	r3, #0
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	481c      	ldr	r0, [pc, #112]	; (8000c6c <MX_GPIO_Init+0x618>)
 8000bfa:	f000 fe59 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c14:	4619      	mov	r1, r3
 8000c16:	4815      	ldr	r0, [pc, #84]	; (8000c6c <MX_GPIO_Init+0x618>)
 8000c18:	f000 fe4a 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c1c:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c2e:	230d      	movs	r3, #13
 8000c30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c36:	4619      	mov	r1, r3
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <MX_GPIO_Init+0x618>)
 8000c3a:	f000 fe39 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e016      	b.n	8000c70 <MX_GPIO_Init+0x61c>
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40020400 	.word	0x40020400
 8000c4c:	40021800 	.word	0x40021800
 8000c50:	40022400 	.word	0x40022400
 8000c54:	40020c00 	.word	0x40020c00
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40022000 	.word	0x40022000
 8000c60:	40022800 	.word	0x40022800
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40021400 	.word	0x40021400
 8000c6c:	40021c00 	.word	0x40021c00
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c86:	4619      	mov	r1, r3
 8000c88:	489d      	ldr	r0, [pc, #628]	; (8000f00 <MX_GPIO_Init+0x8ac>)
 8000c8a:	f000 fe11 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4896      	ldr	r0, [pc, #600]	; (8000f04 <MX_GPIO_Init+0x8b0>)
 8000cac:	f000 fe00 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cb6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	488e      	ldr	r0, [pc, #568]	; (8000f00 <MX_GPIO_Init+0x8ac>)
 8000cc8:	f000 fdf2 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000ccc:	23c0      	movs	r3, #192	; 0xc0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4888      	ldr	r0, [pc, #544]	; (8000f08 <MX_GPIO_Init+0x8b4>)
 8000ce8:	f000 fde2 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000cec:	2310      	movs	r3, #16
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000cfc:	230a      	movs	r3, #10
 8000cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d04:	4619      	mov	r1, r3
 8000d06:	4881      	ldr	r0, [pc, #516]	; (8000f0c <MX_GPIO_Init+0x8b8>)
 8000d08:	f000 fdd2 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d0c:	2328      	movs	r3, #40	; 0x28
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d24:	4619      	mov	r1, r3
 8000d26:	4879      	ldr	r0, [pc, #484]	; (8000f0c <MX_GPIO_Init+0x8b8>)
 8000d28:	f000 fdc2 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d2c:	23c8      	movs	r3, #200	; 0xc8
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d40:	4619      	mov	r1, r3
 8000d42:	4873      	ldr	r0, [pc, #460]	; (8000f10 <MX_GPIO_Init+0x8bc>)
 8000d44:	f000 fdb4 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d48:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	486d      	ldr	r0, [pc, #436]	; (8000f14 <MX_GPIO_Init+0x8c0>)
 8000d5e:	f000 fda7 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d62:	2308      	movs	r3, #8
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d72:	230c      	movs	r3, #12
 8000d74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4862      	ldr	r0, [pc, #392]	; (8000f08 <MX_GPIO_Init+0x8b4>)
 8000d7e:	f000 fd97 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000d82:	2305      	movs	r3, #5
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d92:	230a      	movs	r3, #10
 8000d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	485a      	ldr	r0, [pc, #360]	; (8000f08 <MX_GPIO_Init+0x8b4>)
 8000d9e:	f000 fd87 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000da2:	2332      	movs	r3, #50	; 0x32
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db2:	230b      	movs	r3, #11
 8000db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4852      	ldr	r0, [pc, #328]	; (8000f08 <MX_GPIO_Init+0x8b4>)
 8000dbe:	f000 fd77 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dd2:	2309      	movs	r3, #9
 8000dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dda:	4619      	mov	r1, r3
 8000ddc:	484e      	ldr	r0, [pc, #312]	; (8000f18 <MX_GPIO_Init+0x8c4>)
 8000dde:	f000 fd67 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000de2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000df4:	2309      	movs	r3, #9
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4847      	ldr	r0, [pc, #284]	; (8000f1c <MX_GPIO_Init+0x8c8>)
 8000e00:	f000 fd56 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e04:	2304      	movs	r3, #4
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e14:	4619      	mov	r1, r3
 8000e16:	483e      	ldr	r0, [pc, #248]	; (8000f10 <MX_GPIO_Init+0x8bc>)
 8000e18:	f000 fd4a 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e1c:	2386      	movs	r3, #134	; 0x86
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2c:	230b      	movs	r3, #11
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e34:	4619      	mov	r1, r3
 8000e36:	4833      	ldr	r0, [pc, #204]	; (8000f04 <MX_GPIO_Init+0x8b0>)
 8000e38:	f000 fd3a 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e40:	2303      	movs	r3, #3
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	482d      	ldr	r0, [pc, #180]	; (8000f04 <MX_GPIO_Init+0x8b0>)
 8000e50:	f000 fd2e 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e54:	2350      	movs	r3, #80	; 0x50
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e64:	230d      	movs	r3, #13
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4825      	ldr	r0, [pc, #148]	; (8000f04 <MX_GPIO_Init+0x8b0>)
 8000e70:	f000 fd1e 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e74:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e7a:	2312      	movs	r3, #18
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e86:	2304      	movs	r3, #4
 8000e88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	481e      	ldr	r0, [pc, #120]	; (8000f0c <MX_GPIO_Init+0x8b8>)
 8000e92:	f000 fd0d 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000e96:	2328      	movs	r3, #40	; 0x28
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ea6:	230a      	movs	r3, #10
 8000ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4814      	ldr	r0, [pc, #80]	; (8000f04 <MX_GPIO_Init+0x8b0>)
 8000eb2:	f000 fcfd 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000eb6:	2340      	movs	r3, #64	; 0x40
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ec6:	2309      	movs	r3, #9
 8000ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480e      	ldr	r0, [pc, #56]	; (8000f0c <MX_GPIO_Init+0x8b8>)
 8000ed2:	f000 fced 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000ed6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ee8:	2305      	movs	r3, #5
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4809      	ldr	r0, [pc, #36]	; (8000f18 <MX_GPIO_Init+0x8c4>)
 8000ef4:	f000 fcdc 	bl	80018b0 <HAL_GPIO_Init>

}
 8000ef8:	bf00      	nop
 8000efa:	3740      	adds	r7, #64	; 0x40
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40022000 	.word	0x40022000
 8000f04:	40020000 	.word	0x40020000
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	40021c00 	.word	0x40021c00
 8000f10:	40021800 	.word	0x40021800
 8000f14:	40021400 	.word	0x40021400
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	40020c00 	.word	0x40020c00

08000f20 <giveTask>:
QueueHandle_t timerQueue; //handle queue

uint8_t timer_value = 0;

void giveTask(void const * argument)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	uint32_t delay = 100;
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	617b      	str	r3, [r7, #20]

	for(;;)
	{
		printf("Giving \r\n");
 8000f2c:	4814      	ldr	r0, [pc, #80]	; (8000f80 <giveTask+0x60>)
 8000f2e:	f005 f9f9 	bl	8006324 <puts>
		vTaskDelay(delay/portTICK_PERIOD_MS);
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f003 fe98 	bl	8004c68 <vTaskDelay>
		xTaskNotifyGive(xTaskTakeHandle); //notification
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <giveTask+0x64>)
 8000f3a:	6818      	ldr	r0, [r3, #0]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	2202      	movs	r2, #2
 8000f40:	2100      	movs	r1, #0
 8000f42:	f004 fbc9 	bl	80056d8 <xTaskGenericNotify>

		//xSemaphoreGive(myBinarySem01); //semaphore

		uint8_t timer_value = HAL_GetTick();
 8000f46:	f000 fba9 	bl	800169c <HAL_GetTick>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	73fb      	strb	r3, [r7, #15]

		BaseType_t higher_priority_task_woken = pdFALSE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
		if (xQueueSend(timerQueue,(void *)&timer_value,portMAX_DELAY) != pdPASS){
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <giveTask+0x68>)
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	f107 010f 	add.w	r1, r7, #15
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f62:	f003 f9e9 	bl	8004338 <xQueueGenericSend>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d002      	beq.n	8000f72 <giveTask+0x52>
			printf("Failed to send data to queue\r\n");
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <giveTask+0x6c>)
 8000f6e:	f005 f9d9 	bl	8006324 <puts>
		}
		printf("Token given \r\n");
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <giveTask+0x70>)
 8000f74:	f005 f9d6 	bl	8006324 <puts>
		delay = delay + 100;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3364      	adds	r3, #100	; 0x64
 8000f7c:	617b      	str	r3, [r7, #20]
	{
 8000f7e:	e7d5      	b.n	8000f2c <giveTask+0xc>
 8000f80:	08007054 	.word	0x08007054
 8000f84:	200002ec 	.word	0x200002ec
 8000f88:	200002f0 	.word	0x200002f0
 8000f8c:	08007060 	.word	0x08007060
 8000f90:	08007080 	.word	0x08007080

08000f94 <takeTask>:
	}
}
void takeTask(void const * argument)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	{
		/*if(xSemaphoreTake(myBinarySem01,1000) == pdTRUE){
			printf("Took \n \r");
		}*/

		if(ulTaskNotifyTake(pdTRUE,1000))
 8000f9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f004 fb51 	bl	8005648 <ulTaskNotifyTake>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d015      	beq.n	8000fd8 <takeTask+0x44>
		{
			xQueueReceive(timerQueue, (void *)&char_to_process - timer_value,portMAX_DELAY);
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <takeTask+0x50>)
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <takeTask+0x54>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	425b      	negs	r3, r3
 8000fb6:	f107 020f 	add.w	r2, r7, #15
 8000fba:	4413      	add	r3, r2
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f003 fabf 	bl	8004544 <xQueueReceive>
			printf("time took to recieve : %d ms\r\n",char_to_process);
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4808      	ldr	r0, [pc, #32]	; (8000fec <takeTask+0x58>)
 8000fcc:	f005 f944 	bl	8006258 <iprintf>
			printf("Took \r\n");
 8000fd0:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <takeTask+0x5c>)
 8000fd2:	f005 f9a7 	bl	8006324 <puts>
 8000fd6:	e7e1      	b.n	8000f9c <takeTask+0x8>
		}

		else
		{
			printf("Error \r\n");
 8000fd8:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <takeTask+0x60>)
 8000fda:	f005 f9a3 	bl	8006324 <puts>
			HAL_NVIC_SystemReset();
 8000fde:	f000 fc62 	bl	80018a6 <HAL_NVIC_SystemReset>
		if(ulTaskNotifyTake(pdTRUE,1000))
 8000fe2:	e7db      	b.n	8000f9c <takeTask+0x8>
 8000fe4:	200002f0 	.word	0x200002f0
 8000fe8:	200002f4 	.word	0x200002f4
 8000fec:	08007090 	.word	0x08007090
 8000ff0:	080070b0 	.word	0x080070b0
 8000ff4:	080070b8 	.word	0x080070b8

08000ff8 <__io_putchar>:
		}

	}
}

int __io_putchar(int ch) {  //code printf
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001000:	1d39      	adds	r1, r7, #4
 8001002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001006:	2201      	movs	r2, #1
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <__io_putchar+0x20>)
 800100a:	f002 fa5b 	bl	80034c4 <HAL_UART_Transmit>
	return ch;
 800100e:	687b      	ldr	r3, [r7, #4]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000348 	.word	0x20000348

0800101c <main>:
 * @retval int
 */


int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001022:	f000 fb1a 	bl	800165a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001026:	f000 f841 	bl	80010ac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800102a:	f7ff fb13 	bl	8000654 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800102e:	f000 fa39 	bl	80014a4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	myBinarySem01 = xSemaphoreCreateBinary();
 8001032:	2203      	movs	r2, #3
 8001034:	2100      	movs	r1, #0
 8001036:	2001      	movs	r0, #1
 8001038:	f003 f91c 	bl	8004274 <xQueueGenericCreate>
 800103c:	4603      	mov	r3, r0
 800103e:	4a13      	ldr	r2, [pc, #76]	; (800108c <main+0x70>)
 8001040:	6013      	str	r3, [r2, #0]

	timerQueue = xQueueCreate(Q_UART1_LENGTH, Q_UART1_SIZE);
 8001042:	2200      	movs	r2, #0
 8001044:	2101      	movs	r1, #1
 8001046:	200a      	movs	r0, #10
 8001048:	f003 f914 	bl	8004274 <xQueueGenericCreate>
 800104c:	4603      	mov	r3, r0
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <main+0x74>)
 8001050:	6013      	str	r3, [r2, #0]

	xTaskCreate(giveTask,
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <main+0x78>)
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	2301      	movs	r3, #1
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2300      	movs	r3, #0
 800105c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001060:	490d      	ldr	r1, [pc, #52]	; (8001098 <main+0x7c>)
 8001062:	480e      	ldr	r0, [pc, #56]	; (800109c <main+0x80>)
 8001064:	f003 fcc7 	bl	80049f6 <xTaskCreate>
			NULL,
			1,
			&xTaskGiveHandle
	);

	xTaskCreate(takeTask,
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <main+0x84>)
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	2302      	movs	r3, #2
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2300      	movs	r3, #0
 8001072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001076:	490b      	ldr	r1, [pc, #44]	; (80010a4 <main+0x88>)
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <main+0x8c>)
 800107a:	f003 fcbc 	bl	80049f6 <xTaskCreate>
			NULL,
			2,
			&xTaskTakeHandle
	);

	vTaskStartScheduler();
 800107e:	f003 fe29 	bl	8004cd4 <vTaskStartScheduler>


	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8001082:	f7ff faad 	bl	80005e0 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001086:	f002 febc 	bl	8003e02 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800108a:	e7fe      	b.n	800108a <main+0x6e>
 800108c:	200002e4 	.word	0x200002e4
 8001090:	200002f0 	.word	0x200002f0
 8001094:	200002e8 	.word	0x200002e8
 8001098:	080070c0 	.word	0x080070c0
 800109c:	08000f21 	.word	0x08000f21
 80010a0:	200002ec 	.word	0x200002ec
 80010a4:	080070c8 	.word	0x080070c8
 80010a8:	08000f95 	.word	0x08000f95

080010ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b094      	sub	sp, #80	; 0x50
 80010b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	2230      	movs	r2, #48	; 0x30
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f005 fa12 	bl	80064e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	4b2a      	ldr	r3, [pc, #168]	; (800117c <SystemClock_Config+0xd0>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	4a29      	ldr	r2, [pc, #164]	; (800117c <SystemClock_Config+0xd0>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010da:	6413      	str	r3, [r2, #64]	; 0x40
 80010dc:	4b27      	ldr	r3, [pc, #156]	; (800117c <SystemClock_Config+0xd0>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e8:	4b25      	ldr	r3, [pc, #148]	; (8001180 <SystemClock_Config+0xd4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a24      	ldr	r2, [pc, #144]	; (8001180 <SystemClock_Config+0xd4>)
 80010ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b22      	ldr	r3, [pc, #136]	; (8001180 <SystemClock_Config+0xd4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001108:	2310      	movs	r3, #16
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110c:	2302      	movs	r3, #2
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001110:	2300      	movs	r3, #0
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001114:	2308      	movs	r3, #8
 8001116:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001118:	23d8      	movs	r3, #216	; 0xd8
 800111a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800111c:	2302      	movs	r3, #2
 800111e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001120:	2302      	movs	r3, #2
 8001122:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 0320 	add.w	r3, r7, #32
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fdf1 	bl	8001d10 <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8001134:	f000 f838 	bl	80011a8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001138:	f000 fd9a 	bl	8001c70 <HAL_PWREx_EnableOverDrive>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8001142:	f000 f831 	bl	80011a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001146:	230f      	movs	r3, #15
 8001148:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114a:	2302      	movs	r3, #2
 800114c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001152:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001156:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	2107      	movs	r1, #7
 8001164:	4618      	mov	r0, r3
 8001166:	f001 f877 	bl	8002258 <HAL_RCC_ClockConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8001170:	f000 f81a 	bl	80011a8 <Error_Handler>
	}
}
 8001174:	bf00      	nop
 8001176:	3750      	adds	r7, #80	; 0x50
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	40007000 	.word	0x40007000

08001184 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001196:	f000 fa6d 	bl	8001674 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40001000 	.word	0x40001000

080011a8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011b0:	e7fe      	b.n	80011b0 <Error_Handler+0x8>
	...

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_MspInit+0x4c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <HAL_MspInit+0x4c>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_MspInit+0x4c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_MspInit+0x4c>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_MspInit+0x4c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	210f      	movs	r1, #15
 80011ee:	f06f 0001 	mvn.w	r0, #1
 80011f2:	f000 fb2e 	bl	8001852 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800

08001204 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001214:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <HAL_InitTick+0xe0>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a32      	ldr	r2, [pc, #200]	; (80012e4 <HAL_InitTick+0xe0>)
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <HAL_InitTick+0xe0>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800122c:	f107 0210 	add.w	r2, r7, #16
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f001 f9f4 	bl	8002624 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001242:	2b00      	cmp	r3, #0
 8001244:	d103      	bne.n	800124e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001246:	f001 f9c5 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 800124a:	6378      	str	r0, [r7, #52]	; 0x34
 800124c:	e004      	b.n	8001258 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800124e:	f001 f9c1 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8001252:	4603      	mov	r3, r0
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125a:	4a23      	ldr	r2, [pc, #140]	; (80012e8 <HAL_InitTick+0xe4>)
 800125c:	fba2 2303 	umull	r2, r3, r2, r3
 8001260:	0c9b      	lsrs	r3, r3, #18
 8001262:	3b01      	subs	r3, #1
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <HAL_InitTick+0xe8>)
 8001268:	4a21      	ldr	r2, [pc, #132]	; (80012f0 <HAL_InitTick+0xec>)
 800126a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <HAL_InitTick+0xe8>)
 800126e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001272:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001274:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <HAL_InitTick+0xe8>)
 8001276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001278:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <HAL_InitTick+0xe8>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <HAL_InitTick+0xe8>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HAL_InitTick+0xe8>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800128c:	4817      	ldr	r0, [pc, #92]	; (80012ec <HAL_InitTick+0xe8>)
 800128e:	f001 fdeb 	bl	8002e68 <HAL_TIM_Base_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001298:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800129c:	2b00      	cmp	r3, #0
 800129e:	d11b      	bne.n	80012d8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012a0:	4812      	ldr	r0, [pc, #72]	; (80012ec <HAL_InitTick+0xe8>)
 80012a2:	f001 fe43 	bl	8002f2c <HAL_TIM_Base_Start_IT>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d111      	bne.n	80012d8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012b4:	2036      	movs	r0, #54	; 0x36
 80012b6:	f000 fae8 	bl	800188a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d808      	bhi.n	80012d2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	2036      	movs	r0, #54	; 0x36
 80012c6:	f000 fac4 	bl	8001852 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <HAL_InitTick+0xf0>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	e002      	b.n	80012d8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3738      	adds	r7, #56	; 0x38
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	431bde83 	.word	0x431bde83
 80012ec:	200002f8 	.word	0x200002f8
 80012f0:	40001000 	.word	0x40001000
 80012f4:	20000004 	.word	0x20000004

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012fc:	e7fe      	b.n	80012fc <NMI_Handler+0x4>

080012fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler+0x4>

0800130a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler+0x4>

08001316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <TIM6_DAC_IRQHandler+0x10>)
 800132a:	f001 fe77 	bl	800301c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200002f8 	.word	0x200002f8

08001338 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	e00a      	b.n	8001360 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800134a:	f3af 8000 	nop.w
 800134e:	4601      	mov	r1, r0
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	60ba      	str	r2, [r7, #8]
 8001356:	b2ca      	uxtb	r2, r1
 8001358:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbf0      	blt.n	800134a <_read+0x12>
  }

  return len;
 8001368:	687b      	ldr	r3, [r7, #4]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	e009      	b.n	8001398 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	60ba      	str	r2, [r7, #8]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe33 	bl	8000ff8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	dbf1      	blt.n	8001384 <_write+0x12>
  }
  return len;
 80013a0:	687b      	ldr	r3, [r7, #4]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <_close>:

int _close(int file)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d2:	605a      	str	r2, [r3, #4]
  return 0;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <_isatty>:

int _isatty(int file)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800141c:	4a14      	ldr	r2, [pc, #80]	; (8001470 <_sbrk+0x5c>)
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <_sbrk+0x60>)
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <_sbrk+0x64>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <_sbrk+0x68>)
 8001434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	429a      	cmp	r2, r3
 8001442:	d207      	bcs.n	8001454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001444:	f005 f89c 	bl	8006580 <__errno>
 8001448:	4603      	mov	r3, r0
 800144a:	220c      	movs	r2, #12
 800144c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001452:	e009      	b.n	8001468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <_sbrk+0x64>)
 8001464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20050000 	.word	0x20050000
 8001474:	00000400 	.word	0x00000400
 8001478:	20000344 	.word	0x20000344
 800147c:	20004270 	.word	0x20004270

08001480 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <SystemInit+0x20>)
 8001486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <SystemInit+0x20>)
 800148c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014aa:	4a15      	ldr	r2, [pc, #84]	; (8001500 <MX_USART1_UART_Init+0x5c>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014e8:	f001 ff9e 	bl	8003428 <HAL_UART_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014f2:	f7ff fe59 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000348 	.word	0x20000348
 8001500:	40011000 	.word	0x40011000

08001504 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b0ac      	sub	sp, #176	; 0xb0
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800151c:	f107 0318 	add.w	r3, r7, #24
 8001520:	2284      	movs	r2, #132	; 0x84
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f004 ffdd 	bl	80064e4 <memset>
  if(uartHandle->Instance==USART1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a32      	ldr	r2, [pc, #200]	; (80015f8 <HAL_UART_MspInit+0xf4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d15c      	bne.n	80015ee <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001534:	2340      	movs	r3, #64	; 0x40
 8001536:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001538:	2300      	movs	r3, #0
 800153a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153c:	f107 0318 	add.w	r3, r7, #24
 8001540:	4618      	mov	r0, r3
 8001542:	f001 f8a1 	bl	8002688 <HAL_RCCEx_PeriphCLKConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800154c:	f7ff fe2c 	bl	80011a8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001550:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <HAL_UART_MspInit+0xf8>)
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	4a29      	ldr	r2, [pc, #164]	; (80015fc <HAL_UART_MspInit+0xf8>)
 8001556:	f043 0310 	orr.w	r3, r3, #16
 800155a:	6453      	str	r3, [r2, #68]	; 0x44
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <HAL_UART_MspInit+0xf8>)
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_UART_MspInit+0xf8>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	4a23      	ldr	r2, [pc, #140]	; (80015fc <HAL_UART_MspInit+0xf8>)
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	6313      	str	r3, [r2, #48]	; 0x30
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_UART_MspInit+0xf8>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <HAL_UART_MspInit+0xf8>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <HAL_UART_MspInit+0xf8>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6313      	str	r3, [r2, #48]	; 0x30
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_UART_MspInit+0xf8>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b0:	2307      	movs	r3, #7
 80015b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015ba:	4619      	mov	r1, r3
 80015bc:	4810      	ldr	r0, [pc, #64]	; (8001600 <HAL_UART_MspInit+0xfc>)
 80015be:	f000 f977 	bl	80018b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80015c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015dc:	2307      	movs	r3, #7
 80015de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015e6:	4619      	mov	r1, r3
 80015e8:	4806      	ldr	r0, [pc, #24]	; (8001604 <HAL_UART_MspInit+0x100>)
 80015ea:	f000 f961 	bl	80018b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015ee:	bf00      	nop
 80015f0:	37b0      	adds	r7, #176	; 0xb0
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40011000 	.word	0x40011000
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020400 	.word	0x40020400
 8001604:	40020000 	.word	0x40020000

08001608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800160e:	490e      	ldr	r1, [pc, #56]	; (8001648 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001610:	4a0e      	ldr	r2, [pc, #56]	; (800164c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001624:	4c0b      	ldr	r4, [pc, #44]	; (8001654 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001632:	f7ff ff25 	bl	8001480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001636:	f004 ffa9 	bl	800658c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163a:	f7ff fcef 	bl	800101c <main>
  bx  lr    
 800163e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001640:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800164c:	08007134 	.word	0x08007134
  ldr r2, =_sbss
 8001650:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001654:	2000426c 	.word	0x2000426c

08001658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC_IRQHandler>

0800165a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165e:	2003      	movs	r0, #3
 8001660:	f000 f8ec 	bl	800183c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001664:	200f      	movs	r0, #15
 8001666:	f7ff fdcd 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166a:	f7ff fda3 	bl	80011b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_IncTick+0x20>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_IncTick+0x24>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <HAL_IncTick+0x24>)
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000008 	.word	0x20000008
 8001698:	200003d0 	.word	0x200003d0

0800169c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <HAL_GetTick+0x14>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	200003d0 	.word	0x200003d0

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <__NVIC_SetPriorityGrouping+0x40>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <__NVIC_SetPriorityGrouping+0x40>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00
 80016f8:	05fa0000 	.word	0x05fa0000

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db0b      	blt.n	8001742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4907      	ldr	r1, [pc, #28]	; (8001750 <__NVIC_EnableIRQ+0x38>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	; (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	; (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001814:	f3bf 8f4f 	dsb	sy
}
 8001818:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <__NVIC_SystemReset+0x24>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001822:	4904      	ldr	r1, [pc, #16]	; (8001834 <__NVIC_SystemReset+0x24>)
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <__NVIC_SystemReset+0x28>)
 8001826:	4313      	orrs	r3, r2
 8001828:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800182a:	f3bf 8f4f 	dsb	sy
}
 800182e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <__NVIC_SystemReset+0x20>
 8001834:	e000ed00 	.word	0xe000ed00
 8001838:	05fa0004 	.word	0x05fa0004

0800183c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff35 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff4a 	bl	80016fc <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff9a 	bl	80017a8 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff69 	bl	8001754 <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff3d 	bl	8001718 <__NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80018aa:	f7ff ffb1 	bl	8001810 <__NVIC_SystemReset>
	...

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	e175      	b.n	8001bbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018d0:	2201      	movs	r2, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f040 8164 	bne.w	8001bb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d005      	beq.n	8001906 <HAL_GPIO_Init+0x56>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d130      	bne.n	8001968 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800193c:	2201      	movs	r2, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 0201 	and.w	r2, r3, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b03      	cmp	r3, #3
 8001972:	d017      	beq.n	80019a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d123      	bne.n	80019f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	08da      	lsrs	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3208      	adds	r2, #8
 80019b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	220f      	movs	r2, #15
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	08da      	lsrs	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3208      	adds	r2, #8
 80019f2:	69b9      	ldr	r1, [r7, #24]
 80019f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0203 	and.w	r2, r3, #3
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80be 	beq.w	8001bb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <HAL_GPIO_Init+0x324>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a65      	ldr	r2, [pc, #404]	; (8001bd4 <HAL_GPIO_Init+0x324>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b63      	ldr	r3, [pc, #396]	; (8001bd4 <HAL_GPIO_Init+0x324>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a52:	4a61      	ldr	r2, [pc, #388]	; (8001bd8 <HAL_GPIO_Init+0x328>)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a58      	ldr	r2, [pc, #352]	; (8001bdc <HAL_GPIO_Init+0x32c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d037      	beq.n	8001aee <HAL_GPIO_Init+0x23e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a57      	ldr	r2, [pc, #348]	; (8001be0 <HAL_GPIO_Init+0x330>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d031      	beq.n	8001aea <HAL_GPIO_Init+0x23a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a56      	ldr	r2, [pc, #344]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d02b      	beq.n	8001ae6 <HAL_GPIO_Init+0x236>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a55      	ldr	r2, [pc, #340]	; (8001be8 <HAL_GPIO_Init+0x338>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d025      	beq.n	8001ae2 <HAL_GPIO_Init+0x232>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a54      	ldr	r2, [pc, #336]	; (8001bec <HAL_GPIO_Init+0x33c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d01f      	beq.n	8001ade <HAL_GPIO_Init+0x22e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a53      	ldr	r2, [pc, #332]	; (8001bf0 <HAL_GPIO_Init+0x340>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d019      	beq.n	8001ada <HAL_GPIO_Init+0x22a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <HAL_GPIO_Init+0x344>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_GPIO_Init+0x226>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a51      	ldr	r2, [pc, #324]	; (8001bf8 <HAL_GPIO_Init+0x348>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_GPIO_Init+0x222>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a50      	ldr	r2, [pc, #320]	; (8001bfc <HAL_GPIO_Init+0x34c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d007      	beq.n	8001ace <HAL_GPIO_Init+0x21e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4f      	ldr	r2, [pc, #316]	; (8001c00 <HAL_GPIO_Init+0x350>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_GPIO_Init+0x21a>
 8001ac6:	2309      	movs	r3, #9
 8001ac8:	e012      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001aca:	230a      	movs	r3, #10
 8001acc:	e010      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001ace:	2308      	movs	r3, #8
 8001ad0:	e00e      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	e00c      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001ad6:	2306      	movs	r3, #6
 8001ad8:	e00a      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001ada:	2305      	movs	r3, #5
 8001adc:	e008      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001ade:	2304      	movs	r3, #4
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e004      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e002      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001aee:	2300      	movs	r3, #0
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	f002 0203 	and.w	r2, r2, #3
 8001af6:	0092      	lsls	r2, r2, #2
 8001af8:	4093      	lsls	r3, r2
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b00:	4935      	ldr	r1, [pc, #212]	; (8001bd8 <HAL_GPIO_Init+0x328>)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	3302      	adds	r3, #2
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_GPIO_Init+0x354>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b32:	4a34      	ldr	r2, [pc, #208]	; (8001c04 <HAL_GPIO_Init+0x354>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b38:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <HAL_GPIO_Init+0x354>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b5c:	4a29      	ldr	r2, [pc, #164]	; (8001c04 <HAL_GPIO_Init+0x354>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b62:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_GPIO_Init+0x354>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b86:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <HAL_GPIO_Init+0x354>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_GPIO_Init+0x354>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb0:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <HAL_GPIO_Init+0x354>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2b0f      	cmp	r3, #15
 8001bc0:	f67f ae86 	bls.w	80018d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	3724      	adds	r7, #36	; 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40013800 	.word	0x40013800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40020800 	.word	0x40020800
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40021400 	.word	0x40021400
 8001bf4:	40021800 	.word	0x40021800
 8001bf8:	40021c00 	.word	0x40021c00
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	40022400 	.word	0x40022400
 8001c04:	40013c00 	.word	0x40013c00

08001c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
 8001c14:	4613      	mov	r3, r2
 8001c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c24:	e003      	b.n	8001c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	041a      	lsls	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	619a      	str	r2, [r3, #24]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c4c:	887a      	ldrh	r2, [r7, #2]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	041a      	lsls	r2, r3, #16
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	887b      	ldrh	r3, [r7, #2]
 8001c5a:	400b      	ands	r3, r1
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	619a      	str	r2, [r3, #24]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a22      	ldr	r2, [pc, #136]	; (8001d08 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c92:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c9e:	f7ff fcfd 	bl	800169c <HAL_GetTick>
 8001ca2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ca4:	e009      	b.n	8001cba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ca6:	f7ff fcf9 	bl	800169c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cb4:	d901      	bls.n	8001cba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e022      	b.n	8001d00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc6:	d1ee      	bne.n	8001ca6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001cc8:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0f      	ldr	r2, [pc, #60]	; (8001d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cd4:	f7ff fce2 	bl	800169c <HAL_GetTick>
 8001cd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cda:	e009      	b.n	8001cf0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cdc:	f7ff fcde 	bl	800169c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cea:	d901      	bls.n	8001cf0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e007      	b.n	8001d00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cfc:	d1ee      	bne.n	8001cdc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40007000 	.word	0x40007000

08001d10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e291      	b.n	800224a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 8087 	beq.w	8001e42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d34:	4b96      	ldr	r3, [pc, #600]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d00c      	beq.n	8001d5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d40:	4b93      	ldr	r3, [pc, #588]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d112      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62>
 8001d4c:	4b90      	ldr	r3, [pc, #576]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d58:	d10b      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5a:	4b8d      	ldr	r3, [pc, #564]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d06c      	beq.n	8001e40 <HAL_RCC_OscConfig+0x130>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d168      	bne.n	8001e40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e26b      	b.n	800224a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x7a>
 8001d7c:	4b84      	ldr	r3, [pc, #528]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a83      	ldr	r2, [pc, #524]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	e02e      	b.n	8001de8 <HAL_RCC_OscConfig+0xd8>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x9c>
 8001d92:	4b7f      	ldr	r3, [pc, #508]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a7e      	ldr	r2, [pc, #504]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b7c      	ldr	r3, [pc, #496]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7b      	ldr	r2, [pc, #492]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e01d      	b.n	8001de8 <HAL_RCC_OscConfig+0xd8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0xc0>
 8001db6:	4b76      	ldr	r3, [pc, #472]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a75      	ldr	r2, [pc, #468]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b73      	ldr	r3, [pc, #460]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a72      	ldr	r2, [pc, #456]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0xd8>
 8001dd0:	4b6f      	ldr	r3, [pc, #444]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a6e      	ldr	r2, [pc, #440]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b6c      	ldr	r3, [pc, #432]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a6b      	ldr	r2, [pc, #428]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff fc54 	bl	800169c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff fc50 	bl	800169c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e21f      	b.n	800224a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	4b61      	ldr	r3, [pc, #388]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0xe8>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff fc40 	bl	800169c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff fc3c 	bl	800169c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e20b      	b.n	800224a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e32:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x110>
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d069      	beq.n	8001f22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e4e:	4b50      	ldr	r3, [pc, #320]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00b      	beq.n	8001e72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e5a:	4b4d      	ldr	r3, [pc, #308]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d11c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x190>
 8001e66:	4b4a      	ldr	r3, [pc, #296]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d116      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d005      	beq.n	8001e8a <HAL_RCC_OscConfig+0x17a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e1df      	b.n	800224a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8a:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	493d      	ldr	r1, [pc, #244]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9e:	e040      	b.n	8001f22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d023      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea8:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a38      	ldr	r2, [pc, #224]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fbf2 	bl	800169c <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ebc:	f7ff fbee 	bl	800169c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e1bd      	b.n	800224a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ece:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eda:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4929      	ldr	r1, [pc, #164]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
 8001eee:	e018      	b.n	8001f22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef0:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a26      	ldr	r2, [pc, #152]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001ef6:	f023 0301 	bic.w	r3, r3, #1
 8001efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff fbce 	bl	800169c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f04:	f7ff fbca 	bl	800169c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e199      	b.n	800224a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d038      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d019      	beq.n	8001f6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3a:	4a15      	ldr	r2, [pc, #84]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7ff fbab 	bl	800169c <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4a:	f7ff fba7 	bl	800169c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e176      	b.n	800224a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x23a>
 8001f68:	e01a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f6e:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f76:	f7ff fb91 	bl	800169c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7e:	f7ff fb8d 	bl	800169c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d903      	bls.n	8001f94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e15c      	b.n	800224a <HAL_RCC_OscConfig+0x53a>
 8001f90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8001f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80a4 	beq.w	80020f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b8b      	ldr	r3, [pc, #556]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10d      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b88      	ldr	r3, [pc, #544]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a87      	ldr	r2, [pc, #540]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc6:	4b85      	ldr	r3, [pc, #532]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd6:	4b82      	ldr	r3, [pc, #520]	; (80021e0 <HAL_RCC_OscConfig+0x4d0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d118      	bne.n	8002014 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fe2:	4b7f      	ldr	r3, [pc, #508]	; (80021e0 <HAL_RCC_OscConfig+0x4d0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7e      	ldr	r2, [pc, #504]	; (80021e0 <HAL_RCC_OscConfig+0x4d0>)
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fee:	f7ff fb55 	bl	800169c <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff6:	f7ff fb51 	bl	800169c <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b64      	cmp	r3, #100	; 0x64
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e120      	b.n	800224a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002008:	4b75      	ldr	r3, [pc, #468]	; (80021e0 <HAL_RCC_OscConfig+0x4d0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x31a>
 800201c:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002020:	4a6e      	ldr	r2, [pc, #440]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6713      	str	r3, [r2, #112]	; 0x70
 8002028:	e02d      	b.n	8002086 <HAL_RCC_OscConfig+0x376>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x33c>
 8002032:	4b6a      	ldr	r3, [pc, #424]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002036:	4a69      	ldr	r2, [pc, #420]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6713      	str	r3, [r2, #112]	; 0x70
 800203e:	4b67      	ldr	r3, [pc, #412]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	4a66      	ldr	r2, [pc, #408]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	6713      	str	r3, [r2, #112]	; 0x70
 800204a:	e01c      	b.n	8002086 <HAL_RCC_OscConfig+0x376>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d10c      	bne.n	800206e <HAL_RCC_OscConfig+0x35e>
 8002054:	4b61      	ldr	r3, [pc, #388]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002058:	4a60      	ldr	r2, [pc, #384]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	6713      	str	r3, [r2, #112]	; 0x70
 8002060:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	4a5d      	ldr	r2, [pc, #372]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6713      	str	r3, [r2, #112]	; 0x70
 800206c:	e00b      	b.n	8002086 <HAL_RCC_OscConfig+0x376>
 800206e:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	4a5a      	ldr	r2, [pc, #360]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	6713      	str	r3, [r2, #112]	; 0x70
 800207a:	4b58      	ldr	r3, [pc, #352]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207e:	4a57      	ldr	r2, [pc, #348]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8002080:	f023 0304 	bic.w	r3, r3, #4
 8002084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d015      	beq.n	80020ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7ff fb05 	bl	800169c <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7ff fb01 	bl	800169c <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e0ce      	b.n	800224a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ac:	4b4b      	ldr	r3, [pc, #300]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ee      	beq.n	8002096 <HAL_RCC_OscConfig+0x386>
 80020b8:	e014      	b.n	80020e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ba:	f7ff faef 	bl	800169c <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7ff faeb 	bl	800169c <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e0b8      	b.n	800224a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d8:	4b40      	ldr	r3, [pc, #256]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ee      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020e4:	7dfb      	ldrb	r3, [r7, #23]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d105      	bne.n	80020f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ea:	4b3c      	ldr	r3, [pc, #240]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a3b      	ldr	r2, [pc, #236]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 80020f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80a4 	beq.w	8002248 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002100:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b08      	cmp	r3, #8
 800210a:	d06b      	beq.n	80021e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d149      	bne.n	80021a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002114:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a30      	ldr	r2, [pc, #192]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 800211a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800211e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7ff fabc 	bl	800169c <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002128:	f7ff fab8 	bl	800169c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e087      	b.n	800224a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213a:	4b28      	ldr	r3, [pc, #160]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	019b      	lsls	r3, r3, #6
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	3b01      	subs	r3, #1
 8002160:	041b      	lsls	r3, r3, #16
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	061b      	lsls	r3, r3, #24
 800216a:	4313      	orrs	r3, r2
 800216c:	4a1b      	ldr	r2, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 800216e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002172:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a18      	ldr	r2, [pc, #96]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7ff fa8c 	bl	800169c <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002188:	f7ff fa88 	bl	800169c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e057      	b.n	800224a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x478>
 80021a6:	e04f      	b.n	8002248 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 80021ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fa72 	bl	800169c <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7ff fa6e 	bl	800169c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e03d      	b.n	800224a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ce:	4b03      	ldr	r3, [pc, #12]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x4ac>
 80021da:	e035      	b.n	8002248 <HAL_RCC_OscConfig+0x538>
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_RCC_OscConfig+0x544>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d028      	beq.n	8002244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d121      	bne.n	8002244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d11a      	bne.n	8002244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002214:	4013      	ands	r3, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800221a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800221c:	4293      	cmp	r3, r2
 800221e:	d111      	bne.n	8002244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	085b      	lsrs	r3, r3, #1
 800222c:	3b01      	subs	r3, #1
 800222e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d107      	bne.n	8002244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800

08002258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0d0      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002270:	4b6a      	ldr	r3, [pc, #424]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d910      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b67      	ldr	r3, [pc, #412]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 020f 	bic.w	r2, r3, #15
 8002286:	4965      	ldr	r1, [pc, #404]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b63      	ldr	r3, [pc, #396]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0b8      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d020      	beq.n	80022ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b8:	4b59      	ldr	r3, [pc, #356]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4a58      	ldr	r2, [pc, #352]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80022be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022d0:	4b53      	ldr	r3, [pc, #332]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4a52      	ldr	r2, [pc, #328]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80022d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022dc:	4b50      	ldr	r3, [pc, #320]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	494d      	ldr	r1, [pc, #308]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d040      	beq.n	800237c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d107      	bne.n	8002312 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	4b47      	ldr	r3, [pc, #284]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d115      	bne.n	800233a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e07f      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231a:	4b41      	ldr	r3, [pc, #260]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e073      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e06b      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800233a:	4b39      	ldr	r3, [pc, #228]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f023 0203 	bic.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4936      	ldr	r1, [pc, #216]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800234c:	f7ff f9a6 	bl	800169c <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002352:	e00a      	b.n	800236a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002354:	f7ff f9a2 	bl	800169c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e053      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 020c 	and.w	r2, r3, #12
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	429a      	cmp	r2, r3
 800237a:	d1eb      	bne.n	8002354 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800237c:	4b27      	ldr	r3, [pc, #156]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d210      	bcs.n	80023ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b24      	ldr	r3, [pc, #144]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 020f 	bic.w	r2, r3, #15
 8002392:	4922      	ldr	r1, [pc, #136]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b20      	ldr	r3, [pc, #128]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e032      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4916      	ldr	r1, [pc, #88]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d009      	beq.n	80023ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023d6:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	490e      	ldr	r1, [pc, #56]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ea:	f000 f821 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023ee:	4602      	mov	r2, r0
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	490a      	ldr	r1, [pc, #40]	; (8002424 <HAL_RCC_ClockConfig+0x1cc>)
 80023fc:	5ccb      	ldrb	r3, [r1, r3]
 80023fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002402:	4a09      	ldr	r2, [pc, #36]	; (8002428 <HAL_RCC_ClockConfig+0x1d0>)
 8002404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_RCC_ClockConfig+0x1d4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fefa 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023c00 	.word	0x40023c00
 8002420:	40023800 	.word	0x40023800
 8002424:	080070d8 	.word	0x080070d8
 8002428:	20000000 	.word	0x20000000
 800242c:	20000004 	.word	0x20000004

08002430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002434:	b090      	sub	sp, #64	; 0x40
 8002436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	637b      	str	r3, [r7, #52]	; 0x34
 800243c:	2300      	movs	r3, #0
 800243e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002440:	2300      	movs	r3, #0
 8002442:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002448:	4b59      	ldr	r3, [pc, #356]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	d00d      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x40>
 8002454:	2b08      	cmp	r3, #8
 8002456:	f200 80a1 	bhi.w	800259c <HAL_RCC_GetSysClockFreq+0x16c>
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x34>
 800245e:	2b04      	cmp	r3, #4
 8002460:	d003      	beq.n	800246a <HAL_RCC_GetSysClockFreq+0x3a>
 8002462:	e09b      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002464:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002466:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002468:	e09b      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800246a:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800246c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800246e:	e098      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002470:	4b4f      	ldr	r3, [pc, #316]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002478:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800247a:	4b4d      	ldr	r3, [pc, #308]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d028      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002486:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	099b      	lsrs	r3, r3, #6
 800248c:	2200      	movs	r2, #0
 800248e:	623b      	str	r3, [r7, #32]
 8002490:	627a      	str	r2, [r7, #36]	; 0x24
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002498:	2100      	movs	r1, #0
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800249c:	fb03 f201 	mul.w	r2, r3, r1
 80024a0:	2300      	movs	r3, #0
 80024a2:	fb00 f303 	mul.w	r3, r0, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	4a43      	ldr	r2, [pc, #268]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80024aa:	fba0 1202 	umull	r1, r2, r0, r2
 80024ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024b0:	460a      	mov	r2, r1
 80024b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80024b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b6:	4413      	add	r3, r2
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024bc:	2200      	movs	r2, #0
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	61fa      	str	r2, [r7, #28]
 80024c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024ca:	f7fd fef1 	bl	80002b0 <__aeabi_uldivmod>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4613      	mov	r3, r2
 80024d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d6:	e053      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d8:	4b35      	ldr	r3, [pc, #212]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	2200      	movs	r2, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	617a      	str	r2, [r7, #20]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024ea:	f04f 0b00 	mov.w	fp, #0
 80024ee:	4652      	mov	r2, sl
 80024f0:	465b      	mov	r3, fp
 80024f2:	f04f 0000 	mov.w	r0, #0
 80024f6:	f04f 0100 	mov.w	r1, #0
 80024fa:	0159      	lsls	r1, r3, #5
 80024fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002500:	0150      	lsls	r0, r2, #5
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	ebb2 080a 	subs.w	r8, r2, sl
 800250a:	eb63 090b 	sbc.w	r9, r3, fp
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800251a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800251e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002522:	ebb2 0408 	subs.w	r4, r2, r8
 8002526:	eb63 0509 	sbc.w	r5, r3, r9
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	00eb      	lsls	r3, r5, #3
 8002534:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002538:	00e2      	lsls	r2, r4, #3
 800253a:	4614      	mov	r4, r2
 800253c:	461d      	mov	r5, r3
 800253e:	eb14 030a 	adds.w	r3, r4, sl
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	eb45 030b 	adc.w	r3, r5, fp
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002556:	4629      	mov	r1, r5
 8002558:	028b      	lsls	r3, r1, #10
 800255a:	4621      	mov	r1, r4
 800255c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002560:	4621      	mov	r1, r4
 8002562:	028a      	lsls	r2, r1, #10
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256a:	2200      	movs	r2, #0
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	60fa      	str	r2, [r7, #12]
 8002570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002574:	f7fd fe9c 	bl	80002b0 <__aeabi_uldivmod>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4613      	mov	r3, r2
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	3301      	adds	r3, #1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002590:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800259a:	e002      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800259e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3740      	adds	r7, #64	; 0x40
 80025a8:	46bd      	mov	sp, r7
 80025aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	00f42400 	.word	0x00f42400
 80025b8:	017d7840 	.word	0x017d7840

080025bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000000 	.word	0x20000000

080025d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025d8:	f7ff fff0 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	0a9b      	lsrs	r3, r3, #10
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4903      	ldr	r1, [pc, #12]	; (80025f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40023800 	.word	0x40023800
 80025f8:	080070e8 	.word	0x080070e8

080025fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002600:	f7ff ffdc 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 8002604:	4602      	mov	r2, r0
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	0b5b      	lsrs	r3, r3, #13
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	4903      	ldr	r1, [pc, #12]	; (8002620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002612:	5ccb      	ldrb	r3, [r1, r3]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40023800 	.word	0x40023800
 8002620:	080070e8 	.word	0x080070e8

08002624 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	220f      	movs	r2, #15
 8002632:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCC_GetClockConfig+0x5c>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0203 	and.w	r2, r3, #3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_RCC_GetClockConfig+0x5c>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_RCC_GetClockConfig+0x5c>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_RCC_GetClockConfig+0x5c>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	08db      	lsrs	r3, r3, #3
 800265e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <HAL_RCC_GetClockConfig+0x60>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 020f 	and.w	r2, r3, #15
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	601a      	str	r2, [r3, #0]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	40023c00 	.word	0x40023c00

08002688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d012      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026b0:	4b69      	ldr	r3, [pc, #420]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4a68      	ldr	r2, [pc, #416]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026ba:	6093      	str	r3, [r2, #8]
 80026bc:	4b66      	ldr	r3, [pc, #408]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c4:	4964      	ldr	r1, [pc, #400]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d017      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026e2:	4b5d      	ldr	r3, [pc, #372]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f0:	4959      	ldr	r1, [pc, #356]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002700:	d101      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002702:	2301      	movs	r3, #1
 8002704:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800270e:	2301      	movs	r3, #1
 8002710:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d017      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800271e:	4b4e      	ldr	r3, [pc, #312]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002724:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	494a      	ldr	r1, [pc, #296]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800273c:	d101      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800273e:	2301      	movs	r3, #1
 8002740:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800274a:	2301      	movs	r3, #1
 800274c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800275a:	2301      	movs	r3, #1
 800275c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 808b 	beq.w	8002882 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800276c:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	4a39      	ldr	r2, [pc, #228]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002776:	6413      	str	r3, [r2, #64]	; 0x40
 8002778:	4b37      	ldr	r3, [pc, #220]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002784:	4b35      	ldr	r3, [pc, #212]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a34      	ldr	r2, [pc, #208]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800278a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002790:	f7fe ff84 	bl	800169c <HAL_GetTick>
 8002794:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002798:	f7fe ff80 	bl	800169c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	; 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e357      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027aa:	4b2c      	ldr	r3, [pc, #176]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027b6:	4b28      	ldr	r3, [pc, #160]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d035      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d02e      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027de:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	4a1a      	ldr	r2, [pc, #104]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027f6:	4a18      	ldr	r2, [pc, #96]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027fc:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d114      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe ff48 	bl	800169c <HAL_GetTick>
 800280c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280e:	e00a      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002810:	f7fe ff44 	bl	800169c <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e319      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0ee      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800283e:	d111      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800284e:	400b      	ands	r3, r1
 8002850:	4901      	ldr	r1, [pc, #4]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
 8002856:	e00b      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002858:	40023800 	.word	0x40023800
 800285c:	40007000 	.word	0x40007000
 8002860:	0ffffcff 	.word	0x0ffffcff
 8002864:	4baa      	ldr	r3, [pc, #680]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	4aa9      	ldr	r2, [pc, #676]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800286a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800286e:	6093      	str	r3, [r2, #8]
 8002870:	4ba7      	ldr	r3, [pc, #668]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002872:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287c:	49a4      	ldr	r1, [pc, #656]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800287e:	4313      	orrs	r3, r2
 8002880:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	d010      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800288e:	4ba0      	ldr	r3, [pc, #640]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002894:	4a9e      	ldr	r2, [pc, #632]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800289a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800289e:	4b9c      	ldr	r3, [pc, #624]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	4999      	ldr	r1, [pc, #612]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028bc:	4b94      	ldr	r3, [pc, #592]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ca:	4991      	ldr	r1, [pc, #580]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028de:	4b8c      	ldr	r3, [pc, #560]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ec:	4988      	ldr	r1, [pc, #544]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002900:	4b83      	ldr	r3, [pc, #524]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800290e:	4980      	ldr	r1, [pc, #512]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002922:	4b7b      	ldr	r3, [pc, #492]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	4977      	ldr	r1, [pc, #476]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002944:	4b72      	ldr	r3, [pc, #456]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	f023 0203 	bic.w	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	496f      	ldr	r1, [pc, #444]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002966:	4b6a      	ldr	r3, [pc, #424]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296c:	f023 020c 	bic.w	r2, r3, #12
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002974:	4966      	ldr	r1, [pc, #408]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002988:	4b61      	ldr	r3, [pc, #388]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	495e      	ldr	r1, [pc, #376]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029aa:	4b59      	ldr	r3, [pc, #356]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	4955      	ldr	r1, [pc, #340]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029cc:	4b50      	ldr	r3, [pc, #320]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	494d      	ldr	r1, [pc, #308]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029ee:	4b48      	ldr	r3, [pc, #288]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	4944      	ldr	r1, [pc, #272]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a10:	4b3f      	ldr	r3, [pc, #252]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	493c      	ldr	r1, [pc, #240]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a32:	4b37      	ldr	r3, [pc, #220]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a40:	4933      	ldr	r1, [pc, #204]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a54:	4b2e      	ldr	r3, [pc, #184]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a62:	492b      	ldr	r1, [pc, #172]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d011      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a76:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a84:	4922      	ldr	r1, [pc, #136]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a94:	d101      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a96:	2301      	movs	r3, #1
 8002a98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac4:	4912      	ldr	r1, [pc, #72]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ad8:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ade:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae8:	4909      	ldr	r1, [pc, #36]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d006      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80d9 	beq.w	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b04:	4b02      	ldr	r3, [pc, #8]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a01      	ldr	r2, [pc, #4]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b0e:	e001      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002b10:	40023800 	.word	0x40023800
 8002b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b16:	f7fe fdc1 	bl	800169c <HAL_GetTick>
 8002b1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b1e:	f7fe fdbd 	bl	800169c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b64      	cmp	r3, #100	; 0x64
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e194      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b30:	4b6c      	ldr	r3, [pc, #432]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f0      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d021      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d11d      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b50:	4b64      	ldr	r3, [pc, #400]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b56:	0c1b      	lsrs	r3, r3, #16
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b5e:	4b61      	ldr	r3, [pc, #388]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b64:	0e1b      	lsrs	r3, r3, #24
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	019a      	lsls	r2, r3, #6
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	061b      	lsls	r3, r3, #24
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	071b      	lsls	r3, r3, #28
 8002b84:	4957      	ldr	r1, [pc, #348]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d02e      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb6:	d129      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bb8:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bbe:	0c1b      	lsrs	r3, r3, #16
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bc6:	4b47      	ldr	r3, [pc, #284]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bcc:	0f1b      	lsrs	r3, r3, #28
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	019a      	lsls	r2, r3, #6
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	431a      	orrs	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	071b      	lsls	r3, r3, #28
 8002bec:	493d      	ldr	r1, [pc, #244]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bf4:	4b3b      	ldr	r3, [pc, #236]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bfa:	f023 021f 	bic.w	r2, r3, #31
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	3b01      	subs	r3, #1
 8002c04:	4937      	ldr	r1, [pc, #220]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01d      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c18:	4b32      	ldr	r3, [pc, #200]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1e:	0e1b      	lsrs	r3, r3, #24
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c26:	4b2f      	ldr	r3, [pc, #188]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c2c:	0f1b      	lsrs	r3, r3, #28
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	019a      	lsls	r2, r3, #6
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	041b      	lsls	r3, r3, #16
 8002c40:	431a      	orrs	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	061b      	lsls	r3, r3, #24
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	071b      	lsls	r3, r3, #28
 8002c4c:	4925      	ldr	r1, [pc, #148]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d011      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	019a      	lsls	r2, r3, #6
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	061b      	lsls	r3, r3, #24
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	071b      	lsls	r3, r3, #28
 8002c7c:	4919      	ldr	r1, [pc, #100]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c84:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a16      	ldr	r2, [pc, #88]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c90:	f7fe fd04 	bl	800169c <HAL_GetTick>
 8002c94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c98:	f7fe fd00 	bl	800169c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0d7      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	f040 80cd 	bne.w	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a08      	ldr	r2, [pc, #32]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cca:	f7fe fce7 	bl	800169c <HAL_GetTick>
 8002cce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cd2:	f7fe fce3 	bl	800169c <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b64      	cmp	r3, #100	; 0x64
 8002cde:	d903      	bls.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0ba      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ce4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ce8:	4b5e      	ldr	r3, [pc, #376]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf4:	d0ed      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d02e      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d12a      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d1e:	4b51      	ldr	r3, [pc, #324]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d2c:	4b4d      	ldr	r3, [pc, #308]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	0f1b      	lsrs	r3, r3, #28
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	019a      	lsls	r2, r3, #6
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	041b      	lsls	r3, r3, #16
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	061b      	lsls	r3, r3, #24
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	071b      	lsls	r3, r3, #28
 8002d52:	4944      	ldr	r1, [pc, #272]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d5a:	4b42      	ldr	r3, [pc, #264]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	493d      	ldr	r1, [pc, #244]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d022      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d88:	d11d      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d8a:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d90:	0e1b      	lsrs	r3, r3, #24
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d98:	4b32      	ldr	r3, [pc, #200]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	0f1b      	lsrs	r3, r3, #28
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	019a      	lsls	r2, r3, #6
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	431a      	orrs	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	061b      	lsls	r3, r3, #24
 8002db8:	431a      	orrs	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	071b      	lsls	r3, r3, #28
 8002dbe:	4929      	ldr	r1, [pc, #164]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d028      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dd2:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	0e1b      	lsrs	r3, r3, #24
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002de0:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	0c1b      	lsrs	r3, r3, #16
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	019a      	lsls	r2, r3, #6
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	061b      	lsls	r3, r3, #24
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	071b      	lsls	r3, r3, #28
 8002e06:	4917      	ldr	r1, [pc, #92]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	4911      	ldr	r1, [pc, #68]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0e      	ldr	r2, [pc, #56]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e30:	f7fe fc34 	bl	800169c <HAL_GetTick>
 8002e34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e38:	f7fe fc30 	bl	800169c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e007      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e56:	d1ef      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800

08002e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e049      	b.n	8002f0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f841 	bl	8002f16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	f000 fa00 	bl	80032ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d001      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e054      	b.n	8002fee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a26      	ldr	r2, [pc, #152]	; (8002ffc <HAL_TIM_Base_Start_IT+0xd0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d022      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x80>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6e:	d01d      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x80>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a22      	ldr	r2, [pc, #136]	; (8003000 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d018      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x80>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a21      	ldr	r2, [pc, #132]	; (8003004 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d013      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x80>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1f      	ldr	r2, [pc, #124]	; (8003008 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00e      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x80>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1e      	ldr	r2, [pc, #120]	; (800300c <HAL_TIM_Base_Start_IT+0xe0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d009      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x80>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1c      	ldr	r2, [pc, #112]	; (8003010 <HAL_TIM_Base_Start_IT+0xe4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x80>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1b      	ldr	r2, [pc, #108]	; (8003014 <HAL_TIM_Base_Start_IT+0xe8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d115      	bne.n	8002fd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	4b19      	ldr	r3, [pc, #100]	; (8003018 <HAL_TIM_Base_Start_IT+0xec>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d015      	beq.n	8002fea <HAL_TIM_Base_Start_IT+0xbe>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc4:	d011      	beq.n	8002fea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd6:	e008      	b.n	8002fea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e000      	b.n	8002fec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40010000 	.word	0x40010000
 8003000:	40000400 	.word	0x40000400
 8003004:	40000800 	.word	0x40000800
 8003008:	40000c00 	.word	0x40000c00
 800300c:	40010400 	.word	0x40010400
 8003010:	40014000 	.word	0x40014000
 8003014:	40001800 	.word	0x40001800
 8003018:	00010007 	.word	0x00010007

0800301c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b02      	cmp	r3, #2
 8003030:	d122      	bne.n	8003078 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b02      	cmp	r3, #2
 800303e:	d11b      	bne.n	8003078 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0202 	mvn.w	r2, #2
 8003048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f905 	bl	800326e <HAL_TIM_IC_CaptureCallback>
 8003064:	e005      	b.n	8003072 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8f7 	bl	800325a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f908 	bl	8003282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b04      	cmp	r3, #4
 8003084:	d122      	bne.n	80030cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b04      	cmp	r3, #4
 8003092:	d11b      	bne.n	80030cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0204 	mvn.w	r2, #4
 800309c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2202      	movs	r2, #2
 80030a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f8db 	bl	800326e <HAL_TIM_IC_CaptureCallback>
 80030b8:	e005      	b.n	80030c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f8cd 	bl	800325a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f8de 	bl	8003282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d122      	bne.n	8003120 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d11b      	bne.n	8003120 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0208 	mvn.w	r2, #8
 80030f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2204      	movs	r2, #4
 80030f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f8b1 	bl	800326e <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f8a3 	bl	800325a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f8b4 	bl	8003282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b10      	cmp	r3, #16
 800312c:	d122      	bne.n	8003174 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b10      	cmp	r3, #16
 800313a:	d11b      	bne.n	8003174 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0210 	mvn.w	r2, #16
 8003144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2208      	movs	r2, #8
 800314a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f887 	bl	800326e <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f879 	bl	800325a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f88a 	bl	8003282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b01      	cmp	r3, #1
 8003180:	d10e      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d107      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0201 	mvn.w	r2, #1
 8003198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd fff2 	bl	8001184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	2b80      	cmp	r3, #128	; 0x80
 80031ac:	d10e      	bne.n	80031cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d107      	bne.n	80031cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f91a 	bl	8003400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031da:	d10e      	bne.n	80031fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	2b80      	cmp	r3, #128	; 0x80
 80031e8:	d107      	bne.n	80031fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f90d 	bl	8003414 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	2b40      	cmp	r3, #64	; 0x40
 8003206:	d10e      	bne.n	8003226 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d107      	bne.n	8003226 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800321e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f838 	bl	8003296 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b20      	cmp	r3, #32
 8003232:	d10e      	bne.n	8003252 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b20      	cmp	r3, #32
 8003240:	d107      	bne.n	8003252 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f06f 0220 	mvn.w	r2, #32
 800324a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f8cd 	bl	80033ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a40      	ldr	r2, [pc, #256]	; (80033c0 <TIM_Base_SetConfig+0x114>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d013      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ca:	d00f      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a3d      	ldr	r2, [pc, #244]	; (80033c4 <TIM_Base_SetConfig+0x118>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00b      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a3c      	ldr	r2, [pc, #240]	; (80033c8 <TIM_Base_SetConfig+0x11c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d007      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a3b      	ldr	r2, [pc, #236]	; (80033cc <TIM_Base_SetConfig+0x120>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a3a      	ldr	r2, [pc, #232]	; (80033d0 <TIM_Base_SetConfig+0x124>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d108      	bne.n	80032fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a2f      	ldr	r2, [pc, #188]	; (80033c0 <TIM_Base_SetConfig+0x114>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d02b      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330c:	d027      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a2c      	ldr	r2, [pc, #176]	; (80033c4 <TIM_Base_SetConfig+0x118>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d023      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a2b      	ldr	r2, [pc, #172]	; (80033c8 <TIM_Base_SetConfig+0x11c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01f      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a2a      	ldr	r2, [pc, #168]	; (80033cc <TIM_Base_SetConfig+0x120>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01b      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a29      	ldr	r2, [pc, #164]	; (80033d0 <TIM_Base_SetConfig+0x124>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d017      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a28      	ldr	r2, [pc, #160]	; (80033d4 <TIM_Base_SetConfig+0x128>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a27      	ldr	r2, [pc, #156]	; (80033d8 <TIM_Base_SetConfig+0x12c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00f      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a26      	ldr	r2, [pc, #152]	; (80033dc <TIM_Base_SetConfig+0x130>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00b      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a25      	ldr	r2, [pc, #148]	; (80033e0 <TIM_Base_SetConfig+0x134>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d007      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a24      	ldr	r2, [pc, #144]	; (80033e4 <TIM_Base_SetConfig+0x138>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a23      	ldr	r2, [pc, #140]	; (80033e8 <TIM_Base_SetConfig+0x13c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d108      	bne.n	8003370 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <TIM_Base_SetConfig+0x114>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d003      	beq.n	80033a4 <TIM_Base_SetConfig+0xf8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a0c      	ldr	r2, [pc, #48]	; (80033d0 <TIM_Base_SetConfig+0x124>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d103      	bne.n	80033ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	615a      	str	r2, [r3, #20]
}
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800
 80033cc:	40000c00 	.word	0x40000c00
 80033d0:	40010400 	.word	0x40010400
 80033d4:	40014000 	.word	0x40014000
 80033d8:	40014400 	.word	0x40014400
 80033dc:	40014800 	.word	0x40014800
 80033e0:	40001800 	.word	0x40001800
 80033e4:	40001c00 	.word	0x40001c00
 80033e8:	40002000 	.word	0x40002000

080033ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e040      	b.n	80034bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fe f85a 	bl	8001504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2224      	movs	r2, #36	; 0x24
 8003454:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0201 	bic.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8b0 	bl	80035cc <UART_SetConfig>
 800346c:	4603      	mov	r3, r0
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e022      	b.n	80034bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fb08 	bl	8003a94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fb8f 	bl	8003bd8 <UART_CheckIdleState>
 80034ba:	4603      	mov	r3, r0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	; 0x28
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d171      	bne.n	80035c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_UART_Transmit+0x24>
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e06a      	b.n	80035c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2221      	movs	r2, #33	; 0x21
 80034f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034fa:	f7fe f8cf 	bl	800169c <HAL_GetTick>
 80034fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	88fa      	ldrh	r2, [r7, #6]
 800350c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003518:	d108      	bne.n	800352c <HAL_UART_Transmit+0x68>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d104      	bne.n	800352c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	e003      	b.n	8003534 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003534:	e02c      	b.n	8003590 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2200      	movs	r2, #0
 800353e:	2180      	movs	r1, #128	; 0x80
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 fb80 	bl	8003c46 <UART_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e038      	b.n	80035c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003564:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	3302      	adds	r3, #2
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	e007      	b.n	800357e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	3301      	adds	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1cc      	bne.n	8003536 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2140      	movs	r1, #64	; 0x40
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fb4d 	bl	8003c46 <UART_WaitOnFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e005      	b.n	80035c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3720      	adds	r7, #32
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	4ba6      	ldr	r3, [pc, #664]	; (8003890 <UART_SetConfig+0x2c4>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	6979      	ldr	r1, [r7, #20]
 8003600:	430b      	orrs	r3, r1
 8003602:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	430a      	orrs	r2, r1
 800363c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a94      	ldr	r2, [pc, #592]	; (8003894 <UART_SetConfig+0x2c8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d120      	bne.n	800368a <UART_SetConfig+0xbe>
 8003648:	4b93      	ldr	r3, [pc, #588]	; (8003898 <UART_SetConfig+0x2cc>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	2b03      	cmp	r3, #3
 8003654:	d816      	bhi.n	8003684 <UART_SetConfig+0xb8>
 8003656:	a201      	add	r2, pc, #4	; (adr r2, 800365c <UART_SetConfig+0x90>)
 8003658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365c:	0800366d 	.word	0x0800366d
 8003660:	08003679 	.word	0x08003679
 8003664:	08003673 	.word	0x08003673
 8003668:	0800367f 	.word	0x0800367f
 800366c:	2301      	movs	r3, #1
 800366e:	77fb      	strb	r3, [r7, #31]
 8003670:	e150      	b.n	8003914 <UART_SetConfig+0x348>
 8003672:	2302      	movs	r3, #2
 8003674:	77fb      	strb	r3, [r7, #31]
 8003676:	e14d      	b.n	8003914 <UART_SetConfig+0x348>
 8003678:	2304      	movs	r3, #4
 800367a:	77fb      	strb	r3, [r7, #31]
 800367c:	e14a      	b.n	8003914 <UART_SetConfig+0x348>
 800367e:	2308      	movs	r3, #8
 8003680:	77fb      	strb	r3, [r7, #31]
 8003682:	e147      	b.n	8003914 <UART_SetConfig+0x348>
 8003684:	2310      	movs	r3, #16
 8003686:	77fb      	strb	r3, [r7, #31]
 8003688:	e144      	b.n	8003914 <UART_SetConfig+0x348>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a83      	ldr	r2, [pc, #524]	; (800389c <UART_SetConfig+0x2d0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d132      	bne.n	80036fa <UART_SetConfig+0x12e>
 8003694:	4b80      	ldr	r3, [pc, #512]	; (8003898 <UART_SetConfig+0x2cc>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b0c      	cmp	r3, #12
 80036a0:	d828      	bhi.n	80036f4 <UART_SetConfig+0x128>
 80036a2:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <UART_SetConfig+0xdc>)
 80036a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a8:	080036dd 	.word	0x080036dd
 80036ac:	080036f5 	.word	0x080036f5
 80036b0:	080036f5 	.word	0x080036f5
 80036b4:	080036f5 	.word	0x080036f5
 80036b8:	080036e9 	.word	0x080036e9
 80036bc:	080036f5 	.word	0x080036f5
 80036c0:	080036f5 	.word	0x080036f5
 80036c4:	080036f5 	.word	0x080036f5
 80036c8:	080036e3 	.word	0x080036e3
 80036cc:	080036f5 	.word	0x080036f5
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	080036f5 	.word	0x080036f5
 80036d8:	080036ef 	.word	0x080036ef
 80036dc:	2300      	movs	r3, #0
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e118      	b.n	8003914 <UART_SetConfig+0x348>
 80036e2:	2302      	movs	r3, #2
 80036e4:	77fb      	strb	r3, [r7, #31]
 80036e6:	e115      	b.n	8003914 <UART_SetConfig+0x348>
 80036e8:	2304      	movs	r3, #4
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	e112      	b.n	8003914 <UART_SetConfig+0x348>
 80036ee:	2308      	movs	r3, #8
 80036f0:	77fb      	strb	r3, [r7, #31]
 80036f2:	e10f      	b.n	8003914 <UART_SetConfig+0x348>
 80036f4:	2310      	movs	r3, #16
 80036f6:	77fb      	strb	r3, [r7, #31]
 80036f8:	e10c      	b.n	8003914 <UART_SetConfig+0x348>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a68      	ldr	r2, [pc, #416]	; (80038a0 <UART_SetConfig+0x2d4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d120      	bne.n	8003746 <UART_SetConfig+0x17a>
 8003704:	4b64      	ldr	r3, [pc, #400]	; (8003898 <UART_SetConfig+0x2cc>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800370e:	2b30      	cmp	r3, #48	; 0x30
 8003710:	d013      	beq.n	800373a <UART_SetConfig+0x16e>
 8003712:	2b30      	cmp	r3, #48	; 0x30
 8003714:	d814      	bhi.n	8003740 <UART_SetConfig+0x174>
 8003716:	2b20      	cmp	r3, #32
 8003718:	d009      	beq.n	800372e <UART_SetConfig+0x162>
 800371a:	2b20      	cmp	r3, #32
 800371c:	d810      	bhi.n	8003740 <UART_SetConfig+0x174>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <UART_SetConfig+0x15c>
 8003722:	2b10      	cmp	r3, #16
 8003724:	d006      	beq.n	8003734 <UART_SetConfig+0x168>
 8003726:	e00b      	b.n	8003740 <UART_SetConfig+0x174>
 8003728:	2300      	movs	r3, #0
 800372a:	77fb      	strb	r3, [r7, #31]
 800372c:	e0f2      	b.n	8003914 <UART_SetConfig+0x348>
 800372e:	2302      	movs	r3, #2
 8003730:	77fb      	strb	r3, [r7, #31]
 8003732:	e0ef      	b.n	8003914 <UART_SetConfig+0x348>
 8003734:	2304      	movs	r3, #4
 8003736:	77fb      	strb	r3, [r7, #31]
 8003738:	e0ec      	b.n	8003914 <UART_SetConfig+0x348>
 800373a:	2308      	movs	r3, #8
 800373c:	77fb      	strb	r3, [r7, #31]
 800373e:	e0e9      	b.n	8003914 <UART_SetConfig+0x348>
 8003740:	2310      	movs	r3, #16
 8003742:	77fb      	strb	r3, [r7, #31]
 8003744:	e0e6      	b.n	8003914 <UART_SetConfig+0x348>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a56      	ldr	r2, [pc, #344]	; (80038a4 <UART_SetConfig+0x2d8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d120      	bne.n	8003792 <UART_SetConfig+0x1c6>
 8003750:	4b51      	ldr	r3, [pc, #324]	; (8003898 <UART_SetConfig+0x2cc>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800375a:	2bc0      	cmp	r3, #192	; 0xc0
 800375c:	d013      	beq.n	8003786 <UART_SetConfig+0x1ba>
 800375e:	2bc0      	cmp	r3, #192	; 0xc0
 8003760:	d814      	bhi.n	800378c <UART_SetConfig+0x1c0>
 8003762:	2b80      	cmp	r3, #128	; 0x80
 8003764:	d009      	beq.n	800377a <UART_SetConfig+0x1ae>
 8003766:	2b80      	cmp	r3, #128	; 0x80
 8003768:	d810      	bhi.n	800378c <UART_SetConfig+0x1c0>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <UART_SetConfig+0x1a8>
 800376e:	2b40      	cmp	r3, #64	; 0x40
 8003770:	d006      	beq.n	8003780 <UART_SetConfig+0x1b4>
 8003772:	e00b      	b.n	800378c <UART_SetConfig+0x1c0>
 8003774:	2300      	movs	r3, #0
 8003776:	77fb      	strb	r3, [r7, #31]
 8003778:	e0cc      	b.n	8003914 <UART_SetConfig+0x348>
 800377a:	2302      	movs	r3, #2
 800377c:	77fb      	strb	r3, [r7, #31]
 800377e:	e0c9      	b.n	8003914 <UART_SetConfig+0x348>
 8003780:	2304      	movs	r3, #4
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e0c6      	b.n	8003914 <UART_SetConfig+0x348>
 8003786:	2308      	movs	r3, #8
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e0c3      	b.n	8003914 <UART_SetConfig+0x348>
 800378c:	2310      	movs	r3, #16
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e0c0      	b.n	8003914 <UART_SetConfig+0x348>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a44      	ldr	r2, [pc, #272]	; (80038a8 <UART_SetConfig+0x2dc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d125      	bne.n	80037e8 <UART_SetConfig+0x21c>
 800379c:	4b3e      	ldr	r3, [pc, #248]	; (8003898 <UART_SetConfig+0x2cc>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037aa:	d017      	beq.n	80037dc <UART_SetConfig+0x210>
 80037ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037b0:	d817      	bhi.n	80037e2 <UART_SetConfig+0x216>
 80037b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b6:	d00b      	beq.n	80037d0 <UART_SetConfig+0x204>
 80037b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037bc:	d811      	bhi.n	80037e2 <UART_SetConfig+0x216>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <UART_SetConfig+0x1fe>
 80037c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c6:	d006      	beq.n	80037d6 <UART_SetConfig+0x20a>
 80037c8:	e00b      	b.n	80037e2 <UART_SetConfig+0x216>
 80037ca:	2300      	movs	r3, #0
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e0a1      	b.n	8003914 <UART_SetConfig+0x348>
 80037d0:	2302      	movs	r3, #2
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e09e      	b.n	8003914 <UART_SetConfig+0x348>
 80037d6:	2304      	movs	r3, #4
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e09b      	b.n	8003914 <UART_SetConfig+0x348>
 80037dc:	2308      	movs	r3, #8
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e098      	b.n	8003914 <UART_SetConfig+0x348>
 80037e2:	2310      	movs	r3, #16
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	e095      	b.n	8003914 <UART_SetConfig+0x348>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2f      	ldr	r2, [pc, #188]	; (80038ac <UART_SetConfig+0x2e0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d125      	bne.n	800383e <UART_SetConfig+0x272>
 80037f2:	4b29      	ldr	r3, [pc, #164]	; (8003898 <UART_SetConfig+0x2cc>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003800:	d017      	beq.n	8003832 <UART_SetConfig+0x266>
 8003802:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003806:	d817      	bhi.n	8003838 <UART_SetConfig+0x26c>
 8003808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380c:	d00b      	beq.n	8003826 <UART_SetConfig+0x25a>
 800380e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003812:	d811      	bhi.n	8003838 <UART_SetConfig+0x26c>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <UART_SetConfig+0x254>
 8003818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381c:	d006      	beq.n	800382c <UART_SetConfig+0x260>
 800381e:	e00b      	b.n	8003838 <UART_SetConfig+0x26c>
 8003820:	2301      	movs	r3, #1
 8003822:	77fb      	strb	r3, [r7, #31]
 8003824:	e076      	b.n	8003914 <UART_SetConfig+0x348>
 8003826:	2302      	movs	r3, #2
 8003828:	77fb      	strb	r3, [r7, #31]
 800382a:	e073      	b.n	8003914 <UART_SetConfig+0x348>
 800382c:	2304      	movs	r3, #4
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e070      	b.n	8003914 <UART_SetConfig+0x348>
 8003832:	2308      	movs	r3, #8
 8003834:	77fb      	strb	r3, [r7, #31]
 8003836:	e06d      	b.n	8003914 <UART_SetConfig+0x348>
 8003838:	2310      	movs	r3, #16
 800383a:	77fb      	strb	r3, [r7, #31]
 800383c:	e06a      	b.n	8003914 <UART_SetConfig+0x348>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1b      	ldr	r2, [pc, #108]	; (80038b0 <UART_SetConfig+0x2e4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d138      	bne.n	80038ba <UART_SetConfig+0x2ee>
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <UART_SetConfig+0x2cc>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003852:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003856:	d017      	beq.n	8003888 <UART_SetConfig+0x2bc>
 8003858:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800385c:	d82a      	bhi.n	80038b4 <UART_SetConfig+0x2e8>
 800385e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003862:	d00b      	beq.n	800387c <UART_SetConfig+0x2b0>
 8003864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003868:	d824      	bhi.n	80038b4 <UART_SetConfig+0x2e8>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <UART_SetConfig+0x2aa>
 800386e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003872:	d006      	beq.n	8003882 <UART_SetConfig+0x2b6>
 8003874:	e01e      	b.n	80038b4 <UART_SetConfig+0x2e8>
 8003876:	2300      	movs	r3, #0
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e04b      	b.n	8003914 <UART_SetConfig+0x348>
 800387c:	2302      	movs	r3, #2
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e048      	b.n	8003914 <UART_SetConfig+0x348>
 8003882:	2304      	movs	r3, #4
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e045      	b.n	8003914 <UART_SetConfig+0x348>
 8003888:	2308      	movs	r3, #8
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e042      	b.n	8003914 <UART_SetConfig+0x348>
 800388e:	bf00      	nop
 8003890:	efff69f3 	.word	0xefff69f3
 8003894:	40011000 	.word	0x40011000
 8003898:	40023800 	.word	0x40023800
 800389c:	40004400 	.word	0x40004400
 80038a0:	40004800 	.word	0x40004800
 80038a4:	40004c00 	.word	0x40004c00
 80038a8:	40005000 	.word	0x40005000
 80038ac:	40011400 	.word	0x40011400
 80038b0:	40007800 	.word	0x40007800
 80038b4:	2310      	movs	r3, #16
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e02c      	b.n	8003914 <UART_SetConfig+0x348>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a72      	ldr	r2, [pc, #456]	; (8003a88 <UART_SetConfig+0x4bc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d125      	bne.n	8003910 <UART_SetConfig+0x344>
 80038c4:	4b71      	ldr	r3, [pc, #452]	; (8003a8c <UART_SetConfig+0x4c0>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038d2:	d017      	beq.n	8003904 <UART_SetConfig+0x338>
 80038d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038d8:	d817      	bhi.n	800390a <UART_SetConfig+0x33e>
 80038da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038de:	d00b      	beq.n	80038f8 <UART_SetConfig+0x32c>
 80038e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e4:	d811      	bhi.n	800390a <UART_SetConfig+0x33e>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <UART_SetConfig+0x326>
 80038ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ee:	d006      	beq.n	80038fe <UART_SetConfig+0x332>
 80038f0:	e00b      	b.n	800390a <UART_SetConfig+0x33e>
 80038f2:	2300      	movs	r3, #0
 80038f4:	77fb      	strb	r3, [r7, #31]
 80038f6:	e00d      	b.n	8003914 <UART_SetConfig+0x348>
 80038f8:	2302      	movs	r3, #2
 80038fa:	77fb      	strb	r3, [r7, #31]
 80038fc:	e00a      	b.n	8003914 <UART_SetConfig+0x348>
 80038fe:	2304      	movs	r3, #4
 8003900:	77fb      	strb	r3, [r7, #31]
 8003902:	e007      	b.n	8003914 <UART_SetConfig+0x348>
 8003904:	2308      	movs	r3, #8
 8003906:	77fb      	strb	r3, [r7, #31]
 8003908:	e004      	b.n	8003914 <UART_SetConfig+0x348>
 800390a:	2310      	movs	r3, #16
 800390c:	77fb      	strb	r3, [r7, #31]
 800390e:	e001      	b.n	8003914 <UART_SetConfig+0x348>
 8003910:	2310      	movs	r3, #16
 8003912:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391c:	d15b      	bne.n	80039d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800391e:	7ffb      	ldrb	r3, [r7, #31]
 8003920:	2b08      	cmp	r3, #8
 8003922:	d828      	bhi.n	8003976 <UART_SetConfig+0x3aa>
 8003924:	a201      	add	r2, pc, #4	; (adr r2, 800392c <UART_SetConfig+0x360>)
 8003926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392a:	bf00      	nop
 800392c:	08003951 	.word	0x08003951
 8003930:	08003959 	.word	0x08003959
 8003934:	08003961 	.word	0x08003961
 8003938:	08003977 	.word	0x08003977
 800393c:	08003967 	.word	0x08003967
 8003940:	08003977 	.word	0x08003977
 8003944:	08003977 	.word	0x08003977
 8003948:	08003977 	.word	0x08003977
 800394c:	0800396f 	.word	0x0800396f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003950:	f7fe fe40 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8003954:	61b8      	str	r0, [r7, #24]
        break;
 8003956:	e013      	b.n	8003980 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003958:	f7fe fe50 	bl	80025fc <HAL_RCC_GetPCLK2Freq>
 800395c:	61b8      	str	r0, [r7, #24]
        break;
 800395e:	e00f      	b.n	8003980 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003960:	4b4b      	ldr	r3, [pc, #300]	; (8003a90 <UART_SetConfig+0x4c4>)
 8003962:	61bb      	str	r3, [r7, #24]
        break;
 8003964:	e00c      	b.n	8003980 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003966:	f7fe fd63 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 800396a:	61b8      	str	r0, [r7, #24]
        break;
 800396c:	e008      	b.n	8003980 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800396e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003972:	61bb      	str	r3, [r7, #24]
        break;
 8003974:	e004      	b.n	8003980 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	77bb      	strb	r3, [r7, #30]
        break;
 800397e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d074      	beq.n	8003a70 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	005a      	lsls	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	085b      	lsrs	r3, r3, #1
 8003990:	441a      	add	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	fbb2 f3f3 	udiv	r3, r2, r3
 800399a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2b0f      	cmp	r3, #15
 80039a0:	d916      	bls.n	80039d0 <UART_SetConfig+0x404>
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a8:	d212      	bcs.n	80039d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	f023 030f 	bic.w	r3, r3, #15
 80039b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	b29a      	uxth	r2, r3
 80039c0:	89fb      	ldrh	r3, [r7, #14]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	89fa      	ldrh	r2, [r7, #14]
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	e04f      	b.n	8003a70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	77bb      	strb	r3, [r7, #30]
 80039d4:	e04c      	b.n	8003a70 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039d6:	7ffb      	ldrb	r3, [r7, #31]
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d828      	bhi.n	8003a2e <UART_SetConfig+0x462>
 80039dc:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <UART_SetConfig+0x418>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	08003a09 	.word	0x08003a09
 80039e8:	08003a11 	.word	0x08003a11
 80039ec:	08003a19 	.word	0x08003a19
 80039f0:	08003a2f 	.word	0x08003a2f
 80039f4:	08003a1f 	.word	0x08003a1f
 80039f8:	08003a2f 	.word	0x08003a2f
 80039fc:	08003a2f 	.word	0x08003a2f
 8003a00:	08003a2f 	.word	0x08003a2f
 8003a04:	08003a27 	.word	0x08003a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a08:	f7fe fde4 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8003a0c:	61b8      	str	r0, [r7, #24]
        break;
 8003a0e:	e013      	b.n	8003a38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a10:	f7fe fdf4 	bl	80025fc <HAL_RCC_GetPCLK2Freq>
 8003a14:	61b8      	str	r0, [r7, #24]
        break;
 8003a16:	e00f      	b.n	8003a38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a18:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <UART_SetConfig+0x4c4>)
 8003a1a:	61bb      	str	r3, [r7, #24]
        break;
 8003a1c:	e00c      	b.n	8003a38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1e:	f7fe fd07 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8003a22:	61b8      	str	r0, [r7, #24]
        break;
 8003a24:	e008      	b.n	8003a38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a2a:	61bb      	str	r3, [r7, #24]
        break;
 8003a2c:	e004      	b.n	8003a38 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	77bb      	strb	r3, [r7, #30]
        break;
 8003a36:	bf00      	nop
    }

    if (pclk != 0U)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d018      	beq.n	8003a70 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	085a      	lsrs	r2, r3, #1
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	441a      	add	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b0f      	cmp	r3, #15
 8003a56:	d909      	bls.n	8003a6c <UART_SetConfig+0x4a0>
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5e:	d205      	bcs.n	8003a6c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	e001      	b.n	8003a70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40007c00 	.word	0x40007c00
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	00f42400 	.word	0x00f42400

08003a94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01a      	beq.n	8003baa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b92:	d10a      	bne.n	8003baa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	605a      	str	r2, [r3, #4]
  }
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003be8:	f7fd fd58 	bl	800169c <HAL_GetTick>
 8003bec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d10e      	bne.n	8003c1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f81b 	bl	8003c46 <UART_WaitOnFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e011      	b.n	8003c3e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b09c      	sub	sp, #112	; 0x70
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	603b      	str	r3, [r7, #0]
 8003c52:	4613      	mov	r3, r2
 8003c54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c56:	e0a7      	b.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c5e:	f000 80a3 	beq.w	8003da8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c62:	f7fd fd1b 	bl	800169c <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d302      	bcc.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d13f      	bne.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c8c:	667b      	str	r3, [r7, #100]	; 0x64
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e6      	bne.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3308      	adds	r3, #8
 8003cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	f023 0301 	bic.w	r3, r3, #1
 8003cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cca:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ccc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e5      	bne.n	8003caa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e068      	b.n	8003dca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d050      	beq.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d14:	d148      	bne.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d1e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d40:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e6      	bne.n	8003d20 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3308      	adds	r3, #8
 8003d58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	613b      	str	r3, [r7, #16]
   return(result);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3308      	adds	r3, #8
 8003d70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d72:	623a      	str	r2, [r7, #32]
 8003d74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	69f9      	ldr	r1, [r7, #28]
 8003d78:	6a3a      	ldr	r2, [r7, #32]
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e5      	bne.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e010      	b.n	8003dca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4013      	ands	r3, r2
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	f43f af48 	beq.w	8003c58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3770      	adds	r7, #112	; 0x70
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	4603      	mov	r3, r0
 8003dda:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003de0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003de4:	2b84      	cmp	r3, #132	; 0x84
 8003de6:	d005      	beq.n	8003df4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003de8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	3303      	adds	r3, #3
 8003df2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003df4:	68fb      	ldr	r3, [r7, #12]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e06:	f000 ff65 	bl	8004cd4 <vTaskStartScheduler>
  
  return osOK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e12:	b089      	sub	sp, #36	; 0x24
 8003e14:	af04      	add	r7, sp, #16
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d020      	beq.n	8003e64 <osThreadCreate+0x54>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01c      	beq.n	8003e64 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685c      	ldr	r4, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691e      	ldr	r6, [r3, #16]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff ffc8 	bl	8003dd2 <makeFreeRtosPriority>
 8003e42:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e4c:	9202      	str	r2, [sp, #8]
 8003e4e:	9301      	str	r3, [sp, #4]
 8003e50:	9100      	str	r1, [sp, #0]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	4632      	mov	r2, r6
 8003e56:	4629      	mov	r1, r5
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f000 fd69 	bl	8004930 <xTaskCreateStatic>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	e01c      	b.n	8003e9e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685c      	ldr	r4, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e70:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff ffaa 	bl	8003dd2 <makeFreeRtosPriority>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	f107 030c 	add.w	r3, r7, #12
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	9200      	str	r2, [sp, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	4632      	mov	r2, r6
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f000 fdb1 	bl	80049f6 <xTaskCreate>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d001      	beq.n	8003e9e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e000      	b.n	8003ea0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ea8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <osDelay+0x16>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	e000      	b.n	8003ec0 <osDelay+0x18>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fed1 	bl	8004c68 <vTaskDelay>
  
  return osOK;
 8003ec6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00f      	beq.n	8003f02 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d10a      	bne.n	8003efe <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2203      	movs	r2, #3
 8003eee:	9200      	str	r2, [sp, #0]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	2001      	movs	r0, #1
 8003ef6:	f000 f93b 	bl	8004170 <xQueueGenericCreateStatic>
 8003efa:	4603      	mov	r3, r0
 8003efc:	e016      	b.n	8003f2c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e014      	b.n	8003f2c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d110      	bne.n	8003f2a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003f08:	2203      	movs	r2, #3
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	f000 f9b1 	bl	8004274 <xQueueGenericCreate>
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <osSemaphoreCreate+0x56>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2100      	movs	r1, #0
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 fa09 	bl	8004338 <xQueueGenericSend>
      return sema;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	e000      	b.n	8003f2c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003f2a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f103 0208 	add.w	r2, r3, #8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f103 0208 	add.w	r2, r3, #8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f103 0208 	add.w	r2, r3, #8
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b085      	sub	sp, #20
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	601a      	str	r2, [r3, #0]
}
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fec:	d103      	bne.n	8003ff6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e00c      	b.n	8004010 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e002      	b.n	8004004 <vListInsert+0x2e>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	429a      	cmp	r2, r3
 800400e:	d2f6      	bcs.n	8003ffe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	601a      	str	r2, [r3, #0]
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6892      	ldr	r2, [r2, #8]
 800405e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6852      	ldr	r2, [r2, #4]
 8004068:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	d103      	bne.n	800407c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	1e5a      	subs	r2, r3, #1
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10c      	bne.n	80040ca <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	b672      	cpsid	i
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	b662      	cpsie	i
 80040c4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040c6:	bf00      	nop
 80040c8:	e7fe      	b.n	80040c8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80040ca:	f001 fd37 	bl	8005b3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	68f9      	ldr	r1, [r7, #12]
 80040d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040da:	fb01 f303 	mul.w	r3, r1, r3
 80040de:	441a      	add	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	3b01      	subs	r3, #1
 80040fc:	68f9      	ldr	r1, [r7, #12]
 80040fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	441a      	add	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	22ff      	movs	r2, #255	; 0xff
 800410e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	22ff      	movs	r2, #255	; 0xff
 8004116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d114      	bne.n	800414a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01a      	beq.n	800415e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3310      	adds	r3, #16
 800412c:	4618      	mov	r0, r3
 800412e:	f001 f81f 	bl	8005170 <xTaskRemoveFromEventList>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d012      	beq.n	800415e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <xQueueGenericReset+0xd0>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	e009      	b.n	800415e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3310      	adds	r3, #16
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff fef0 	bl	8003f34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	3324      	adds	r3, #36	; 0x24
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff feeb 	bl	8003f34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800415e:	f001 fd21 	bl	8005ba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004162:	2301      	movs	r3, #1
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	e000ed04 	.word	0xe000ed04

08004170 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08e      	sub	sp, #56	; 0x38
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10c      	bne.n	800419e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	b672      	cpsid	i
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	b662      	cpsie	i
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10c      	bne.n	80041be <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	b672      	cpsid	i
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	b662      	cpsie	i
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <xQueueGenericCreateStatic+0x5a>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <xQueueGenericCreateStatic+0x5e>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <xQueueGenericCreateStatic+0x60>
 80041ce:	2300      	movs	r3, #0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10c      	bne.n	80041ee <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	b672      	cpsid	i
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	b662      	cpsie	i
 80041e8:	623b      	str	r3, [r7, #32]
}
 80041ea:	bf00      	nop
 80041ec:	e7fe      	b.n	80041ec <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <xQueueGenericCreateStatic+0x8a>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <xQueueGenericCreateStatic+0x8e>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <xQueueGenericCreateStatic+0x90>
 80041fe:	2300      	movs	r3, #0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10c      	bne.n	800421e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	b672      	cpsid	i
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	b662      	cpsie	i
 8004218:	61fb      	str	r3, [r7, #28]
}
 800421a:	bf00      	nop
 800421c:	e7fe      	b.n	800421c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800421e:	2348      	movs	r3, #72	; 0x48
 8004220:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b48      	cmp	r3, #72	; 0x48
 8004226:	d00c      	beq.n	8004242 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	b672      	cpsid	i
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	b662      	cpsie	i
 800423c:	61bb      	str	r3, [r7, #24]
}
 800423e:	bf00      	nop
 8004240:	e7fe      	b.n	8004240 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004242:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00d      	beq.n	800426a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004256:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	4613      	mov	r3, r2
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f847 	bl	80042f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800426c:	4618      	mov	r0, r3
 800426e:	3730      	adds	r7, #48	; 0x30
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af02      	add	r7, sp, #8
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	4613      	mov	r3, r2
 8004280:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10c      	bne.n	80042a2 <xQueueGenericCreate+0x2e>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	b672      	cpsid	i
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	b662      	cpsie	i
 800429c:	613b      	str	r3, [r7, #16]
}
 800429e:	bf00      	nop
 80042a0:	e7fe      	b.n	80042a0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d102      	bne.n	80042ae <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61fb      	str	r3, [r7, #28]
 80042ac:	e004      	b.n	80042b8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	fb02 f303 	mul.w	r3, r2, r3
 80042b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	3348      	adds	r3, #72	; 0x48
 80042bc:	4618      	mov	r0, r3
 80042be:	f001 fd25 	bl	8005d0c <pvPortMalloc>
 80042c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d011      	beq.n	80042ee <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	3348      	adds	r3, #72	; 0x48
 80042d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042dc:	79fa      	ldrb	r2, [r7, #7]
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	4613      	mov	r3, r2
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f805 	bl	80042f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042ee:	69bb      	ldr	r3, [r7, #24]
	}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3720      	adds	r7, #32
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d103      	bne.n	8004314 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	e002      	b.n	800431a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004326:	2101      	movs	r1, #1
 8004328:	69b8      	ldr	r0, [r7, #24]
 800432a:	f7ff feb7 	bl	800409c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800432e:	bf00      	nop
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08e      	sub	sp, #56	; 0x38
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004346:	2300      	movs	r3, #0
 8004348:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10c      	bne.n	800436e <xQueueGenericSend+0x36>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	b672      	cpsid	i
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	b662      	cpsie	i
 8004368:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d103      	bne.n	800437c <xQueueGenericSend+0x44>
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <xQueueGenericSend+0x48>
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <xQueueGenericSend+0x4a>
 8004380:	2300      	movs	r3, #0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10c      	bne.n	80043a0 <xQueueGenericSend+0x68>
	__asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	b672      	cpsid	i
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	b662      	cpsie	i
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d103      	bne.n	80043ae <xQueueGenericSend+0x76>
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <xQueueGenericSend+0x7a>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <xQueueGenericSend+0x7c>
 80043b2:	2300      	movs	r3, #0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10c      	bne.n	80043d2 <xQueueGenericSend+0x9a>
	__asm volatile
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	b672      	cpsid	i
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	b662      	cpsie	i
 80043cc:	623b      	str	r3, [r7, #32]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043d2:	f001 f891 	bl	80054f8 <xTaskGetSchedulerState>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d102      	bne.n	80043e2 <xQueueGenericSend+0xaa>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <xQueueGenericSend+0xae>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <xQueueGenericSend+0xb0>
 80043e6:	2300      	movs	r3, #0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10c      	bne.n	8004406 <xQueueGenericSend+0xce>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f0:	b672      	cpsid	i
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	b662      	cpsie	i
 8004400:	61fb      	str	r3, [r7, #28]
}
 8004402:	bf00      	nop
 8004404:	e7fe      	b.n	8004404 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004406:	f001 fb99 	bl	8005b3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <xQueueGenericSend+0xe4>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d129      	bne.n	8004470 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004422:	f000 f975 	bl	8004710 <prvCopyDataToQueue>
 8004426:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	2b00      	cmp	r3, #0
 800442e:	d010      	beq.n	8004452 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	3324      	adds	r3, #36	; 0x24
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fe9b 	bl	8005170 <xTaskRemoveFromEventList>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d013      	beq.n	8004468 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004440:	4b3f      	ldr	r3, [pc, #252]	; (8004540 <xQueueGenericSend+0x208>)
 8004442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	e00a      	b.n	8004468 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004458:	4b39      	ldr	r3, [pc, #228]	; (8004540 <xQueueGenericSend+0x208>)
 800445a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004468:	f001 fb9c 	bl	8005ba4 <vPortExitCritical>
				return pdPASS;
 800446c:	2301      	movs	r3, #1
 800446e:	e063      	b.n	8004538 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d103      	bne.n	800447e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004476:	f001 fb95 	bl	8005ba4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800447a:	2300      	movs	r3, #0
 800447c:	e05c      	b.n	8004538 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800447e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004480:	2b00      	cmp	r3, #0
 8004482:	d106      	bne.n	8004492 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004484:	f107 0314 	add.w	r3, r7, #20
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fed5 	bl	8005238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800448e:	2301      	movs	r3, #1
 8004490:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004492:	f001 fb87 	bl	8005ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004496:	f000 fc81 	bl	8004d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800449a:	f001 fb4f 	bl	8005b3c <vPortEnterCritical>
 800449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044a4:	b25b      	sxtb	r3, r3
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044aa:	d103      	bne.n	80044b4 <xQueueGenericSend+0x17c>
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044ba:	b25b      	sxtb	r3, r3
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c0:	d103      	bne.n	80044ca <xQueueGenericSend+0x192>
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044ca:	f001 fb6b 	bl	8005ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044ce:	1d3a      	adds	r2, r7, #4
 80044d0:	f107 0314 	add.w	r3, r7, #20
 80044d4:	4611      	mov	r1, r2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fec4 	bl	8005264 <xTaskCheckForTimeOut>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d124      	bne.n	800452c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044e4:	f000 fa0c 	bl	8004900 <prvIsQueueFull>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d018      	beq.n	8004520 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	3310      	adds	r3, #16
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fe14 	bl	8005124 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044fe:	f000 f997 	bl	8004830 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004502:	f000 fc59 	bl	8004db8 <xTaskResumeAll>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	f47f af7c 	bne.w	8004406 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800450e:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <xQueueGenericSend+0x208>)
 8004510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	e772      	b.n	8004406 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004522:	f000 f985 	bl	8004830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004526:	f000 fc47 	bl	8004db8 <xTaskResumeAll>
 800452a:	e76c      	b.n	8004406 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800452c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800452e:	f000 f97f 	bl	8004830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004532:	f000 fc41 	bl	8004db8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004536:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004538:	4618      	mov	r0, r3
 800453a:	3738      	adds	r7, #56	; 0x38
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	e000ed04 	.word	0xe000ed04

08004544 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08c      	sub	sp, #48	; 0x30
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004550:	2300      	movs	r3, #0
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10c      	bne.n	8004578 <xQueueReceive+0x34>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	b672      	cpsid	i
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	b662      	cpsie	i
 8004572:	623b      	str	r3, [r7, #32]
}
 8004574:	bf00      	nop
 8004576:	e7fe      	b.n	8004576 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d103      	bne.n	8004586 <xQueueReceive+0x42>
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <xQueueReceive+0x46>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <xQueueReceive+0x48>
 800458a:	2300      	movs	r3, #0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10c      	bne.n	80045aa <xQueueReceive+0x66>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	b672      	cpsid	i
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	b662      	cpsie	i
 80045a4:	61fb      	str	r3, [r7, #28]
}
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045aa:	f000 ffa5 	bl	80054f8 <xTaskGetSchedulerState>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d102      	bne.n	80045ba <xQueueReceive+0x76>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <xQueueReceive+0x7a>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <xQueueReceive+0x7c>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10c      	bne.n	80045de <xQueueReceive+0x9a>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	b672      	cpsid	i
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	b662      	cpsie	i
 80045d8:	61bb      	str	r3, [r7, #24]
}
 80045da:	bf00      	nop
 80045dc:	e7fe      	b.n	80045dc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045de:	f001 faad 	bl	8005b3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01f      	beq.n	800462e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f2:	f000 f8f7 	bl	80047e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	1e5a      	subs	r2, r3, #1
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00f      	beq.n	8004626 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	3310      	adds	r3, #16
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fdb0 	bl	8005170 <xTaskRemoveFromEventList>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004616:	4b3d      	ldr	r3, [pc, #244]	; (800470c <xQueueReceive+0x1c8>)
 8004618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004626:	f001 fabd 	bl	8005ba4 <vPortExitCritical>
				return pdPASS;
 800462a:	2301      	movs	r3, #1
 800462c:	e069      	b.n	8004702 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d103      	bne.n	800463c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004634:	f001 fab6 	bl	8005ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004638:	2300      	movs	r3, #0
 800463a:	e062      	b.n	8004702 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004642:	f107 0310 	add.w	r3, r7, #16
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fdf6 	bl	8005238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800464c:	2301      	movs	r3, #1
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004650:	f001 faa8 	bl	8005ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004654:	f000 fba2 	bl	8004d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004658:	f001 fa70 	bl	8005b3c <vPortEnterCritical>
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004662:	b25b      	sxtb	r3, r3
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004668:	d103      	bne.n	8004672 <xQueueReceive+0x12e>
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004678:	b25b      	sxtb	r3, r3
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800467e:	d103      	bne.n	8004688 <xQueueReceive+0x144>
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004688:	f001 fa8c 	bl	8005ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800468c:	1d3a      	adds	r2, r7, #4
 800468e:	f107 0310 	add.w	r3, r7, #16
 8004692:	4611      	mov	r1, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fde5 	bl	8005264 <xTaskCheckForTimeOut>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d123      	bne.n	80046e8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046a2:	f000 f917 	bl	80048d4 <prvIsQueueEmpty>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d017      	beq.n	80046dc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	3324      	adds	r3, #36	; 0x24
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	4611      	mov	r1, r2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fd35 	bl	8005124 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046bc:	f000 f8b8 	bl	8004830 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046c0:	f000 fb7a 	bl	8004db8 <xTaskResumeAll>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d189      	bne.n	80045de <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80046ca:	4b10      	ldr	r3, [pc, #64]	; (800470c <xQueueReceive+0x1c8>)
 80046cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	e780      	b.n	80045de <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046de:	f000 f8a7 	bl	8004830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046e2:	f000 fb69 	bl	8004db8 <xTaskResumeAll>
 80046e6:	e77a      	b.n	80045de <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ea:	f000 f8a1 	bl	8004830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046ee:	f000 fb63 	bl	8004db8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046f4:	f000 f8ee 	bl	80048d4 <prvIsQueueEmpty>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f43f af6f 	beq.w	80045de <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004700:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004702:	4618      	mov	r0, r3
 8004704:	3730      	adds	r7, #48	; 0x30
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	e000ed04 	.word	0xe000ed04

08004710 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10d      	bne.n	800474a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d14d      	bne.n	80047d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fefa 	bl	8005534 <xTaskPriorityDisinherit>
 8004740:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	e043      	b.n	80047d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d119      	bne.n	8004784 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6858      	ldr	r0, [r3, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	461a      	mov	r2, r3
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	f001 ff3d 	bl	80065da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	441a      	add	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	d32b      	bcc.n	80047d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	605a      	str	r2, [r3, #4]
 8004782:	e026      	b.n	80047d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68d8      	ldr	r0, [r3, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	461a      	mov	r2, r3
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	f001 ff23 	bl	80065da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	425b      	negs	r3, r3
 800479e:	441a      	add	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d207      	bcs.n	80047c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	425b      	negs	r3, r3
 80047ba:	441a      	add	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d105      	bne.n	80047d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80047da:	697b      	ldr	r3, [r7, #20]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d018      	beq.n	8004828 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	441a      	add	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	429a      	cmp	r2, r3
 800480e:	d303      	bcc.n	8004818 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68d9      	ldr	r1, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	461a      	mov	r2, r3
 8004822:	6838      	ldr	r0, [r7, #0]
 8004824:	f001 fed9 	bl	80065da <memcpy>
	}
}
 8004828:	bf00      	nop
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004838:	f001 f980 	bl	8005b3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004842:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004844:	e011      	b.n	800486a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	2b00      	cmp	r3, #0
 800484c:	d012      	beq.n	8004874 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3324      	adds	r3, #36	; 0x24
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fc8c 	bl	8005170 <xTaskRemoveFromEventList>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800485e:	f000 fd67 	bl	8005330 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	3b01      	subs	r3, #1
 8004866:	b2db      	uxtb	r3, r3
 8004868:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800486a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800486e:	2b00      	cmp	r3, #0
 8004870:	dce9      	bgt.n	8004846 <prvUnlockQueue+0x16>
 8004872:	e000      	b.n	8004876 <prvUnlockQueue+0x46>
					break;
 8004874:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	22ff      	movs	r2, #255	; 0xff
 800487a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800487e:	f001 f991 	bl	8005ba4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004882:	f001 f95b 	bl	8005b3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800488c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800488e:	e011      	b.n	80048b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d012      	beq.n	80048be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3310      	adds	r3, #16
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fc67 	bl	8005170 <xTaskRemoveFromEventList>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048a8:	f000 fd42 	bl	8005330 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048ac:	7bbb      	ldrb	r3, [r7, #14]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	dce9      	bgt.n	8004890 <prvUnlockQueue+0x60>
 80048bc:	e000      	b.n	80048c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	22ff      	movs	r2, #255	; 0xff
 80048c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80048c8:	f001 f96c 	bl	8005ba4 <vPortExitCritical>
}
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048dc:	f001 f92e 	bl	8005b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d102      	bne.n	80048ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048e8:	2301      	movs	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	e001      	b.n	80048f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048f2:	f001 f957 	bl	8005ba4 <vPortExitCritical>

	return xReturn;
 80048f6:	68fb      	ldr	r3, [r7, #12]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004908:	f001 f918 	bl	8005b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004914:	429a      	cmp	r2, r3
 8004916:	d102      	bne.n	800491e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004918:	2301      	movs	r3, #1
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e001      	b.n	8004922 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004922:	f001 f93f 	bl	8005ba4 <vPortExitCritical>

	return xReturn;
 8004926:	68fb      	ldr	r3, [r7, #12]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08e      	sub	sp, #56	; 0x38
 8004934:	af04      	add	r7, sp, #16
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800493e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10c      	bne.n	800495e <xTaskCreateStatic+0x2e>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	b672      	cpsid	i
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	b662      	cpsie	i
 8004958:	623b      	str	r3, [r7, #32]
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10c      	bne.n	800497e <xTaskCreateStatic+0x4e>
	__asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	b672      	cpsid	i
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	b662      	cpsie	i
 8004978:	61fb      	str	r3, [r7, #28]
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800497e:	2354      	movs	r3, #84	; 0x54
 8004980:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b54      	cmp	r3, #84	; 0x54
 8004986:	d00c      	beq.n	80049a2 <xTaskCreateStatic+0x72>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	b672      	cpsid	i
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	b662      	cpsie	i
 800499c:	61bb      	str	r3, [r7, #24]
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01e      	beq.n	80049e8 <xTaskCreateStatic+0xb8>
 80049aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01b      	beq.n	80049e8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	2202      	movs	r2, #2
 80049be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049c2:	2300      	movs	r3, #0
 80049c4:	9303      	str	r3, [sp, #12]
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	9302      	str	r3, [sp, #8]
 80049ca:	f107 0314 	add.w	r3, r7, #20
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f850 	bl	8004a80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049e2:	f000 f8d7 	bl	8004b94 <prvAddNewTaskToReadyList>
 80049e6:	e001      	b.n	80049ec <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049ec:	697b      	ldr	r3, [r7, #20]
	}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3728      	adds	r7, #40	; 0x28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b08c      	sub	sp, #48	; 0x30
 80049fa:	af04      	add	r7, sp, #16
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	603b      	str	r3, [r7, #0]
 8004a02:	4613      	mov	r3, r2
 8004a04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f001 f97e 	bl	8005d0c <pvPortMalloc>
 8004a10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00e      	beq.n	8004a36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a18:	2054      	movs	r0, #84	; 0x54
 8004a1a:	f001 f977 	bl	8005d0c <pvPortMalloc>
 8004a1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a2c:	e005      	b.n	8004a3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a2e:	6978      	ldr	r0, [r7, #20]
 8004a30:	f001 fa36 	bl	8005ea0 <vPortFree>
 8004a34:	e001      	b.n	8004a3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d017      	beq.n	8004a70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a48:	88fa      	ldrh	r2, [r7, #6]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	9303      	str	r3, [sp, #12]
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	9302      	str	r3, [sp, #8]
 8004a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a54:	9301      	str	r3, [sp, #4]
 8004a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f80e 	bl	8004a80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a64:	69f8      	ldr	r0, [r7, #28]
 8004a66:	f000 f895 	bl	8004b94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e002      	b.n	8004a76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a76:	69bb      	ldr	r3, [r7, #24]
	}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004a98:	440b      	add	r3, r1
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	f023 0307 	bic.w	r3, r3, #7
 8004aa6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00c      	beq.n	8004acc <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	b672      	cpsid	i
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	b662      	cpsie	i
 8004ac6:	617b      	str	r3, [r7, #20]
}
 8004ac8:	bf00      	nop
 8004aca:	e7fe      	b.n	8004aca <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d01f      	beq.n	8004b12 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	e012      	b.n	8004afe <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	7819      	ldrb	r1, [r3, #0]
 8004ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	3334      	adds	r3, #52	; 0x34
 8004ae8:	460a      	mov	r2, r1
 8004aea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	4413      	add	r3, r2
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d006      	beq.n	8004b06 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	3301      	adds	r3, #1
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2b0f      	cmp	r3, #15
 8004b02:	d9e9      	bls.n	8004ad8 <prvInitialiseNewTask+0x58>
 8004b04:	e000      	b.n	8004b08 <prvInitialiseNewTask+0x88>
			{
				break;
 8004b06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b10:	e003      	b.n	8004b1a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	2b06      	cmp	r3, #6
 8004b1e:	d901      	bls.n	8004b24 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b20:	2306      	movs	r3, #6
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b2e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	2200      	movs	r2, #0
 8004b34:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	3304      	adds	r3, #4
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fa1a 	bl	8003f74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b42:	3318      	adds	r3, #24
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fa15 	bl	8003f74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	f1c3 0207 	rsb	r2, r3, #7
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b62:	2200      	movs	r2, #0
 8004b64:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	68f9      	ldr	r1, [r7, #12]
 8004b72:	69b8      	ldr	r0, [r7, #24]
 8004b74:	f000 fed2 	bl	800591c <pxPortInitialiseStack>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b8a:	bf00      	nop
 8004b8c:	3720      	adds	r7, #32
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b9c:	f000 ffce 	bl	8005b3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ba0:	4b2a      	ldr	r3, [pc, #168]	; (8004c4c <prvAddNewTaskToReadyList+0xb8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	4a29      	ldr	r2, [pc, #164]	; (8004c4c <prvAddNewTaskToReadyList+0xb8>)
 8004ba8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004baa:	4b29      	ldr	r3, [pc, #164]	; (8004c50 <prvAddNewTaskToReadyList+0xbc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004bb2:	4a27      	ldr	r2, [pc, #156]	; (8004c50 <prvAddNewTaskToReadyList+0xbc>)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004bb8:	4b24      	ldr	r3, [pc, #144]	; (8004c4c <prvAddNewTaskToReadyList+0xb8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d110      	bne.n	8004be2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bc0:	f000 fbda 	bl	8005378 <prvInitialiseTaskLists>
 8004bc4:	e00d      	b.n	8004be2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bc6:	4b23      	ldr	r3, [pc, #140]	; (8004c54 <prvAddNewTaskToReadyList+0xc0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bce:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <prvAddNewTaskToReadyList+0xbc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d802      	bhi.n	8004be2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bdc:	4a1c      	ldr	r2, [pc, #112]	; (8004c50 <prvAddNewTaskToReadyList+0xbc>)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004be2:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <prvAddNewTaskToReadyList+0xc4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3301      	adds	r3, #1
 8004be8:	4a1b      	ldr	r2, [pc, #108]	; (8004c58 <prvAddNewTaskToReadyList+0xc4>)
 8004bea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	409a      	lsls	r2, r3
 8004bf4:	4b19      	ldr	r3, [pc, #100]	; (8004c5c <prvAddNewTaskToReadyList+0xc8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	4a18      	ldr	r2, [pc, #96]	; (8004c5c <prvAddNewTaskToReadyList+0xc8>)
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <prvAddNewTaskToReadyList+0xcc>)
 8004c0c:	441a      	add	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3304      	adds	r3, #4
 8004c12:	4619      	mov	r1, r3
 8004c14:	4610      	mov	r0, r2
 8004c16:	f7ff f9ba 	bl	8003f8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c1a:	f000 ffc3 	bl	8005ba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <prvAddNewTaskToReadyList+0xc0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00e      	beq.n	8004c44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c26:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <prvAddNewTaskToReadyList+0xbc>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d207      	bcs.n	8004c44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c34:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <prvAddNewTaskToReadyList+0xd0>)
 8004c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c44:	bf00      	nop
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	200004d4 	.word	0x200004d4
 8004c50:	200003d4 	.word	0x200003d4
 8004c54:	200004e0 	.word	0x200004e0
 8004c58:	200004f0 	.word	0x200004f0
 8004c5c:	200004dc 	.word	0x200004dc
 8004c60:	200003d8 	.word	0x200003d8
 8004c64:	e000ed04 	.word	0xe000ed04

08004c68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d019      	beq.n	8004cae <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c7a:	4b14      	ldr	r3, [pc, #80]	; (8004ccc <vTaskDelay+0x64>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00c      	beq.n	8004c9c <vTaskDelay+0x34>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	b672      	cpsid	i
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	b662      	cpsie	i
 8004c96:	60bb      	str	r3, [r7, #8]
}
 8004c98:	bf00      	nop
 8004c9a:	e7fe      	b.n	8004c9a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004c9c:	f000 f87e 	bl	8004d9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fdd4 	bl	8005850 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ca8:	f000 f886 	bl	8004db8 <xTaskResumeAll>
 8004cac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d107      	bne.n	8004cc4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004cb4:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <vTaskDelay+0x68>)
 8004cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	200004fc 	.word	0x200004fc
 8004cd0:	e000ed04 	.word	0xe000ed04

08004cd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08a      	sub	sp, #40	; 0x28
 8004cd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ce2:	463a      	mov	r2, r7
 8004ce4:	1d39      	adds	r1, r7, #4
 8004ce6:	f107 0308 	add.w	r3, r7, #8
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fb fc5e 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004cf0:	6839      	ldr	r1, [r7, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	9202      	str	r2, [sp, #8]
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	460a      	mov	r2, r1
 8004d02:	4920      	ldr	r1, [pc, #128]	; (8004d84 <vTaskStartScheduler+0xb0>)
 8004d04:	4820      	ldr	r0, [pc, #128]	; (8004d88 <vTaskStartScheduler+0xb4>)
 8004d06:	f7ff fe13 	bl	8004930 <xTaskCreateStatic>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4a1f      	ldr	r2, [pc, #124]	; (8004d8c <vTaskStartScheduler+0xb8>)
 8004d0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d10:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <vTaskStartScheduler+0xb8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	e001      	b.n	8004d22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d118      	bne.n	8004d5a <vTaskStartScheduler+0x86>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	b672      	cpsid	i
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	b662      	cpsie	i
 8004d3c:	613b      	str	r3, [r7, #16]
}
 8004d3e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d40:	4b13      	ldr	r3, [pc, #76]	; (8004d90 <vTaskStartScheduler+0xbc>)
 8004d42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d48:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <vTaskStartScheduler+0xc0>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d4e:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <vTaskStartScheduler+0xc4>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d54:	f000 fe74 	bl	8005a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d58:	e010      	b.n	8004d7c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d60:	d10c      	bne.n	8004d7c <vTaskStartScheduler+0xa8>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	b672      	cpsid	i
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	b662      	cpsie	i
 8004d76:	60fb      	str	r3, [r7, #12]
}
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <vTaskStartScheduler+0xa6>
}
 8004d7c:	bf00      	nop
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	080070d0 	.word	0x080070d0
 8004d88:	08005349 	.word	0x08005349
 8004d8c:	200004f8 	.word	0x200004f8
 8004d90:	200004f4 	.word	0x200004f4
 8004d94:	200004e0 	.word	0x200004e0
 8004d98:	200004d8 	.word	0x200004d8

08004d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004da0:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <vTaskSuspendAll+0x18>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3301      	adds	r3, #1
 8004da6:	4a03      	ldr	r2, [pc, #12]	; (8004db4 <vTaskSuspendAll+0x18>)
 8004da8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004daa:	bf00      	nop
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	200004fc 	.word	0x200004fc

08004db8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004dc6:	4b42      	ldr	r3, [pc, #264]	; (8004ed0 <xTaskResumeAll+0x118>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10c      	bne.n	8004de8 <xTaskResumeAll+0x30>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	b672      	cpsid	i
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	b662      	cpsie	i
 8004de2:	603b      	str	r3, [r7, #0]
}
 8004de4:	bf00      	nop
 8004de6:	e7fe      	b.n	8004de6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004de8:	f000 fea8 	bl	8005b3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004dec:	4b38      	ldr	r3, [pc, #224]	; (8004ed0 <xTaskResumeAll+0x118>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	4a37      	ldr	r2, [pc, #220]	; (8004ed0 <xTaskResumeAll+0x118>)
 8004df4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004df6:	4b36      	ldr	r3, [pc, #216]	; (8004ed0 <xTaskResumeAll+0x118>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d161      	bne.n	8004ec2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dfe:	4b35      	ldr	r3, [pc, #212]	; (8004ed4 <xTaskResumeAll+0x11c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d05d      	beq.n	8004ec2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e06:	e02e      	b.n	8004e66 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e08:	4b33      	ldr	r3, [pc, #204]	; (8004ed8 <xTaskResumeAll+0x120>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3318      	adds	r3, #24
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff f917 	bl	8004048 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff f912 	bl	8004048 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	2201      	movs	r2, #1
 8004e2a:	409a      	lsls	r2, r3
 8004e2c:	4b2b      	ldr	r3, [pc, #172]	; (8004edc <xTaskResumeAll+0x124>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <xTaskResumeAll+0x124>)
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4a27      	ldr	r2, [pc, #156]	; (8004ee0 <xTaskResumeAll+0x128>)
 8004e44:	441a      	add	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f7ff f89e 	bl	8003f8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e56:	4b23      	ldr	r3, [pc, #140]	; (8004ee4 <xTaskResumeAll+0x12c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d302      	bcc.n	8004e66 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004e60:	4b21      	ldr	r3, [pc, #132]	; (8004ee8 <xTaskResumeAll+0x130>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e66:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <xTaskResumeAll+0x120>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1cc      	bne.n	8004e08 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e74:	f000 fb20 	bl	80054b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004e78:	4b1c      	ldr	r3, [pc, #112]	; (8004eec <xTaskResumeAll+0x134>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d010      	beq.n	8004ea6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e84:	f000 f836 	bl	8004ef4 <xTaskIncrementTick>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004e8e:	4b16      	ldr	r3, [pc, #88]	; (8004ee8 <xTaskResumeAll+0x130>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f1      	bne.n	8004e84 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004ea0:	4b12      	ldr	r3, [pc, #72]	; (8004eec <xTaskResumeAll+0x134>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <xTaskResumeAll+0x130>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <xTaskResumeAll+0x138>)
 8004eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ec2:	f000 fe6f 	bl	8005ba4 <vPortExitCritical>

	return xAlreadyYielded;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	200004fc 	.word	0x200004fc
 8004ed4:	200004d4 	.word	0x200004d4
 8004ed8:	20000494 	.word	0x20000494
 8004edc:	200004dc 	.word	0x200004dc
 8004ee0:	200003d8 	.word	0x200003d8
 8004ee4:	200003d4 	.word	0x200003d4
 8004ee8:	200004e8 	.word	0x200004e8
 8004eec:	200004e4 	.word	0x200004e4
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004efe:	4b4f      	ldr	r3, [pc, #316]	; (800503c <xTaskIncrementTick+0x148>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f040 808a 	bne.w	800501c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f08:	4b4d      	ldr	r3, [pc, #308]	; (8005040 <xTaskIncrementTick+0x14c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f10:	4a4b      	ldr	r2, [pc, #300]	; (8005040 <xTaskIncrementTick+0x14c>)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d122      	bne.n	8004f62 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f1c:	4b49      	ldr	r3, [pc, #292]	; (8005044 <xTaskIncrementTick+0x150>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00c      	beq.n	8004f40 <xTaskIncrementTick+0x4c>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	b672      	cpsid	i
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	b662      	cpsie	i
 8004f3a:	603b      	str	r3, [r7, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <xTaskIncrementTick+0x4a>
 8004f40:	4b40      	ldr	r3, [pc, #256]	; (8005044 <xTaskIncrementTick+0x150>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	4b40      	ldr	r3, [pc, #256]	; (8005048 <xTaskIncrementTick+0x154>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a3e      	ldr	r2, [pc, #248]	; (8005044 <xTaskIncrementTick+0x150>)
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	4a3e      	ldr	r2, [pc, #248]	; (8005048 <xTaskIncrementTick+0x154>)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	4b3d      	ldr	r3, [pc, #244]	; (800504c <xTaskIncrementTick+0x158>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	4a3c      	ldr	r2, [pc, #240]	; (800504c <xTaskIncrementTick+0x158>)
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	f000 faab 	bl	80054b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f62:	4b3b      	ldr	r3, [pc, #236]	; (8005050 <xTaskIncrementTick+0x15c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d348      	bcc.n	8004ffe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f6c:	4b35      	ldr	r3, [pc, #212]	; (8005044 <xTaskIncrementTick+0x150>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d104      	bne.n	8004f80 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f76:	4b36      	ldr	r3, [pc, #216]	; (8005050 <xTaskIncrementTick+0x15c>)
 8004f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f7c:	601a      	str	r2, [r3, #0]
					break;
 8004f7e:	e03e      	b.n	8004ffe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f80:	4b30      	ldr	r3, [pc, #192]	; (8005044 <xTaskIncrementTick+0x150>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d203      	bcs.n	8004fa0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f98:	4a2d      	ldr	r2, [pc, #180]	; (8005050 <xTaskIncrementTick+0x15c>)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f9e:	e02e      	b.n	8004ffe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff f84f 	bl	8004048 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d004      	beq.n	8004fbc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	3318      	adds	r3, #24
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff f846 	bl	8004048 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	409a      	lsls	r2, r3
 8004fc4:	4b23      	ldr	r3, [pc, #140]	; (8005054 <xTaskIncrementTick+0x160>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	4a22      	ldr	r2, [pc, #136]	; (8005054 <xTaskIncrementTick+0x160>)
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4a1f      	ldr	r2, [pc, #124]	; (8005058 <xTaskIncrementTick+0x164>)
 8004fdc:	441a      	add	r2, r3
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	f7fe ffd2 	bl	8003f8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fee:	4b1b      	ldr	r3, [pc, #108]	; (800505c <xTaskIncrementTick+0x168>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d3b9      	bcc.n	8004f6c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ffc:	e7b6      	b.n	8004f6c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ffe:	4b17      	ldr	r3, [pc, #92]	; (800505c <xTaskIncrementTick+0x168>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	4914      	ldr	r1, [pc, #80]	; (8005058 <xTaskIncrementTick+0x164>)
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d907      	bls.n	8005026 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005016:	2301      	movs	r3, #1
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	e004      	b.n	8005026 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800501c:	4b10      	ldr	r3, [pc, #64]	; (8005060 <xTaskIncrementTick+0x16c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3301      	adds	r3, #1
 8005022:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <xTaskIncrementTick+0x16c>)
 8005024:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005026:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <xTaskIncrementTick+0x170>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800502e:	2301      	movs	r3, #1
 8005030:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005032:	697b      	ldr	r3, [r7, #20]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	200004fc 	.word	0x200004fc
 8005040:	200004d8 	.word	0x200004d8
 8005044:	2000048c 	.word	0x2000048c
 8005048:	20000490 	.word	0x20000490
 800504c:	200004ec 	.word	0x200004ec
 8005050:	200004f4 	.word	0x200004f4
 8005054:	200004dc 	.word	0x200004dc
 8005058:	200003d8 	.word	0x200003d8
 800505c:	200003d4 	.word	0x200003d4
 8005060:	200004e4 	.word	0x200004e4
 8005064:	200004e8 	.word	0x200004e8

08005068 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800506e:	4b28      	ldr	r3, [pc, #160]	; (8005110 <vTaskSwitchContext+0xa8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005076:	4b27      	ldr	r3, [pc, #156]	; (8005114 <vTaskSwitchContext+0xac>)
 8005078:	2201      	movs	r2, #1
 800507a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800507c:	e041      	b.n	8005102 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800507e:	4b25      	ldr	r3, [pc, #148]	; (8005114 <vTaskSwitchContext+0xac>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005084:	4b24      	ldr	r3, [pc, #144]	; (8005118 <vTaskSwitchContext+0xb0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	fab3 f383 	clz	r3, r3
 8005090:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005092:	7afb      	ldrb	r3, [r7, #11]
 8005094:	f1c3 031f 	rsb	r3, r3, #31
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	4920      	ldr	r1, [pc, #128]	; (800511c <vTaskSwitchContext+0xb4>)
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10c      	bne.n	80050c8 <vTaskSwitchContext+0x60>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	b672      	cpsid	i
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	b662      	cpsie	i
 80050c2:	607b      	str	r3, [r7, #4]
}
 80050c4:	bf00      	nop
 80050c6:	e7fe      	b.n	80050c6 <vTaskSwitchContext+0x5e>
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4a12      	ldr	r2, [pc, #72]	; (800511c <vTaskSwitchContext+0xb4>)
 80050d4:	4413      	add	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	605a      	str	r2, [r3, #4]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	3308      	adds	r3, #8
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d104      	bne.n	80050f8 <vTaskSwitchContext+0x90>
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	605a      	str	r2, [r3, #4]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	4a08      	ldr	r2, [pc, #32]	; (8005120 <vTaskSwitchContext+0xb8>)
 8005100:	6013      	str	r3, [r2, #0]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	200004fc 	.word	0x200004fc
 8005114:	200004e8 	.word	0x200004e8
 8005118:	200004dc 	.word	0x200004dc
 800511c:	200003d8 	.word	0x200003d8
 8005120:	200003d4 	.word	0x200003d4

08005124 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10c      	bne.n	800514e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	b672      	cpsid	i
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	b662      	cpsie	i
 8005148:	60fb      	str	r3, [r7, #12]
}
 800514a:	bf00      	nop
 800514c:	e7fe      	b.n	800514c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800514e:	4b07      	ldr	r3, [pc, #28]	; (800516c <vTaskPlaceOnEventList+0x48>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3318      	adds	r3, #24
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fe ff3d 	bl	8003fd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800515c:	2101      	movs	r1, #1
 800515e:	6838      	ldr	r0, [r7, #0]
 8005160:	f000 fb76 	bl	8005850 <prvAddCurrentTaskToDelayedList>
}
 8005164:	bf00      	nop
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	200003d4 	.word	0x200003d4

08005170 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10c      	bne.n	80051a0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518a:	b672      	cpsid	i
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	b662      	cpsie	i
 800519a:	60fb      	str	r3, [r7, #12]
}
 800519c:	bf00      	nop
 800519e:	e7fe      	b.n	800519e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	3318      	adds	r3, #24
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fe ff4f 	bl	8004048 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051aa:	4b1d      	ldr	r3, [pc, #116]	; (8005220 <xTaskRemoveFromEventList+0xb0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d11c      	bne.n	80051ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	3304      	adds	r3, #4
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fe ff46 	bl	8004048 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	2201      	movs	r2, #1
 80051c2:	409a      	lsls	r2, r3
 80051c4:	4b17      	ldr	r3, [pc, #92]	; (8005224 <xTaskRemoveFromEventList+0xb4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	4a16      	ldr	r2, [pc, #88]	; (8005224 <xTaskRemoveFromEventList+0xb4>)
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4a13      	ldr	r2, [pc, #76]	; (8005228 <xTaskRemoveFromEventList+0xb8>)
 80051dc:	441a      	add	r2, r3
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	3304      	adds	r3, #4
 80051e2:	4619      	mov	r1, r3
 80051e4:	4610      	mov	r0, r2
 80051e6:	f7fe fed2 	bl	8003f8e <vListInsertEnd>
 80051ea:	e005      	b.n	80051f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	3318      	adds	r3, #24
 80051f0:	4619      	mov	r1, r3
 80051f2:	480e      	ldr	r0, [pc, #56]	; (800522c <xTaskRemoveFromEventList+0xbc>)
 80051f4:	f7fe fecb 	bl	8003f8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fc:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <xTaskRemoveFromEventList+0xc0>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	429a      	cmp	r2, r3
 8005204:	d905      	bls.n	8005212 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005206:	2301      	movs	r3, #1
 8005208:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800520a:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <xTaskRemoveFromEventList+0xc4>)
 800520c:	2201      	movs	r2, #1
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	e001      	b.n	8005216 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005216:	697b      	ldr	r3, [r7, #20]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	200004fc 	.word	0x200004fc
 8005224:	200004dc 	.word	0x200004dc
 8005228:	200003d8 	.word	0x200003d8
 800522c:	20000494 	.word	0x20000494
 8005230:	200003d4 	.word	0x200003d4
 8005234:	200004e8 	.word	0x200004e8

08005238 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005240:	4b06      	ldr	r3, [pc, #24]	; (800525c <vTaskInternalSetTimeOutState+0x24>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005248:	4b05      	ldr	r3, [pc, #20]	; (8005260 <vTaskInternalSetTimeOutState+0x28>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	605a      	str	r2, [r3, #4]
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	200004ec 	.word	0x200004ec
 8005260:	200004d8 	.word	0x200004d8

08005264 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10c      	bne.n	800528e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005278:	b672      	cpsid	i
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	b662      	cpsie	i
 8005288:	613b      	str	r3, [r7, #16]
}
 800528a:	bf00      	nop
 800528c:	e7fe      	b.n	800528c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10c      	bne.n	80052ae <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005298:	b672      	cpsid	i
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	b662      	cpsie	i
 80052a8:	60fb      	str	r3, [r7, #12]
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80052ae:	f000 fc45 	bl	8005b3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80052b2:	4b1d      	ldr	r3, [pc, #116]	; (8005328 <xTaskCheckForTimeOut+0xc4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ca:	d102      	bne.n	80052d2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61fb      	str	r3, [r7, #28]
 80052d0:	e023      	b.n	800531a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4b15      	ldr	r3, [pc, #84]	; (800532c <xTaskCheckForTimeOut+0xc8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d007      	beq.n	80052ee <xTaskCheckForTimeOut+0x8a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d302      	bcc.n	80052ee <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80052e8:	2301      	movs	r3, #1
 80052ea:	61fb      	str	r3, [r7, #28]
 80052ec:	e015      	b.n	800531a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d20b      	bcs.n	8005310 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	1ad2      	subs	r2, r2, r3
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff ff97 	bl	8005238 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800530a:	2300      	movs	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	e004      	b.n	800531a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005316:	2301      	movs	r3, #1
 8005318:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800531a:	f000 fc43 	bl	8005ba4 <vPortExitCritical>

	return xReturn;
 800531e:	69fb      	ldr	r3, [r7, #28]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3720      	adds	r7, #32
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	200004d8 	.word	0x200004d8
 800532c:	200004ec 	.word	0x200004ec

08005330 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <vTaskMissedYield+0x14>)
 8005336:	2201      	movs	r2, #1
 8005338:	601a      	str	r2, [r3, #0]
}
 800533a:	bf00      	nop
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	200004e8 	.word	0x200004e8

08005348 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005350:	f000 f852 	bl	80053f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <prvIdleTask+0x28>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d9f9      	bls.n	8005350 <prvIdleTask+0x8>
			{
				taskYIELD();
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <prvIdleTask+0x2c>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800536c:	e7f0      	b.n	8005350 <prvIdleTask+0x8>
 800536e:	bf00      	nop
 8005370:	200003d8 	.word	0x200003d8
 8005374:	e000ed04 	.word	0xe000ed04

08005378 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800537e:	2300      	movs	r3, #0
 8005380:	607b      	str	r3, [r7, #4]
 8005382:	e00c      	b.n	800539e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4a12      	ldr	r2, [pc, #72]	; (80053d8 <prvInitialiseTaskLists+0x60>)
 8005390:	4413      	add	r3, r2
 8005392:	4618      	mov	r0, r3
 8005394:	f7fe fdce 	bl	8003f34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3301      	adds	r3, #1
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b06      	cmp	r3, #6
 80053a2:	d9ef      	bls.n	8005384 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053a4:	480d      	ldr	r0, [pc, #52]	; (80053dc <prvInitialiseTaskLists+0x64>)
 80053a6:	f7fe fdc5 	bl	8003f34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053aa:	480d      	ldr	r0, [pc, #52]	; (80053e0 <prvInitialiseTaskLists+0x68>)
 80053ac:	f7fe fdc2 	bl	8003f34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053b0:	480c      	ldr	r0, [pc, #48]	; (80053e4 <prvInitialiseTaskLists+0x6c>)
 80053b2:	f7fe fdbf 	bl	8003f34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053b6:	480c      	ldr	r0, [pc, #48]	; (80053e8 <prvInitialiseTaskLists+0x70>)
 80053b8:	f7fe fdbc 	bl	8003f34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053bc:	480b      	ldr	r0, [pc, #44]	; (80053ec <prvInitialiseTaskLists+0x74>)
 80053be:	f7fe fdb9 	bl	8003f34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053c2:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <prvInitialiseTaskLists+0x78>)
 80053c4:	4a05      	ldr	r2, [pc, #20]	; (80053dc <prvInitialiseTaskLists+0x64>)
 80053c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053c8:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <prvInitialiseTaskLists+0x7c>)
 80053ca:	4a05      	ldr	r2, [pc, #20]	; (80053e0 <prvInitialiseTaskLists+0x68>)
 80053cc:	601a      	str	r2, [r3, #0]
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200003d8 	.word	0x200003d8
 80053dc:	20000464 	.word	0x20000464
 80053e0:	20000478 	.word	0x20000478
 80053e4:	20000494 	.word	0x20000494
 80053e8:	200004a8 	.word	0x200004a8
 80053ec:	200004c0 	.word	0x200004c0
 80053f0:	2000048c 	.word	0x2000048c
 80053f4:	20000490 	.word	0x20000490

080053f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053fe:	e019      	b.n	8005434 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005400:	f000 fb9c 	bl	8005b3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005404:	4b10      	ldr	r3, [pc, #64]	; (8005448 <prvCheckTasksWaitingTermination+0x50>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3304      	adds	r3, #4
 8005410:	4618      	mov	r0, r3
 8005412:	f7fe fe19 	bl	8004048 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005416:	4b0d      	ldr	r3, [pc, #52]	; (800544c <prvCheckTasksWaitingTermination+0x54>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3b01      	subs	r3, #1
 800541c:	4a0b      	ldr	r2, [pc, #44]	; (800544c <prvCheckTasksWaitingTermination+0x54>)
 800541e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005420:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <prvCheckTasksWaitingTermination+0x58>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3b01      	subs	r3, #1
 8005426:	4a0a      	ldr	r2, [pc, #40]	; (8005450 <prvCheckTasksWaitingTermination+0x58>)
 8005428:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800542a:	f000 fbbb 	bl	8005ba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f810 	bl	8005454 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005434:	4b06      	ldr	r3, [pc, #24]	; (8005450 <prvCheckTasksWaitingTermination+0x58>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e1      	bne.n	8005400 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	200004a8 	.word	0x200004a8
 800544c:	200004d4 	.word	0x200004d4
 8005450:	200004bc 	.word	0x200004bc

08005454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005462:	2b00      	cmp	r3, #0
 8005464:	d108      	bne.n	8005478 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fd18 	bl	8005ea0 <vPortFree>
				vPortFree( pxTCB );
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fd15 	bl	8005ea0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005476:	e01a      	b.n	80054ae <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800547e:	2b01      	cmp	r3, #1
 8005480:	d103      	bne.n	800548a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fd0c 	bl	8005ea0 <vPortFree>
	}
 8005488:	e011      	b.n	80054ae <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005490:	2b02      	cmp	r3, #2
 8005492:	d00c      	beq.n	80054ae <prvDeleteTCB+0x5a>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	b672      	cpsid	i
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	b662      	cpsie	i
 80054a8:	60fb      	str	r3, [r7, #12]
}
 80054aa:	bf00      	nop
 80054ac:	e7fe      	b.n	80054ac <prvDeleteTCB+0x58>
	}
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054be:	4b0c      	ldr	r3, [pc, #48]	; (80054f0 <prvResetNextTaskUnblockTime+0x38>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <prvResetNextTaskUnblockTime+0x3c>)
 80054ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054d0:	e008      	b.n	80054e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d2:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <prvResetNextTaskUnblockTime+0x38>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4a04      	ldr	r2, [pc, #16]	; (80054f4 <prvResetNextTaskUnblockTime+0x3c>)
 80054e2:	6013      	str	r3, [r2, #0]
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	2000048c 	.word	0x2000048c
 80054f4:	200004f4 	.word	0x200004f4

080054f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80054fe:	4b0b      	ldr	r3, [pc, #44]	; (800552c <xTaskGetSchedulerState+0x34>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005506:	2301      	movs	r3, #1
 8005508:	607b      	str	r3, [r7, #4]
 800550a:	e008      	b.n	800551e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800550c:	4b08      	ldr	r3, [pc, #32]	; (8005530 <xTaskGetSchedulerState+0x38>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005514:	2302      	movs	r3, #2
 8005516:	607b      	str	r3, [r7, #4]
 8005518:	e001      	b.n	800551e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800551a:	2300      	movs	r3, #0
 800551c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800551e:	687b      	ldr	r3, [r7, #4]
	}
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	200004e0 	.word	0x200004e0
 8005530:	200004fc 	.word	0x200004fc

08005534 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005540:	2300      	movs	r3, #0
 8005542:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d072      	beq.n	8005630 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800554a:	4b3c      	ldr	r3, [pc, #240]	; (800563c <xTaskPriorityDisinherit+0x108>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	429a      	cmp	r2, r3
 8005552:	d00c      	beq.n	800556e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	b672      	cpsid	i
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	b662      	cpsie	i
 8005568:	60fb      	str	r3, [r7, #12]
}
 800556a:	bf00      	nop
 800556c:	e7fe      	b.n	800556c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10c      	bne.n	8005590 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	b672      	cpsid	i
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	b662      	cpsie	i
 800558a:	60bb      	str	r3, [r7, #8]
}
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005594:	1e5a      	subs	r2, r3, #1
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d044      	beq.n	8005630 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d140      	bne.n	8005630 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	3304      	adds	r3, #4
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe fd48 	bl	8004048 <uxListRemove>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d115      	bne.n	80055ea <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c2:	491f      	ldr	r1, [pc, #124]	; (8005640 <xTaskPriorityDisinherit+0x10c>)
 80055c4:	4613      	mov	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <xTaskPriorityDisinherit+0xb6>
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	2201      	movs	r2, #1
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	43da      	mvns	r2, r3
 80055e0:	4b18      	ldr	r3, [pc, #96]	; (8005644 <xTaskPriorityDisinherit+0x110>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4013      	ands	r3, r2
 80055e6:	4a17      	ldr	r2, [pc, #92]	; (8005644 <xTaskPriorityDisinherit+0x110>)
 80055e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	f1c3 0207 	rsb	r2, r3, #7
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	2201      	movs	r2, #1
 8005604:	409a      	lsls	r2, r3
 8005606:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <xTaskPriorityDisinherit+0x110>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4313      	orrs	r3, r2
 800560c:	4a0d      	ldr	r2, [pc, #52]	; (8005644 <xTaskPriorityDisinherit+0x110>)
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4a08      	ldr	r2, [pc, #32]	; (8005640 <xTaskPriorityDisinherit+0x10c>)
 800561e:	441a      	add	r2, r3
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	3304      	adds	r3, #4
 8005624:	4619      	mov	r1, r3
 8005626:	4610      	mov	r0, r2
 8005628:	f7fe fcb1 	bl	8003f8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800562c:	2301      	movs	r3, #1
 800562e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005630:	697b      	ldr	r3, [r7, #20]
	}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	200003d4 	.word	0x200003d4
 8005640:	200003d8 	.word	0x200003d8
 8005644:	200004dc 	.word	0x200004dc

08005648 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8005652:	f000 fa73 	bl	8005b3c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8005656:	4b1e      	ldr	r3, [pc, #120]	; (80056d0 <ulTaskNotifyTake+0x88>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d113      	bne.n	8005688 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005660:	4b1b      	ldr	r3, [pc, #108]	; (80056d0 <ulTaskNotifyTake+0x88>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00b      	beq.n	8005688 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005670:	2101      	movs	r1, #1
 8005672:	6838      	ldr	r0, [r7, #0]
 8005674:	f000 f8ec 	bl	8005850 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005678:	4b16      	ldr	r3, [pc, #88]	; (80056d4 <ulTaskNotifyTake+0x8c>)
 800567a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005688:	f000 fa8c 	bl	8005ba4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800568c:	f000 fa56 	bl	8005b3c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005690:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <ulTaskNotifyTake+0x88>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005696:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00c      	beq.n	80056b8 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80056a4:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <ulTaskNotifyTake+0x88>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2200      	movs	r2, #0
 80056aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80056ac:	e004      	b.n	80056b8 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80056ae:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <ulTaskNotifyTake+0x88>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	3a01      	subs	r2, #1
 80056b6:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056b8:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <ulTaskNotifyTake+0x88>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80056c2:	f000 fa6f 	bl	8005ba4 <vPortExitCritical>

		return ulReturn;
 80056c6:	68fb      	ldr	r3, [r7, #12]
	}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	200003d4 	.word	0x200003d4
 80056d4:	e000ed04 	.word	0xe000ed04

080056d8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	; 0x28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	4613      	mov	r3, r2
 80056e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80056e8:	2301      	movs	r3, #1
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10c      	bne.n	800570c <xTaskGenericNotify+0x34>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f6:	b672      	cpsid	i
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	b662      	cpsie	i
 8005706:	61bb      	str	r3, [r7, #24]
}
 8005708:	bf00      	nop
 800570a:	e7fe      	b.n	800570a <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005710:	f000 fa14 	bl	8005b3c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005728:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	2202      	movs	r2, #2
 800572e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	2b04      	cmp	r3, #4
 8005736:	d828      	bhi.n	800578a <xTaskGenericNotify+0xb2>
 8005738:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <xTaskGenericNotify+0x68>)
 800573a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573e:	bf00      	nop
 8005740:	080057af 	.word	0x080057af
 8005744:	08005755 	.word	0x08005755
 8005748:	08005763 	.word	0x08005763
 800574c:	0800576f 	.word	0x0800576f
 8005750:	08005777 	.word	0x08005777
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	431a      	orrs	r2, r3
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005760:	e028      	b.n	80057b4 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800576c:	e022      	b.n	80057b4 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005774:	e01e      	b.n	80057b4 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005776:	7ffb      	ldrb	r3, [r7, #31]
 8005778:	2b02      	cmp	r3, #2
 800577a:	d003      	beq.n	8005784 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005782:	e017      	b.n	80057b4 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 8005784:	2300      	movs	r3, #0
 8005786:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005788:	e014      	b.n	80057b4 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005792:	d00e      	beq.n	80057b2 <xTaskGenericNotify+0xda>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	b672      	cpsid	i
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	b662      	cpsie	i
 80057a8:	617b      	str	r3, [r7, #20]
}
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <xTaskGenericNotify+0xd4>
					break;
 80057ae:	bf00      	nop
 80057b0:	e000      	b.n	80057b4 <xTaskGenericNotify+0xdc>

					break;
 80057b2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80057b4:	7ffb      	ldrb	r3, [r7, #31]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d13b      	bne.n	8005832 <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	3304      	adds	r3, #4
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe fc42 	bl	8004048 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	2201      	movs	r2, #1
 80057ca:	409a      	lsls	r2, r3
 80057cc:	4b1c      	ldr	r3, [pc, #112]	; (8005840 <xTaskGenericNotify+0x168>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	4a1b      	ldr	r2, [pc, #108]	; (8005840 <xTaskGenericNotify+0x168>)
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4a18      	ldr	r2, [pc, #96]	; (8005844 <xTaskGenericNotify+0x16c>)
 80057e4:	441a      	add	r2, r3
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f7fe fbce 	bl	8003f8e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00c      	beq.n	8005814 <xTaskGenericNotify+0x13c>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	b672      	cpsid	i
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	b662      	cpsie	i
 800580e:	613b      	str	r3, [r7, #16]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <xTaskGenericNotify+0x170>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581e:	429a      	cmp	r2, r3
 8005820:	d907      	bls.n	8005832 <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005822:	4b0a      	ldr	r3, [pc, #40]	; (800584c <xTaskGenericNotify+0x174>)
 8005824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005832:	f000 f9b7 	bl	8005ba4 <vPortExitCritical>

		return xReturn;
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005838:	4618      	mov	r0, r3
 800583a:	3728      	adds	r7, #40	; 0x28
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	200004dc 	.word	0x200004dc
 8005844:	200003d8 	.word	0x200003d8
 8005848:	200003d4 	.word	0x200003d4
 800584c:	e000ed04 	.word	0xe000ed04

08005850 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800585a:	4b29      	ldr	r3, [pc, #164]	; (8005900 <prvAddCurrentTaskToDelayedList+0xb0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005860:	4b28      	ldr	r3, [pc, #160]	; (8005904 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3304      	adds	r3, #4
 8005866:	4618      	mov	r0, r3
 8005868:	f7fe fbee 	bl	8004048 <uxListRemove>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10b      	bne.n	800588a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005872:	4b24      	ldr	r3, [pc, #144]	; (8005904 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	2201      	movs	r2, #1
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43da      	mvns	r2, r3
 8005880:	4b21      	ldr	r3, [pc, #132]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4013      	ands	r3, r2
 8005886:	4a20      	ldr	r2, [pc, #128]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005888:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005890:	d10a      	bne.n	80058a8 <prvAddCurrentTaskToDelayedList+0x58>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d007      	beq.n	80058a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005898:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <prvAddCurrentTaskToDelayedList+0xb4>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3304      	adds	r3, #4
 800589e:	4619      	mov	r1, r3
 80058a0:	481a      	ldr	r0, [pc, #104]	; (800590c <prvAddCurrentTaskToDelayedList+0xbc>)
 80058a2:	f7fe fb74 	bl	8003f8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058a6:	e026      	b.n	80058f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4413      	add	r3, r2
 80058ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058b0:	4b14      	ldr	r3, [pc, #80]	; (8005904 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d209      	bcs.n	80058d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058c0:	4b13      	ldr	r3, [pc, #76]	; (8005910 <prvAddCurrentTaskToDelayedList+0xc0>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3304      	adds	r3, #4
 80058ca:	4619      	mov	r1, r3
 80058cc:	4610      	mov	r0, r2
 80058ce:	f7fe fb82 	bl	8003fd6 <vListInsert>
}
 80058d2:	e010      	b.n	80058f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058d4:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <prvAddCurrentTaskToDelayedList+0xc4>)
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3304      	adds	r3, #4
 80058de:	4619      	mov	r1, r3
 80058e0:	4610      	mov	r0, r2
 80058e2:	f7fe fb78 	bl	8003fd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058e6:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <prvAddCurrentTaskToDelayedList+0xc8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d202      	bcs.n	80058f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80058f0:	4a09      	ldr	r2, [pc, #36]	; (8005918 <prvAddCurrentTaskToDelayedList+0xc8>)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6013      	str	r3, [r2, #0]
}
 80058f6:	bf00      	nop
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	200004d8 	.word	0x200004d8
 8005904:	200003d4 	.word	0x200003d4
 8005908:	200004dc 	.word	0x200004dc
 800590c:	200004c0 	.word	0x200004c0
 8005910:	20000490 	.word	0x20000490
 8005914:	2000048c 	.word	0x2000048c
 8005918:	200004f4 	.word	0x200004f4

0800591c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3b04      	subs	r3, #4
 800592c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3b04      	subs	r3, #4
 800593a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f023 0201 	bic.w	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3b04      	subs	r3, #4
 800594a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800594c:	4a0c      	ldr	r2, [pc, #48]	; (8005980 <pxPortInitialiseStack+0x64>)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3b14      	subs	r3, #20
 8005956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3b04      	subs	r3, #4
 8005962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f06f 0202 	mvn.w	r2, #2
 800596a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3b20      	subs	r3, #32
 8005970:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005972:	68fb      	ldr	r3, [r7, #12]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	08005985 	.word	0x08005985

08005984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800598e:	4b14      	ldr	r3, [pc, #80]	; (80059e0 <prvTaskExitError+0x5c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005996:	d00c      	beq.n	80059b2 <prvTaskExitError+0x2e>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599c:	b672      	cpsid	i
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	b662      	cpsie	i
 80059ac:	60fb      	str	r3, [r7, #12]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <prvTaskExitError+0x2c>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	b672      	cpsid	i
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	b662      	cpsie	i
 80059c6:	60bb      	str	r3, [r7, #8]
}
 80059c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059ca:	bf00      	nop
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0fc      	beq.n	80059cc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059d2:	bf00      	nop
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	2000000c 	.word	0x2000000c
	...

080059f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059f0:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <pxCurrentTCBConst2>)
 80059f2:	6819      	ldr	r1, [r3, #0]
 80059f4:	6808      	ldr	r0, [r1, #0]
 80059f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fa:	f380 8809 	msr	PSP, r0
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f04f 0000 	mov.w	r0, #0
 8005a06:	f380 8811 	msr	BASEPRI, r0
 8005a0a:	4770      	bx	lr
 8005a0c:	f3af 8000 	nop.w

08005a10 <pxCurrentTCBConst2>:
 8005a10:	200003d4 	.word	0x200003d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop

08005a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a18:	4808      	ldr	r0, [pc, #32]	; (8005a3c <prvPortStartFirstTask+0x24>)
 8005a1a:	6800      	ldr	r0, [r0, #0]
 8005a1c:	6800      	ldr	r0, [r0, #0]
 8005a1e:	f380 8808 	msr	MSP, r0
 8005a22:	f04f 0000 	mov.w	r0, #0
 8005a26:	f380 8814 	msr	CONTROL, r0
 8005a2a:	b662      	cpsie	i
 8005a2c:	b661      	cpsie	f
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	df00      	svc	0
 8005a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a3a:	bf00      	nop
 8005a3c:	e000ed08 	.word	0xe000ed08

08005a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a46:	4b37      	ldr	r3, [pc, #220]	; (8005b24 <xPortStartScheduler+0xe4>)
 8005a48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	22ff      	movs	r2, #255	; 0xff
 8005a56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	4b2f      	ldr	r3, [pc, #188]	; (8005b28 <xPortStartScheduler+0xe8>)
 8005a6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a6e:	4b2f      	ldr	r3, [pc, #188]	; (8005b2c <xPortStartScheduler+0xec>)
 8005a70:	2207      	movs	r2, #7
 8005a72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a74:	e009      	b.n	8005a8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005a76:	4b2d      	ldr	r3, [pc, #180]	; (8005b2c <xPortStartScheduler+0xec>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	4a2b      	ldr	r2, [pc, #172]	; (8005b2c <xPortStartScheduler+0xec>)
 8005a7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a92:	2b80      	cmp	r3, #128	; 0x80
 8005a94:	d0ef      	beq.n	8005a76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a96:	4b25      	ldr	r3, [pc, #148]	; (8005b2c <xPortStartScheduler+0xec>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f1c3 0307 	rsb	r3, r3, #7
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d00c      	beq.n	8005abc <xPortStartScheduler+0x7c>
	__asm volatile
 8005aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa6:	b672      	cpsid	i
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	b662      	cpsie	i
 8005ab6:	60bb      	str	r3, [r7, #8]
}
 8005ab8:	bf00      	nop
 8005aba:	e7fe      	b.n	8005aba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005abc:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <xPortStartScheduler+0xec>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	4a1a      	ldr	r2, [pc, #104]	; (8005b2c <xPortStartScheduler+0xec>)
 8005ac4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ac6:	4b19      	ldr	r3, [pc, #100]	; (8005b2c <xPortStartScheduler+0xec>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ace:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <xPortStartScheduler+0xec>)
 8005ad0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ada:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <xPortStartScheduler+0xf0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a14      	ldr	r2, [pc, #80]	; (8005b30 <xPortStartScheduler+0xf0>)
 8005ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ae4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ae6:	4b12      	ldr	r3, [pc, #72]	; (8005b30 <xPortStartScheduler+0xf0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a11      	ldr	r2, [pc, #68]	; (8005b30 <xPortStartScheduler+0xf0>)
 8005aec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005af0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005af2:	f000 f8dd 	bl	8005cb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005af6:	4b0f      	ldr	r3, [pc, #60]	; (8005b34 <xPortStartScheduler+0xf4>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005afc:	f000 f8fc 	bl	8005cf8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b00:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <xPortStartScheduler+0xf8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a0c      	ldr	r2, [pc, #48]	; (8005b38 <xPortStartScheduler+0xf8>)
 8005b06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b0a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b0c:	f7ff ff84 	bl	8005a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b10:	f7ff faaa 	bl	8005068 <vTaskSwitchContext>
	prvTaskExitError();
 8005b14:	f7ff ff36 	bl	8005984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	e000e400 	.word	0xe000e400
 8005b28:	20000500 	.word	0x20000500
 8005b2c:	20000504 	.word	0x20000504
 8005b30:	e000ed20 	.word	0xe000ed20
 8005b34:	2000000c 	.word	0x2000000c
 8005b38:	e000ef34 	.word	0xe000ef34

08005b3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	b672      	cpsid	i
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	b662      	cpsie	i
 8005b56:	607b      	str	r3, [r7, #4]
}
 8005b58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b5a:	4b10      	ldr	r3, [pc, #64]	; (8005b9c <vPortEnterCritical+0x60>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	4a0e      	ldr	r2, [pc, #56]	; (8005b9c <vPortEnterCritical+0x60>)
 8005b62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b64:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <vPortEnterCritical+0x60>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d111      	bne.n	8005b90 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <vPortEnterCritical+0x64>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00c      	beq.n	8005b90 <vPortEnterCritical+0x54>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	b672      	cpsid	i
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	b662      	cpsie	i
 8005b8a:	603b      	str	r3, [r7, #0]
}
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <vPortEnterCritical+0x52>
	}
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	2000000c 	.word	0x2000000c
 8005ba0:	e000ed04 	.word	0xe000ed04

08005ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005baa:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <vPortExitCritical+0x54>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10c      	bne.n	8005bcc <vPortExitCritical+0x28>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	b672      	cpsid	i
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	b662      	cpsie	i
 8005bc6:	607b      	str	r3, [r7, #4]
}
 8005bc8:	bf00      	nop
 8005bca:	e7fe      	b.n	8005bca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <vPortExitCritical+0x54>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	4a09      	ldr	r2, [pc, #36]	; (8005bf8 <vPortExitCritical+0x54>)
 8005bd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bd6:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <vPortExitCritical+0x54>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d105      	bne.n	8005bea <vPortExitCritical+0x46>
 8005bde:	2300      	movs	r3, #0
 8005be0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005be8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	2000000c 	.word	0x2000000c
 8005bfc:	00000000 	.word	0x00000000

08005c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c00:	f3ef 8009 	mrs	r0, PSP
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <pxCurrentTCBConst>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	f01e 0f10 	tst.w	lr, #16
 8005c10:	bf08      	it	eq
 8005c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1a:	6010      	str	r0, [r2, #0]
 8005c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c24:	b672      	cpsid	i
 8005c26:	f380 8811 	msr	BASEPRI, r0
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	b662      	cpsie	i
 8005c34:	f7ff fa18 	bl	8005068 <vTaskSwitchContext>
 8005c38:	f04f 0000 	mov.w	r0, #0
 8005c3c:	f380 8811 	msr	BASEPRI, r0
 8005c40:	bc09      	pop	{r0, r3}
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	6808      	ldr	r0, [r1, #0]
 8005c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4a:	f01e 0f10 	tst.w	lr, #16
 8005c4e:	bf08      	it	eq
 8005c50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c54:	f380 8809 	msr	PSP, r0
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop

08005c60 <pxCurrentTCBConst>:
 8005c60:	200003d4 	.word	0x200003d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop

08005c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	b672      	cpsid	i
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	b662      	cpsie	i
 8005c82:	607b      	str	r3, [r7, #4]
}
 8005c84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c86:	f7ff f935 	bl	8004ef4 <xTaskIncrementTick>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c90:	4b06      	ldr	r3, [pc, #24]	; (8005cac <SysTick_Handler+0x44>)
 8005c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	f383 8811 	msr	BASEPRI, r3
}
 8005ca2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ca4:	bf00      	nop
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	e000ed04 	.word	0xe000ed04

08005cb0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <vPortSetupTimerInterrupt+0x34>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cba:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <vPortSetupTimerInterrupt+0x38>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <vPortSetupTimerInterrupt+0x3c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a0a      	ldr	r2, [pc, #40]	; (8005cf0 <vPortSetupTimerInterrupt+0x40>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	099b      	lsrs	r3, r3, #6
 8005ccc:	4a09      	ldr	r2, [pc, #36]	; (8005cf4 <vPortSetupTimerInterrupt+0x44>)
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cd2:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <vPortSetupTimerInterrupt+0x34>)
 8005cd4:	2207      	movs	r2, #7
 8005cd6:	601a      	str	r2, [r3, #0]
}
 8005cd8:	bf00      	nop
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	e000e010 	.word	0xe000e010
 8005ce8:	e000e018 	.word	0xe000e018
 8005cec:	20000000 	.word	0x20000000
 8005cf0:	10624dd3 	.word	0x10624dd3
 8005cf4:	e000e014 	.word	0xe000e014

08005cf8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005cf8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d08 <vPortEnableVFP+0x10>
 8005cfc:	6801      	ldr	r1, [r0, #0]
 8005cfe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d02:	6001      	str	r1, [r0, #0]
 8005d04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d06:	bf00      	nop
 8005d08:	e000ed88 	.word	0xe000ed88

08005d0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08a      	sub	sp, #40	; 0x28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d18:	f7ff f840 	bl	8004d9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d1c:	4b5b      	ldr	r3, [pc, #364]	; (8005e8c <pvPortMalloc+0x180>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d24:	f000 f91a 	bl	8005f5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d28:	4b59      	ldr	r3, [pc, #356]	; (8005e90 <pvPortMalloc+0x184>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f040 8092 	bne.w	8005e5a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01f      	beq.n	8005d7c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4413      	add	r3, r2
 8005d42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d016      	beq.n	8005d7c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f023 0307 	bic.w	r3, r3, #7
 8005d54:	3308      	adds	r3, #8
 8005d56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00c      	beq.n	8005d7c <pvPortMalloc+0x70>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	b672      	cpsid	i
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	b662      	cpsie	i
 8005d76:	617b      	str	r3, [r7, #20]
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d06b      	beq.n	8005e5a <pvPortMalloc+0x14e>
 8005d82:	4b44      	ldr	r3, [pc, #272]	; (8005e94 <pvPortMalloc+0x188>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d866      	bhi.n	8005e5a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d8c:	4b42      	ldr	r3, [pc, #264]	; (8005e98 <pvPortMalloc+0x18c>)
 8005d8e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d90:	4b41      	ldr	r3, [pc, #260]	; (8005e98 <pvPortMalloc+0x18c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d96:	e004      	b.n	8005da2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d903      	bls.n	8005db4 <pvPortMalloc+0xa8>
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f1      	bne.n	8005d98 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005db4:	4b35      	ldr	r3, [pc, #212]	; (8005e8c <pvPortMalloc+0x180>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d04d      	beq.n	8005e5a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2208      	movs	r2, #8
 8005dc4:	4413      	add	r3, r2
 8005dc6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	1ad2      	subs	r2, r2, r3
 8005dd8:	2308      	movs	r3, #8
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d921      	bls.n	8005e24 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4413      	add	r3, r2
 8005de6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00c      	beq.n	8005e0c <pvPortMalloc+0x100>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	b672      	cpsid	i
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	b662      	cpsie	i
 8005e06:	613b      	str	r3, [r7, #16]
}
 8005e08:	bf00      	nop
 8005e0a:	e7fe      	b.n	8005e0a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	1ad2      	subs	r2, r2, r3
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e1e:	69b8      	ldr	r0, [r7, #24]
 8005e20:	f000 f8fe 	bl	8006020 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e24:	4b1b      	ldr	r3, [pc, #108]	; (8005e94 <pvPortMalloc+0x188>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	4a19      	ldr	r2, [pc, #100]	; (8005e94 <pvPortMalloc+0x188>)
 8005e30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e32:	4b18      	ldr	r3, [pc, #96]	; (8005e94 <pvPortMalloc+0x188>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b19      	ldr	r3, [pc, #100]	; (8005e9c <pvPortMalloc+0x190>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d203      	bcs.n	8005e46 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e3e:	4b15      	ldr	r3, [pc, #84]	; (8005e94 <pvPortMalloc+0x188>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a16      	ldr	r2, [pc, #88]	; (8005e9c <pvPortMalloc+0x190>)
 8005e44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <pvPortMalloc+0x184>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e5a:	f7fe ffad 	bl	8004db8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00c      	beq.n	8005e82 <pvPortMalloc+0x176>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	b672      	cpsid	i
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	b662      	cpsie	i
 8005e7c:	60fb      	str	r3, [r7, #12]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <pvPortMalloc+0x174>
	return pvReturn;
 8005e82:	69fb      	ldr	r3, [r7, #28]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3728      	adds	r7, #40	; 0x28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	20004110 	.word	0x20004110
 8005e90:	2000411c 	.word	0x2000411c
 8005e94:	20004114 	.word	0x20004114
 8005e98:	20004108 	.word	0x20004108
 8005e9c:	20004118 	.word	0x20004118

08005ea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d04c      	beq.n	8005f4c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	425b      	negs	r3, r3
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4413      	add	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	4b23      	ldr	r3, [pc, #140]	; (8005f54 <vPortFree+0xb4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10c      	bne.n	8005ee8 <vPortFree+0x48>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	b672      	cpsid	i
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	b662      	cpsie	i
 8005ee2:	60fb      	str	r3, [r7, #12]
}
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00c      	beq.n	8005f0a <vPortFree+0x6a>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	b672      	cpsid	i
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	b662      	cpsie	i
 8005f04:	60bb      	str	r3, [r7, #8]
}
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <vPortFree+0xb4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4013      	ands	r3, r2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d019      	beq.n	8005f4c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d115      	bne.n	8005f4c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <vPortFree+0xb4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	401a      	ands	r2, r3
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f30:	f7fe ff34 	bl	8004d9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <vPortFree+0xb8>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	4a06      	ldr	r2, [pc, #24]	; (8005f58 <vPortFree+0xb8>)
 8005f40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f42:	6938      	ldr	r0, [r7, #16]
 8005f44:	f000 f86c 	bl	8006020 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005f48:	f7fe ff36 	bl	8004db8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f4c:	bf00      	nop
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	2000411c 	.word	0x2000411c
 8005f58:	20004114 	.word	0x20004114

08005f5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f62:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f68:	4b27      	ldr	r3, [pc, #156]	; (8006008 <prvHeapInit+0xac>)
 8005f6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00c      	beq.n	8005f90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3307      	adds	r3, #7
 8005f7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0307 	bic.w	r3, r3, #7
 8005f82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	4a1f      	ldr	r2, [pc, #124]	; (8006008 <prvHeapInit+0xac>)
 8005f8c:	4413      	add	r3, r2
 8005f8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f94:	4a1d      	ldr	r2, [pc, #116]	; (800600c <prvHeapInit+0xb0>)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f9a:	4b1c      	ldr	r3, [pc, #112]	; (800600c <prvHeapInit+0xb0>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005fa8:	2208      	movs	r2, #8
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0307 	bic.w	r3, r3, #7
 8005fb6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4a15      	ldr	r2, [pc, #84]	; (8006010 <prvHeapInit+0xb4>)
 8005fbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fbe:	4b14      	ldr	r3, [pc, #80]	; (8006010 <prvHeapInit+0xb4>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005fc6:	4b12      	ldr	r3, [pc, #72]	; (8006010 <prvHeapInit+0xb4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	1ad2      	subs	r2, r2, r3
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <prvHeapInit+0xb4>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	4a0a      	ldr	r2, [pc, #40]	; (8006014 <prvHeapInit+0xb8>)
 8005fea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	4a09      	ldr	r2, [pc, #36]	; (8006018 <prvHeapInit+0xbc>)
 8005ff2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ff4:	4b09      	ldr	r3, [pc, #36]	; (800601c <prvHeapInit+0xc0>)
 8005ff6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ffa:	601a      	str	r2, [r3, #0]
}
 8005ffc:	bf00      	nop
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	20000508 	.word	0x20000508
 800600c:	20004108 	.word	0x20004108
 8006010:	20004110 	.word	0x20004110
 8006014:	20004118 	.word	0x20004118
 8006018:	20004114 	.word	0x20004114
 800601c:	2000411c 	.word	0x2000411c

08006020 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006028:	4b28      	ldr	r3, [pc, #160]	; (80060cc <prvInsertBlockIntoFreeList+0xac>)
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	e002      	b.n	8006034 <prvInsertBlockIntoFreeList+0x14>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	429a      	cmp	r2, r3
 800603c:	d8f7      	bhi.n	800602e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	4413      	add	r3, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	429a      	cmp	r2, r3
 800604e:	d108      	bne.n	8006062 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	441a      	add	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	441a      	add	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d118      	bne.n	80060a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <prvInsertBlockIntoFreeList+0xb0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d00d      	beq.n	800609e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	441a      	add	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	e008      	b.n	80060b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800609e:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <prvInsertBlockIntoFreeList+0xb0>)
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	e003      	b.n	80060b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d002      	beq.n	80060be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	20004108 	.word	0x20004108
 80060d0:	20004110 	.word	0x20004110

080060d4 <std>:
 80060d4:	2300      	movs	r3, #0
 80060d6:	b510      	push	{r4, lr}
 80060d8:	4604      	mov	r4, r0
 80060da:	e9c0 3300 	strd	r3, r3, [r0]
 80060de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060e2:	6083      	str	r3, [r0, #8]
 80060e4:	8181      	strh	r1, [r0, #12]
 80060e6:	6643      	str	r3, [r0, #100]	; 0x64
 80060e8:	81c2      	strh	r2, [r0, #14]
 80060ea:	6183      	str	r3, [r0, #24]
 80060ec:	4619      	mov	r1, r3
 80060ee:	2208      	movs	r2, #8
 80060f0:	305c      	adds	r0, #92	; 0x5c
 80060f2:	f000 f9f7 	bl	80064e4 <memset>
 80060f6:	4b0d      	ldr	r3, [pc, #52]	; (800612c <std+0x58>)
 80060f8:	6263      	str	r3, [r4, #36]	; 0x24
 80060fa:	4b0d      	ldr	r3, [pc, #52]	; (8006130 <std+0x5c>)
 80060fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80060fe:	4b0d      	ldr	r3, [pc, #52]	; (8006134 <std+0x60>)
 8006100:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006102:	4b0d      	ldr	r3, [pc, #52]	; (8006138 <std+0x64>)
 8006104:	6323      	str	r3, [r4, #48]	; 0x30
 8006106:	4b0d      	ldr	r3, [pc, #52]	; (800613c <std+0x68>)
 8006108:	6224      	str	r4, [r4, #32]
 800610a:	429c      	cmp	r4, r3
 800610c:	d006      	beq.n	800611c <std+0x48>
 800610e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006112:	4294      	cmp	r4, r2
 8006114:	d002      	beq.n	800611c <std+0x48>
 8006116:	33d0      	adds	r3, #208	; 0xd0
 8006118:	429c      	cmp	r4, r3
 800611a:	d105      	bne.n	8006128 <std+0x54>
 800611c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006124:	f000 ba56 	b.w	80065d4 <__retarget_lock_init_recursive>
 8006128:	bd10      	pop	{r4, pc}
 800612a:	bf00      	nop
 800612c:	08006335 	.word	0x08006335
 8006130:	08006357 	.word	0x08006357
 8006134:	0800638f 	.word	0x0800638f
 8006138:	080063b3 	.word	0x080063b3
 800613c:	20004120 	.word	0x20004120

08006140 <stdio_exit_handler>:
 8006140:	4a02      	ldr	r2, [pc, #8]	; (800614c <stdio_exit_handler+0xc>)
 8006142:	4903      	ldr	r1, [pc, #12]	; (8006150 <stdio_exit_handler+0x10>)
 8006144:	4803      	ldr	r0, [pc, #12]	; (8006154 <stdio_exit_handler+0x14>)
 8006146:	f000 b869 	b.w	800621c <_fwalk_sglue>
 800614a:	bf00      	nop
 800614c:	20000010 	.word	0x20000010
 8006150:	08006e9d 	.word	0x08006e9d
 8006154:	2000001c 	.word	0x2000001c

08006158 <cleanup_stdio>:
 8006158:	6841      	ldr	r1, [r0, #4]
 800615a:	4b0c      	ldr	r3, [pc, #48]	; (800618c <cleanup_stdio+0x34>)
 800615c:	4299      	cmp	r1, r3
 800615e:	b510      	push	{r4, lr}
 8006160:	4604      	mov	r4, r0
 8006162:	d001      	beq.n	8006168 <cleanup_stdio+0x10>
 8006164:	f000 fe9a 	bl	8006e9c <_fflush_r>
 8006168:	68a1      	ldr	r1, [r4, #8]
 800616a:	4b09      	ldr	r3, [pc, #36]	; (8006190 <cleanup_stdio+0x38>)
 800616c:	4299      	cmp	r1, r3
 800616e:	d002      	beq.n	8006176 <cleanup_stdio+0x1e>
 8006170:	4620      	mov	r0, r4
 8006172:	f000 fe93 	bl	8006e9c <_fflush_r>
 8006176:	68e1      	ldr	r1, [r4, #12]
 8006178:	4b06      	ldr	r3, [pc, #24]	; (8006194 <cleanup_stdio+0x3c>)
 800617a:	4299      	cmp	r1, r3
 800617c:	d004      	beq.n	8006188 <cleanup_stdio+0x30>
 800617e:	4620      	mov	r0, r4
 8006180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006184:	f000 be8a 	b.w	8006e9c <_fflush_r>
 8006188:	bd10      	pop	{r4, pc}
 800618a:	bf00      	nop
 800618c:	20004120 	.word	0x20004120
 8006190:	20004188 	.word	0x20004188
 8006194:	200041f0 	.word	0x200041f0

08006198 <global_stdio_init.part.0>:
 8006198:	b510      	push	{r4, lr}
 800619a:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <global_stdio_init.part.0+0x30>)
 800619c:	4c0b      	ldr	r4, [pc, #44]	; (80061cc <global_stdio_init.part.0+0x34>)
 800619e:	4a0c      	ldr	r2, [pc, #48]	; (80061d0 <global_stdio_init.part.0+0x38>)
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	4620      	mov	r0, r4
 80061a4:	2200      	movs	r2, #0
 80061a6:	2104      	movs	r1, #4
 80061a8:	f7ff ff94 	bl	80060d4 <std>
 80061ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80061b0:	2201      	movs	r2, #1
 80061b2:	2109      	movs	r1, #9
 80061b4:	f7ff ff8e 	bl	80060d4 <std>
 80061b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80061bc:	2202      	movs	r2, #2
 80061be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c2:	2112      	movs	r1, #18
 80061c4:	f7ff bf86 	b.w	80060d4 <std>
 80061c8:	20004258 	.word	0x20004258
 80061cc:	20004120 	.word	0x20004120
 80061d0:	08006141 	.word	0x08006141

080061d4 <__sfp_lock_acquire>:
 80061d4:	4801      	ldr	r0, [pc, #4]	; (80061dc <__sfp_lock_acquire+0x8>)
 80061d6:	f000 b9fe 	b.w	80065d6 <__retarget_lock_acquire_recursive>
 80061da:	bf00      	nop
 80061dc:	20004261 	.word	0x20004261

080061e0 <__sfp_lock_release>:
 80061e0:	4801      	ldr	r0, [pc, #4]	; (80061e8 <__sfp_lock_release+0x8>)
 80061e2:	f000 b9f9 	b.w	80065d8 <__retarget_lock_release_recursive>
 80061e6:	bf00      	nop
 80061e8:	20004261 	.word	0x20004261

080061ec <__sinit>:
 80061ec:	b510      	push	{r4, lr}
 80061ee:	4604      	mov	r4, r0
 80061f0:	f7ff fff0 	bl	80061d4 <__sfp_lock_acquire>
 80061f4:	6a23      	ldr	r3, [r4, #32]
 80061f6:	b11b      	cbz	r3, 8006200 <__sinit+0x14>
 80061f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061fc:	f7ff bff0 	b.w	80061e0 <__sfp_lock_release>
 8006200:	4b04      	ldr	r3, [pc, #16]	; (8006214 <__sinit+0x28>)
 8006202:	6223      	str	r3, [r4, #32]
 8006204:	4b04      	ldr	r3, [pc, #16]	; (8006218 <__sinit+0x2c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f5      	bne.n	80061f8 <__sinit+0xc>
 800620c:	f7ff ffc4 	bl	8006198 <global_stdio_init.part.0>
 8006210:	e7f2      	b.n	80061f8 <__sinit+0xc>
 8006212:	bf00      	nop
 8006214:	08006159 	.word	0x08006159
 8006218:	20004258 	.word	0x20004258

0800621c <_fwalk_sglue>:
 800621c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006220:	4607      	mov	r7, r0
 8006222:	4688      	mov	r8, r1
 8006224:	4614      	mov	r4, r2
 8006226:	2600      	movs	r6, #0
 8006228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800622c:	f1b9 0901 	subs.w	r9, r9, #1
 8006230:	d505      	bpl.n	800623e <_fwalk_sglue+0x22>
 8006232:	6824      	ldr	r4, [r4, #0]
 8006234:	2c00      	cmp	r4, #0
 8006236:	d1f7      	bne.n	8006228 <_fwalk_sglue+0xc>
 8006238:	4630      	mov	r0, r6
 800623a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800623e:	89ab      	ldrh	r3, [r5, #12]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d907      	bls.n	8006254 <_fwalk_sglue+0x38>
 8006244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006248:	3301      	adds	r3, #1
 800624a:	d003      	beq.n	8006254 <_fwalk_sglue+0x38>
 800624c:	4629      	mov	r1, r5
 800624e:	4638      	mov	r0, r7
 8006250:	47c0      	blx	r8
 8006252:	4306      	orrs	r6, r0
 8006254:	3568      	adds	r5, #104	; 0x68
 8006256:	e7e9      	b.n	800622c <_fwalk_sglue+0x10>

08006258 <iprintf>:
 8006258:	b40f      	push	{r0, r1, r2, r3}
 800625a:	b507      	push	{r0, r1, r2, lr}
 800625c:	4906      	ldr	r1, [pc, #24]	; (8006278 <iprintf+0x20>)
 800625e:	ab04      	add	r3, sp, #16
 8006260:	6808      	ldr	r0, [r1, #0]
 8006262:	f853 2b04 	ldr.w	r2, [r3], #4
 8006266:	6881      	ldr	r1, [r0, #8]
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	f000 fae7 	bl	800683c <_vfiprintf_r>
 800626e:	b003      	add	sp, #12
 8006270:	f85d eb04 	ldr.w	lr, [sp], #4
 8006274:	b004      	add	sp, #16
 8006276:	4770      	bx	lr
 8006278:	20000068 	.word	0x20000068

0800627c <_puts_r>:
 800627c:	6a03      	ldr	r3, [r0, #32]
 800627e:	b570      	push	{r4, r5, r6, lr}
 8006280:	6884      	ldr	r4, [r0, #8]
 8006282:	4605      	mov	r5, r0
 8006284:	460e      	mov	r6, r1
 8006286:	b90b      	cbnz	r3, 800628c <_puts_r+0x10>
 8006288:	f7ff ffb0 	bl	80061ec <__sinit>
 800628c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800628e:	07db      	lsls	r3, r3, #31
 8006290:	d405      	bmi.n	800629e <_puts_r+0x22>
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	0598      	lsls	r0, r3, #22
 8006296:	d402      	bmi.n	800629e <_puts_r+0x22>
 8006298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800629a:	f000 f99c 	bl	80065d6 <__retarget_lock_acquire_recursive>
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	0719      	lsls	r1, r3, #28
 80062a2:	d513      	bpl.n	80062cc <_puts_r+0x50>
 80062a4:	6923      	ldr	r3, [r4, #16]
 80062a6:	b18b      	cbz	r3, 80062cc <_puts_r+0x50>
 80062a8:	3e01      	subs	r6, #1
 80062aa:	68a3      	ldr	r3, [r4, #8]
 80062ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062b0:	3b01      	subs	r3, #1
 80062b2:	60a3      	str	r3, [r4, #8]
 80062b4:	b9e9      	cbnz	r1, 80062f2 <_puts_r+0x76>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	da2e      	bge.n	8006318 <_puts_r+0x9c>
 80062ba:	4622      	mov	r2, r4
 80062bc:	210a      	movs	r1, #10
 80062be:	4628      	mov	r0, r5
 80062c0:	f000 f87b 	bl	80063ba <__swbuf_r>
 80062c4:	3001      	adds	r0, #1
 80062c6:	d007      	beq.n	80062d8 <_puts_r+0x5c>
 80062c8:	250a      	movs	r5, #10
 80062ca:	e007      	b.n	80062dc <_puts_r+0x60>
 80062cc:	4621      	mov	r1, r4
 80062ce:	4628      	mov	r0, r5
 80062d0:	f000 f8b0 	bl	8006434 <__swsetup_r>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d0e7      	beq.n	80062a8 <_puts_r+0x2c>
 80062d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80062dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062de:	07da      	lsls	r2, r3, #31
 80062e0:	d405      	bmi.n	80062ee <_puts_r+0x72>
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	059b      	lsls	r3, r3, #22
 80062e6:	d402      	bmi.n	80062ee <_puts_r+0x72>
 80062e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062ea:	f000 f975 	bl	80065d8 <__retarget_lock_release_recursive>
 80062ee:	4628      	mov	r0, r5
 80062f0:	bd70      	pop	{r4, r5, r6, pc}
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da04      	bge.n	8006300 <_puts_r+0x84>
 80062f6:	69a2      	ldr	r2, [r4, #24]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	dc06      	bgt.n	800630a <_puts_r+0x8e>
 80062fc:	290a      	cmp	r1, #10
 80062fe:	d004      	beq.n	800630a <_puts_r+0x8e>
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	6022      	str	r2, [r4, #0]
 8006306:	7019      	strb	r1, [r3, #0]
 8006308:	e7cf      	b.n	80062aa <_puts_r+0x2e>
 800630a:	4622      	mov	r2, r4
 800630c:	4628      	mov	r0, r5
 800630e:	f000 f854 	bl	80063ba <__swbuf_r>
 8006312:	3001      	adds	r0, #1
 8006314:	d1c9      	bne.n	80062aa <_puts_r+0x2e>
 8006316:	e7df      	b.n	80062d8 <_puts_r+0x5c>
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	250a      	movs	r5, #10
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	6022      	str	r2, [r4, #0]
 8006320:	701d      	strb	r5, [r3, #0]
 8006322:	e7db      	b.n	80062dc <_puts_r+0x60>

08006324 <puts>:
 8006324:	4b02      	ldr	r3, [pc, #8]	; (8006330 <puts+0xc>)
 8006326:	4601      	mov	r1, r0
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	f7ff bfa7 	b.w	800627c <_puts_r>
 800632e:	bf00      	nop
 8006330:	20000068 	.word	0x20000068

08006334 <__sread>:
 8006334:	b510      	push	{r4, lr}
 8006336:	460c      	mov	r4, r1
 8006338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800633c:	f000 f8fc 	bl	8006538 <_read_r>
 8006340:	2800      	cmp	r0, #0
 8006342:	bfab      	itete	ge
 8006344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006346:	89a3      	ldrhlt	r3, [r4, #12]
 8006348:	181b      	addge	r3, r3, r0
 800634a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800634e:	bfac      	ite	ge
 8006350:	6563      	strge	r3, [r4, #84]	; 0x54
 8006352:	81a3      	strhlt	r3, [r4, #12]
 8006354:	bd10      	pop	{r4, pc}

08006356 <__swrite>:
 8006356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800635a:	461f      	mov	r7, r3
 800635c:	898b      	ldrh	r3, [r1, #12]
 800635e:	05db      	lsls	r3, r3, #23
 8006360:	4605      	mov	r5, r0
 8006362:	460c      	mov	r4, r1
 8006364:	4616      	mov	r6, r2
 8006366:	d505      	bpl.n	8006374 <__swrite+0x1e>
 8006368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800636c:	2302      	movs	r3, #2
 800636e:	2200      	movs	r2, #0
 8006370:	f000 f8d0 	bl	8006514 <_lseek_r>
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800637a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800637e:	81a3      	strh	r3, [r4, #12]
 8006380:	4632      	mov	r2, r6
 8006382:	463b      	mov	r3, r7
 8006384:	4628      	mov	r0, r5
 8006386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800638a:	f000 b8e7 	b.w	800655c <_write_r>

0800638e <__sseek>:
 800638e:	b510      	push	{r4, lr}
 8006390:	460c      	mov	r4, r1
 8006392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006396:	f000 f8bd 	bl	8006514 <_lseek_r>
 800639a:	1c43      	adds	r3, r0, #1
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	bf15      	itete	ne
 80063a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80063a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063aa:	81a3      	strheq	r3, [r4, #12]
 80063ac:	bf18      	it	ne
 80063ae:	81a3      	strhne	r3, [r4, #12]
 80063b0:	bd10      	pop	{r4, pc}

080063b2 <__sclose>:
 80063b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b6:	f000 b89d 	b.w	80064f4 <_close_r>

080063ba <__swbuf_r>:
 80063ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063bc:	460e      	mov	r6, r1
 80063be:	4614      	mov	r4, r2
 80063c0:	4605      	mov	r5, r0
 80063c2:	b118      	cbz	r0, 80063cc <__swbuf_r+0x12>
 80063c4:	6a03      	ldr	r3, [r0, #32]
 80063c6:	b90b      	cbnz	r3, 80063cc <__swbuf_r+0x12>
 80063c8:	f7ff ff10 	bl	80061ec <__sinit>
 80063cc:	69a3      	ldr	r3, [r4, #24]
 80063ce:	60a3      	str	r3, [r4, #8]
 80063d0:	89a3      	ldrh	r3, [r4, #12]
 80063d2:	071a      	lsls	r2, r3, #28
 80063d4:	d525      	bpl.n	8006422 <__swbuf_r+0x68>
 80063d6:	6923      	ldr	r3, [r4, #16]
 80063d8:	b31b      	cbz	r3, 8006422 <__swbuf_r+0x68>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	6922      	ldr	r2, [r4, #16]
 80063de:	1a98      	subs	r0, r3, r2
 80063e0:	6963      	ldr	r3, [r4, #20]
 80063e2:	b2f6      	uxtb	r6, r6
 80063e4:	4283      	cmp	r3, r0
 80063e6:	4637      	mov	r7, r6
 80063e8:	dc04      	bgt.n	80063f4 <__swbuf_r+0x3a>
 80063ea:	4621      	mov	r1, r4
 80063ec:	4628      	mov	r0, r5
 80063ee:	f000 fd55 	bl	8006e9c <_fflush_r>
 80063f2:	b9e0      	cbnz	r0, 800642e <__swbuf_r+0x74>
 80063f4:	68a3      	ldr	r3, [r4, #8]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	60a3      	str	r3, [r4, #8]
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	6022      	str	r2, [r4, #0]
 8006400:	701e      	strb	r6, [r3, #0]
 8006402:	6962      	ldr	r2, [r4, #20]
 8006404:	1c43      	adds	r3, r0, #1
 8006406:	429a      	cmp	r2, r3
 8006408:	d004      	beq.n	8006414 <__swbuf_r+0x5a>
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	07db      	lsls	r3, r3, #31
 800640e:	d506      	bpl.n	800641e <__swbuf_r+0x64>
 8006410:	2e0a      	cmp	r6, #10
 8006412:	d104      	bne.n	800641e <__swbuf_r+0x64>
 8006414:	4621      	mov	r1, r4
 8006416:	4628      	mov	r0, r5
 8006418:	f000 fd40 	bl	8006e9c <_fflush_r>
 800641c:	b938      	cbnz	r0, 800642e <__swbuf_r+0x74>
 800641e:	4638      	mov	r0, r7
 8006420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006422:	4621      	mov	r1, r4
 8006424:	4628      	mov	r0, r5
 8006426:	f000 f805 	bl	8006434 <__swsetup_r>
 800642a:	2800      	cmp	r0, #0
 800642c:	d0d5      	beq.n	80063da <__swbuf_r+0x20>
 800642e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006432:	e7f4      	b.n	800641e <__swbuf_r+0x64>

08006434 <__swsetup_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4b2a      	ldr	r3, [pc, #168]	; (80064e0 <__swsetup_r+0xac>)
 8006438:	4605      	mov	r5, r0
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	460c      	mov	r4, r1
 800643e:	b118      	cbz	r0, 8006448 <__swsetup_r+0x14>
 8006440:	6a03      	ldr	r3, [r0, #32]
 8006442:	b90b      	cbnz	r3, 8006448 <__swsetup_r+0x14>
 8006444:	f7ff fed2 	bl	80061ec <__sinit>
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800644e:	0718      	lsls	r0, r3, #28
 8006450:	d422      	bmi.n	8006498 <__swsetup_r+0x64>
 8006452:	06d9      	lsls	r1, r3, #27
 8006454:	d407      	bmi.n	8006466 <__swsetup_r+0x32>
 8006456:	2309      	movs	r3, #9
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800645e:	81a3      	strh	r3, [r4, #12]
 8006460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006464:	e034      	b.n	80064d0 <__swsetup_r+0x9c>
 8006466:	0758      	lsls	r0, r3, #29
 8006468:	d512      	bpl.n	8006490 <__swsetup_r+0x5c>
 800646a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800646c:	b141      	cbz	r1, 8006480 <__swsetup_r+0x4c>
 800646e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006472:	4299      	cmp	r1, r3
 8006474:	d002      	beq.n	800647c <__swsetup_r+0x48>
 8006476:	4628      	mov	r0, r5
 8006478:	f000 f8be 	bl	80065f8 <_free_r>
 800647c:	2300      	movs	r3, #0
 800647e:	6363      	str	r3, [r4, #52]	; 0x34
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006486:	81a3      	strh	r3, [r4, #12]
 8006488:	2300      	movs	r3, #0
 800648a:	6063      	str	r3, [r4, #4]
 800648c:	6923      	ldr	r3, [r4, #16]
 800648e:	6023      	str	r3, [r4, #0]
 8006490:	89a3      	ldrh	r3, [r4, #12]
 8006492:	f043 0308 	orr.w	r3, r3, #8
 8006496:	81a3      	strh	r3, [r4, #12]
 8006498:	6923      	ldr	r3, [r4, #16]
 800649a:	b94b      	cbnz	r3, 80064b0 <__swsetup_r+0x7c>
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064a6:	d003      	beq.n	80064b0 <__swsetup_r+0x7c>
 80064a8:	4621      	mov	r1, r4
 80064aa:	4628      	mov	r0, r5
 80064ac:	f000 fd44 	bl	8006f38 <__smakebuf_r>
 80064b0:	89a0      	ldrh	r0, [r4, #12]
 80064b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064b6:	f010 0301 	ands.w	r3, r0, #1
 80064ba:	d00a      	beq.n	80064d2 <__swsetup_r+0x9e>
 80064bc:	2300      	movs	r3, #0
 80064be:	60a3      	str	r3, [r4, #8]
 80064c0:	6963      	ldr	r3, [r4, #20]
 80064c2:	425b      	negs	r3, r3
 80064c4:	61a3      	str	r3, [r4, #24]
 80064c6:	6923      	ldr	r3, [r4, #16]
 80064c8:	b943      	cbnz	r3, 80064dc <__swsetup_r+0xa8>
 80064ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064ce:	d1c4      	bne.n	800645a <__swsetup_r+0x26>
 80064d0:	bd38      	pop	{r3, r4, r5, pc}
 80064d2:	0781      	lsls	r1, r0, #30
 80064d4:	bf58      	it	pl
 80064d6:	6963      	ldrpl	r3, [r4, #20]
 80064d8:	60a3      	str	r3, [r4, #8]
 80064da:	e7f4      	b.n	80064c6 <__swsetup_r+0x92>
 80064dc:	2000      	movs	r0, #0
 80064de:	e7f7      	b.n	80064d0 <__swsetup_r+0x9c>
 80064e0:	20000068 	.word	0x20000068

080064e4 <memset>:
 80064e4:	4402      	add	r2, r0
 80064e6:	4603      	mov	r3, r0
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d100      	bne.n	80064ee <memset+0xa>
 80064ec:	4770      	bx	lr
 80064ee:	f803 1b01 	strb.w	r1, [r3], #1
 80064f2:	e7f9      	b.n	80064e8 <memset+0x4>

080064f4 <_close_r>:
 80064f4:	b538      	push	{r3, r4, r5, lr}
 80064f6:	4d06      	ldr	r5, [pc, #24]	; (8006510 <_close_r+0x1c>)
 80064f8:	2300      	movs	r3, #0
 80064fa:	4604      	mov	r4, r0
 80064fc:	4608      	mov	r0, r1
 80064fe:	602b      	str	r3, [r5, #0]
 8006500:	f7fa ff53 	bl	80013aa <_close>
 8006504:	1c43      	adds	r3, r0, #1
 8006506:	d102      	bne.n	800650e <_close_r+0x1a>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	b103      	cbz	r3, 800650e <_close_r+0x1a>
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	bd38      	pop	{r3, r4, r5, pc}
 8006510:	2000425c 	.word	0x2000425c

08006514 <_lseek_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4d07      	ldr	r5, [pc, #28]	; (8006534 <_lseek_r+0x20>)
 8006518:	4604      	mov	r4, r0
 800651a:	4608      	mov	r0, r1
 800651c:	4611      	mov	r1, r2
 800651e:	2200      	movs	r2, #0
 8006520:	602a      	str	r2, [r5, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	f7fa ff68 	bl	80013f8 <_lseek>
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d102      	bne.n	8006532 <_lseek_r+0x1e>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	b103      	cbz	r3, 8006532 <_lseek_r+0x1e>
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	2000425c 	.word	0x2000425c

08006538 <_read_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4d07      	ldr	r5, [pc, #28]	; (8006558 <_read_r+0x20>)
 800653c:	4604      	mov	r4, r0
 800653e:	4608      	mov	r0, r1
 8006540:	4611      	mov	r1, r2
 8006542:	2200      	movs	r2, #0
 8006544:	602a      	str	r2, [r5, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	f7fa fef6 	bl	8001338 <_read>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_read_r+0x1e>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	b103      	cbz	r3, 8006556 <_read_r+0x1e>
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	2000425c 	.word	0x2000425c

0800655c <_write_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4d07      	ldr	r5, [pc, #28]	; (800657c <_write_r+0x20>)
 8006560:	4604      	mov	r4, r0
 8006562:	4608      	mov	r0, r1
 8006564:	4611      	mov	r1, r2
 8006566:	2200      	movs	r2, #0
 8006568:	602a      	str	r2, [r5, #0]
 800656a:	461a      	mov	r2, r3
 800656c:	f7fa ff01 	bl	8001372 <_write>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d102      	bne.n	800657a <_write_r+0x1e>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	b103      	cbz	r3, 800657a <_write_r+0x1e>
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	2000425c 	.word	0x2000425c

08006580 <__errno>:
 8006580:	4b01      	ldr	r3, [pc, #4]	; (8006588 <__errno+0x8>)
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20000068 	.word	0x20000068

0800658c <__libc_init_array>:
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	4d0d      	ldr	r5, [pc, #52]	; (80065c4 <__libc_init_array+0x38>)
 8006590:	4c0d      	ldr	r4, [pc, #52]	; (80065c8 <__libc_init_array+0x3c>)
 8006592:	1b64      	subs	r4, r4, r5
 8006594:	10a4      	asrs	r4, r4, #2
 8006596:	2600      	movs	r6, #0
 8006598:	42a6      	cmp	r6, r4
 800659a:	d109      	bne.n	80065b0 <__libc_init_array+0x24>
 800659c:	4d0b      	ldr	r5, [pc, #44]	; (80065cc <__libc_init_array+0x40>)
 800659e:	4c0c      	ldr	r4, [pc, #48]	; (80065d0 <__libc_init_array+0x44>)
 80065a0:	f000 fd38 	bl	8007014 <_init>
 80065a4:	1b64      	subs	r4, r4, r5
 80065a6:	10a4      	asrs	r4, r4, #2
 80065a8:	2600      	movs	r6, #0
 80065aa:	42a6      	cmp	r6, r4
 80065ac:	d105      	bne.n	80065ba <__libc_init_array+0x2e>
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b4:	4798      	blx	r3
 80065b6:	3601      	adds	r6, #1
 80065b8:	e7ee      	b.n	8006598 <__libc_init_array+0xc>
 80065ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80065be:	4798      	blx	r3
 80065c0:	3601      	adds	r6, #1
 80065c2:	e7f2      	b.n	80065aa <__libc_init_array+0x1e>
 80065c4:	0800712c 	.word	0x0800712c
 80065c8:	0800712c 	.word	0x0800712c
 80065cc:	0800712c 	.word	0x0800712c
 80065d0:	08007130 	.word	0x08007130

080065d4 <__retarget_lock_init_recursive>:
 80065d4:	4770      	bx	lr

080065d6 <__retarget_lock_acquire_recursive>:
 80065d6:	4770      	bx	lr

080065d8 <__retarget_lock_release_recursive>:
 80065d8:	4770      	bx	lr

080065da <memcpy>:
 80065da:	440a      	add	r2, r1
 80065dc:	4291      	cmp	r1, r2
 80065de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80065e2:	d100      	bne.n	80065e6 <memcpy+0xc>
 80065e4:	4770      	bx	lr
 80065e6:	b510      	push	{r4, lr}
 80065e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065f0:	4291      	cmp	r1, r2
 80065f2:	d1f9      	bne.n	80065e8 <memcpy+0xe>
 80065f4:	bd10      	pop	{r4, pc}
	...

080065f8 <_free_r>:
 80065f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065fa:	2900      	cmp	r1, #0
 80065fc:	d044      	beq.n	8006688 <_free_r+0x90>
 80065fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006602:	9001      	str	r0, [sp, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f1a1 0404 	sub.w	r4, r1, #4
 800660a:	bfb8      	it	lt
 800660c:	18e4      	addlt	r4, r4, r3
 800660e:	f000 f8df 	bl	80067d0 <__malloc_lock>
 8006612:	4a1e      	ldr	r2, [pc, #120]	; (800668c <_free_r+0x94>)
 8006614:	9801      	ldr	r0, [sp, #4]
 8006616:	6813      	ldr	r3, [r2, #0]
 8006618:	b933      	cbnz	r3, 8006628 <_free_r+0x30>
 800661a:	6063      	str	r3, [r4, #4]
 800661c:	6014      	str	r4, [r2, #0]
 800661e:	b003      	add	sp, #12
 8006620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006624:	f000 b8da 	b.w	80067dc <__malloc_unlock>
 8006628:	42a3      	cmp	r3, r4
 800662a:	d908      	bls.n	800663e <_free_r+0x46>
 800662c:	6825      	ldr	r5, [r4, #0]
 800662e:	1961      	adds	r1, r4, r5
 8006630:	428b      	cmp	r3, r1
 8006632:	bf01      	itttt	eq
 8006634:	6819      	ldreq	r1, [r3, #0]
 8006636:	685b      	ldreq	r3, [r3, #4]
 8006638:	1949      	addeq	r1, r1, r5
 800663a:	6021      	streq	r1, [r4, #0]
 800663c:	e7ed      	b.n	800661a <_free_r+0x22>
 800663e:	461a      	mov	r2, r3
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	b10b      	cbz	r3, 8006648 <_free_r+0x50>
 8006644:	42a3      	cmp	r3, r4
 8006646:	d9fa      	bls.n	800663e <_free_r+0x46>
 8006648:	6811      	ldr	r1, [r2, #0]
 800664a:	1855      	adds	r5, r2, r1
 800664c:	42a5      	cmp	r5, r4
 800664e:	d10b      	bne.n	8006668 <_free_r+0x70>
 8006650:	6824      	ldr	r4, [r4, #0]
 8006652:	4421      	add	r1, r4
 8006654:	1854      	adds	r4, r2, r1
 8006656:	42a3      	cmp	r3, r4
 8006658:	6011      	str	r1, [r2, #0]
 800665a:	d1e0      	bne.n	800661e <_free_r+0x26>
 800665c:	681c      	ldr	r4, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	6053      	str	r3, [r2, #4]
 8006662:	440c      	add	r4, r1
 8006664:	6014      	str	r4, [r2, #0]
 8006666:	e7da      	b.n	800661e <_free_r+0x26>
 8006668:	d902      	bls.n	8006670 <_free_r+0x78>
 800666a:	230c      	movs	r3, #12
 800666c:	6003      	str	r3, [r0, #0]
 800666e:	e7d6      	b.n	800661e <_free_r+0x26>
 8006670:	6825      	ldr	r5, [r4, #0]
 8006672:	1961      	adds	r1, r4, r5
 8006674:	428b      	cmp	r3, r1
 8006676:	bf04      	itt	eq
 8006678:	6819      	ldreq	r1, [r3, #0]
 800667a:	685b      	ldreq	r3, [r3, #4]
 800667c:	6063      	str	r3, [r4, #4]
 800667e:	bf04      	itt	eq
 8006680:	1949      	addeq	r1, r1, r5
 8006682:	6021      	streq	r1, [r4, #0]
 8006684:	6054      	str	r4, [r2, #4]
 8006686:	e7ca      	b.n	800661e <_free_r+0x26>
 8006688:	b003      	add	sp, #12
 800668a:	bd30      	pop	{r4, r5, pc}
 800668c:	20004264 	.word	0x20004264

08006690 <sbrk_aligned>:
 8006690:	b570      	push	{r4, r5, r6, lr}
 8006692:	4e0e      	ldr	r6, [pc, #56]	; (80066cc <sbrk_aligned+0x3c>)
 8006694:	460c      	mov	r4, r1
 8006696:	6831      	ldr	r1, [r6, #0]
 8006698:	4605      	mov	r5, r0
 800669a:	b911      	cbnz	r1, 80066a2 <sbrk_aligned+0x12>
 800669c:	f000 fcaa 	bl	8006ff4 <_sbrk_r>
 80066a0:	6030      	str	r0, [r6, #0]
 80066a2:	4621      	mov	r1, r4
 80066a4:	4628      	mov	r0, r5
 80066a6:	f000 fca5 	bl	8006ff4 <_sbrk_r>
 80066aa:	1c43      	adds	r3, r0, #1
 80066ac:	d00a      	beq.n	80066c4 <sbrk_aligned+0x34>
 80066ae:	1cc4      	adds	r4, r0, #3
 80066b0:	f024 0403 	bic.w	r4, r4, #3
 80066b4:	42a0      	cmp	r0, r4
 80066b6:	d007      	beq.n	80066c8 <sbrk_aligned+0x38>
 80066b8:	1a21      	subs	r1, r4, r0
 80066ba:	4628      	mov	r0, r5
 80066bc:	f000 fc9a 	bl	8006ff4 <_sbrk_r>
 80066c0:	3001      	adds	r0, #1
 80066c2:	d101      	bne.n	80066c8 <sbrk_aligned+0x38>
 80066c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80066c8:	4620      	mov	r0, r4
 80066ca:	bd70      	pop	{r4, r5, r6, pc}
 80066cc:	20004268 	.word	0x20004268

080066d0 <_malloc_r>:
 80066d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d4:	1ccd      	adds	r5, r1, #3
 80066d6:	f025 0503 	bic.w	r5, r5, #3
 80066da:	3508      	adds	r5, #8
 80066dc:	2d0c      	cmp	r5, #12
 80066de:	bf38      	it	cc
 80066e0:	250c      	movcc	r5, #12
 80066e2:	2d00      	cmp	r5, #0
 80066e4:	4607      	mov	r7, r0
 80066e6:	db01      	blt.n	80066ec <_malloc_r+0x1c>
 80066e8:	42a9      	cmp	r1, r5
 80066ea:	d905      	bls.n	80066f8 <_malloc_r+0x28>
 80066ec:	230c      	movs	r3, #12
 80066ee:	603b      	str	r3, [r7, #0]
 80066f0:	2600      	movs	r6, #0
 80066f2:	4630      	mov	r0, r6
 80066f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067cc <_malloc_r+0xfc>
 80066fc:	f000 f868 	bl	80067d0 <__malloc_lock>
 8006700:	f8d8 3000 	ldr.w	r3, [r8]
 8006704:	461c      	mov	r4, r3
 8006706:	bb5c      	cbnz	r4, 8006760 <_malloc_r+0x90>
 8006708:	4629      	mov	r1, r5
 800670a:	4638      	mov	r0, r7
 800670c:	f7ff ffc0 	bl	8006690 <sbrk_aligned>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	4604      	mov	r4, r0
 8006714:	d155      	bne.n	80067c2 <_malloc_r+0xf2>
 8006716:	f8d8 4000 	ldr.w	r4, [r8]
 800671a:	4626      	mov	r6, r4
 800671c:	2e00      	cmp	r6, #0
 800671e:	d145      	bne.n	80067ac <_malloc_r+0xdc>
 8006720:	2c00      	cmp	r4, #0
 8006722:	d048      	beq.n	80067b6 <_malloc_r+0xe6>
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	4631      	mov	r1, r6
 8006728:	4638      	mov	r0, r7
 800672a:	eb04 0903 	add.w	r9, r4, r3
 800672e:	f000 fc61 	bl	8006ff4 <_sbrk_r>
 8006732:	4581      	cmp	r9, r0
 8006734:	d13f      	bne.n	80067b6 <_malloc_r+0xe6>
 8006736:	6821      	ldr	r1, [r4, #0]
 8006738:	1a6d      	subs	r5, r5, r1
 800673a:	4629      	mov	r1, r5
 800673c:	4638      	mov	r0, r7
 800673e:	f7ff ffa7 	bl	8006690 <sbrk_aligned>
 8006742:	3001      	adds	r0, #1
 8006744:	d037      	beq.n	80067b6 <_malloc_r+0xe6>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	442b      	add	r3, r5
 800674a:	6023      	str	r3, [r4, #0]
 800674c:	f8d8 3000 	ldr.w	r3, [r8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d038      	beq.n	80067c6 <_malloc_r+0xf6>
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	42a2      	cmp	r2, r4
 8006758:	d12b      	bne.n	80067b2 <_malloc_r+0xe2>
 800675a:	2200      	movs	r2, #0
 800675c:	605a      	str	r2, [r3, #4]
 800675e:	e00f      	b.n	8006780 <_malloc_r+0xb0>
 8006760:	6822      	ldr	r2, [r4, #0]
 8006762:	1b52      	subs	r2, r2, r5
 8006764:	d41f      	bmi.n	80067a6 <_malloc_r+0xd6>
 8006766:	2a0b      	cmp	r2, #11
 8006768:	d917      	bls.n	800679a <_malloc_r+0xca>
 800676a:	1961      	adds	r1, r4, r5
 800676c:	42a3      	cmp	r3, r4
 800676e:	6025      	str	r5, [r4, #0]
 8006770:	bf18      	it	ne
 8006772:	6059      	strne	r1, [r3, #4]
 8006774:	6863      	ldr	r3, [r4, #4]
 8006776:	bf08      	it	eq
 8006778:	f8c8 1000 	streq.w	r1, [r8]
 800677c:	5162      	str	r2, [r4, r5]
 800677e:	604b      	str	r3, [r1, #4]
 8006780:	4638      	mov	r0, r7
 8006782:	f104 060b 	add.w	r6, r4, #11
 8006786:	f000 f829 	bl	80067dc <__malloc_unlock>
 800678a:	f026 0607 	bic.w	r6, r6, #7
 800678e:	1d23      	adds	r3, r4, #4
 8006790:	1af2      	subs	r2, r6, r3
 8006792:	d0ae      	beq.n	80066f2 <_malloc_r+0x22>
 8006794:	1b9b      	subs	r3, r3, r6
 8006796:	50a3      	str	r3, [r4, r2]
 8006798:	e7ab      	b.n	80066f2 <_malloc_r+0x22>
 800679a:	42a3      	cmp	r3, r4
 800679c:	6862      	ldr	r2, [r4, #4]
 800679e:	d1dd      	bne.n	800675c <_malloc_r+0x8c>
 80067a0:	f8c8 2000 	str.w	r2, [r8]
 80067a4:	e7ec      	b.n	8006780 <_malloc_r+0xb0>
 80067a6:	4623      	mov	r3, r4
 80067a8:	6864      	ldr	r4, [r4, #4]
 80067aa:	e7ac      	b.n	8006706 <_malloc_r+0x36>
 80067ac:	4634      	mov	r4, r6
 80067ae:	6876      	ldr	r6, [r6, #4]
 80067b0:	e7b4      	b.n	800671c <_malloc_r+0x4c>
 80067b2:	4613      	mov	r3, r2
 80067b4:	e7cc      	b.n	8006750 <_malloc_r+0x80>
 80067b6:	230c      	movs	r3, #12
 80067b8:	603b      	str	r3, [r7, #0]
 80067ba:	4638      	mov	r0, r7
 80067bc:	f000 f80e 	bl	80067dc <__malloc_unlock>
 80067c0:	e797      	b.n	80066f2 <_malloc_r+0x22>
 80067c2:	6025      	str	r5, [r4, #0]
 80067c4:	e7dc      	b.n	8006780 <_malloc_r+0xb0>
 80067c6:	605b      	str	r3, [r3, #4]
 80067c8:	deff      	udf	#255	; 0xff
 80067ca:	bf00      	nop
 80067cc:	20004264 	.word	0x20004264

080067d0 <__malloc_lock>:
 80067d0:	4801      	ldr	r0, [pc, #4]	; (80067d8 <__malloc_lock+0x8>)
 80067d2:	f7ff bf00 	b.w	80065d6 <__retarget_lock_acquire_recursive>
 80067d6:	bf00      	nop
 80067d8:	20004260 	.word	0x20004260

080067dc <__malloc_unlock>:
 80067dc:	4801      	ldr	r0, [pc, #4]	; (80067e4 <__malloc_unlock+0x8>)
 80067de:	f7ff befb 	b.w	80065d8 <__retarget_lock_release_recursive>
 80067e2:	bf00      	nop
 80067e4:	20004260 	.word	0x20004260

080067e8 <__sfputc_r>:
 80067e8:	6893      	ldr	r3, [r2, #8]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	b410      	push	{r4}
 80067f0:	6093      	str	r3, [r2, #8]
 80067f2:	da08      	bge.n	8006806 <__sfputc_r+0x1e>
 80067f4:	6994      	ldr	r4, [r2, #24]
 80067f6:	42a3      	cmp	r3, r4
 80067f8:	db01      	blt.n	80067fe <__sfputc_r+0x16>
 80067fa:	290a      	cmp	r1, #10
 80067fc:	d103      	bne.n	8006806 <__sfputc_r+0x1e>
 80067fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006802:	f7ff bdda 	b.w	80063ba <__swbuf_r>
 8006806:	6813      	ldr	r3, [r2, #0]
 8006808:	1c58      	adds	r0, r3, #1
 800680a:	6010      	str	r0, [r2, #0]
 800680c:	7019      	strb	r1, [r3, #0]
 800680e:	4608      	mov	r0, r1
 8006810:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006814:	4770      	bx	lr

08006816 <__sfputs_r>:
 8006816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006818:	4606      	mov	r6, r0
 800681a:	460f      	mov	r7, r1
 800681c:	4614      	mov	r4, r2
 800681e:	18d5      	adds	r5, r2, r3
 8006820:	42ac      	cmp	r4, r5
 8006822:	d101      	bne.n	8006828 <__sfputs_r+0x12>
 8006824:	2000      	movs	r0, #0
 8006826:	e007      	b.n	8006838 <__sfputs_r+0x22>
 8006828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800682c:	463a      	mov	r2, r7
 800682e:	4630      	mov	r0, r6
 8006830:	f7ff ffda 	bl	80067e8 <__sfputc_r>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d1f3      	bne.n	8006820 <__sfputs_r+0xa>
 8006838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800683c <_vfiprintf_r>:
 800683c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006840:	460d      	mov	r5, r1
 8006842:	b09d      	sub	sp, #116	; 0x74
 8006844:	4614      	mov	r4, r2
 8006846:	4698      	mov	r8, r3
 8006848:	4606      	mov	r6, r0
 800684a:	b118      	cbz	r0, 8006854 <_vfiprintf_r+0x18>
 800684c:	6a03      	ldr	r3, [r0, #32]
 800684e:	b90b      	cbnz	r3, 8006854 <_vfiprintf_r+0x18>
 8006850:	f7ff fccc 	bl	80061ec <__sinit>
 8006854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006856:	07d9      	lsls	r1, r3, #31
 8006858:	d405      	bmi.n	8006866 <_vfiprintf_r+0x2a>
 800685a:	89ab      	ldrh	r3, [r5, #12]
 800685c:	059a      	lsls	r2, r3, #22
 800685e:	d402      	bmi.n	8006866 <_vfiprintf_r+0x2a>
 8006860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006862:	f7ff feb8 	bl	80065d6 <__retarget_lock_acquire_recursive>
 8006866:	89ab      	ldrh	r3, [r5, #12]
 8006868:	071b      	lsls	r3, r3, #28
 800686a:	d501      	bpl.n	8006870 <_vfiprintf_r+0x34>
 800686c:	692b      	ldr	r3, [r5, #16]
 800686e:	b99b      	cbnz	r3, 8006898 <_vfiprintf_r+0x5c>
 8006870:	4629      	mov	r1, r5
 8006872:	4630      	mov	r0, r6
 8006874:	f7ff fdde 	bl	8006434 <__swsetup_r>
 8006878:	b170      	cbz	r0, 8006898 <_vfiprintf_r+0x5c>
 800687a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800687c:	07dc      	lsls	r4, r3, #31
 800687e:	d504      	bpl.n	800688a <_vfiprintf_r+0x4e>
 8006880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006884:	b01d      	add	sp, #116	; 0x74
 8006886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688a:	89ab      	ldrh	r3, [r5, #12]
 800688c:	0598      	lsls	r0, r3, #22
 800688e:	d4f7      	bmi.n	8006880 <_vfiprintf_r+0x44>
 8006890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006892:	f7ff fea1 	bl	80065d8 <__retarget_lock_release_recursive>
 8006896:	e7f3      	b.n	8006880 <_vfiprintf_r+0x44>
 8006898:	2300      	movs	r3, #0
 800689a:	9309      	str	r3, [sp, #36]	; 0x24
 800689c:	2320      	movs	r3, #32
 800689e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80068a6:	2330      	movs	r3, #48	; 0x30
 80068a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006a5c <_vfiprintf_r+0x220>
 80068ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068b0:	f04f 0901 	mov.w	r9, #1
 80068b4:	4623      	mov	r3, r4
 80068b6:	469a      	mov	sl, r3
 80068b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068bc:	b10a      	cbz	r2, 80068c2 <_vfiprintf_r+0x86>
 80068be:	2a25      	cmp	r2, #37	; 0x25
 80068c0:	d1f9      	bne.n	80068b6 <_vfiprintf_r+0x7a>
 80068c2:	ebba 0b04 	subs.w	fp, sl, r4
 80068c6:	d00b      	beq.n	80068e0 <_vfiprintf_r+0xa4>
 80068c8:	465b      	mov	r3, fp
 80068ca:	4622      	mov	r2, r4
 80068cc:	4629      	mov	r1, r5
 80068ce:	4630      	mov	r0, r6
 80068d0:	f7ff ffa1 	bl	8006816 <__sfputs_r>
 80068d4:	3001      	adds	r0, #1
 80068d6:	f000 80a9 	beq.w	8006a2c <_vfiprintf_r+0x1f0>
 80068da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068dc:	445a      	add	r2, fp
 80068de:	9209      	str	r2, [sp, #36]	; 0x24
 80068e0:	f89a 3000 	ldrb.w	r3, [sl]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 80a1 	beq.w	8006a2c <_vfiprintf_r+0x1f0>
 80068ea:	2300      	movs	r3, #0
 80068ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068f4:	f10a 0a01 	add.w	sl, sl, #1
 80068f8:	9304      	str	r3, [sp, #16]
 80068fa:	9307      	str	r3, [sp, #28]
 80068fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006900:	931a      	str	r3, [sp, #104]	; 0x68
 8006902:	4654      	mov	r4, sl
 8006904:	2205      	movs	r2, #5
 8006906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800690a:	4854      	ldr	r0, [pc, #336]	; (8006a5c <_vfiprintf_r+0x220>)
 800690c:	f7f9 fc80 	bl	8000210 <memchr>
 8006910:	9a04      	ldr	r2, [sp, #16]
 8006912:	b9d8      	cbnz	r0, 800694c <_vfiprintf_r+0x110>
 8006914:	06d1      	lsls	r1, r2, #27
 8006916:	bf44      	itt	mi
 8006918:	2320      	movmi	r3, #32
 800691a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800691e:	0713      	lsls	r3, r2, #28
 8006920:	bf44      	itt	mi
 8006922:	232b      	movmi	r3, #43	; 0x2b
 8006924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006928:	f89a 3000 	ldrb.w	r3, [sl]
 800692c:	2b2a      	cmp	r3, #42	; 0x2a
 800692e:	d015      	beq.n	800695c <_vfiprintf_r+0x120>
 8006930:	9a07      	ldr	r2, [sp, #28]
 8006932:	4654      	mov	r4, sl
 8006934:	2000      	movs	r0, #0
 8006936:	f04f 0c0a 	mov.w	ip, #10
 800693a:	4621      	mov	r1, r4
 800693c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006940:	3b30      	subs	r3, #48	; 0x30
 8006942:	2b09      	cmp	r3, #9
 8006944:	d94d      	bls.n	80069e2 <_vfiprintf_r+0x1a6>
 8006946:	b1b0      	cbz	r0, 8006976 <_vfiprintf_r+0x13a>
 8006948:	9207      	str	r2, [sp, #28]
 800694a:	e014      	b.n	8006976 <_vfiprintf_r+0x13a>
 800694c:	eba0 0308 	sub.w	r3, r0, r8
 8006950:	fa09 f303 	lsl.w	r3, r9, r3
 8006954:	4313      	orrs	r3, r2
 8006956:	9304      	str	r3, [sp, #16]
 8006958:	46a2      	mov	sl, r4
 800695a:	e7d2      	b.n	8006902 <_vfiprintf_r+0xc6>
 800695c:	9b03      	ldr	r3, [sp, #12]
 800695e:	1d19      	adds	r1, r3, #4
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	9103      	str	r1, [sp, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	bfbb      	ittet	lt
 8006968:	425b      	neglt	r3, r3
 800696a:	f042 0202 	orrlt.w	r2, r2, #2
 800696e:	9307      	strge	r3, [sp, #28]
 8006970:	9307      	strlt	r3, [sp, #28]
 8006972:	bfb8      	it	lt
 8006974:	9204      	strlt	r2, [sp, #16]
 8006976:	7823      	ldrb	r3, [r4, #0]
 8006978:	2b2e      	cmp	r3, #46	; 0x2e
 800697a:	d10c      	bne.n	8006996 <_vfiprintf_r+0x15a>
 800697c:	7863      	ldrb	r3, [r4, #1]
 800697e:	2b2a      	cmp	r3, #42	; 0x2a
 8006980:	d134      	bne.n	80069ec <_vfiprintf_r+0x1b0>
 8006982:	9b03      	ldr	r3, [sp, #12]
 8006984:	1d1a      	adds	r2, r3, #4
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	9203      	str	r2, [sp, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	bfb8      	it	lt
 800698e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006992:	3402      	adds	r4, #2
 8006994:	9305      	str	r3, [sp, #20]
 8006996:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006a6c <_vfiprintf_r+0x230>
 800699a:	7821      	ldrb	r1, [r4, #0]
 800699c:	2203      	movs	r2, #3
 800699e:	4650      	mov	r0, sl
 80069a0:	f7f9 fc36 	bl	8000210 <memchr>
 80069a4:	b138      	cbz	r0, 80069b6 <_vfiprintf_r+0x17a>
 80069a6:	9b04      	ldr	r3, [sp, #16]
 80069a8:	eba0 000a 	sub.w	r0, r0, sl
 80069ac:	2240      	movs	r2, #64	; 0x40
 80069ae:	4082      	lsls	r2, r0
 80069b0:	4313      	orrs	r3, r2
 80069b2:	3401      	adds	r4, #1
 80069b4:	9304      	str	r3, [sp, #16]
 80069b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ba:	4829      	ldr	r0, [pc, #164]	; (8006a60 <_vfiprintf_r+0x224>)
 80069bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069c0:	2206      	movs	r2, #6
 80069c2:	f7f9 fc25 	bl	8000210 <memchr>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d03f      	beq.n	8006a4a <_vfiprintf_r+0x20e>
 80069ca:	4b26      	ldr	r3, [pc, #152]	; (8006a64 <_vfiprintf_r+0x228>)
 80069cc:	bb1b      	cbnz	r3, 8006a16 <_vfiprintf_r+0x1da>
 80069ce:	9b03      	ldr	r3, [sp, #12]
 80069d0:	3307      	adds	r3, #7
 80069d2:	f023 0307 	bic.w	r3, r3, #7
 80069d6:	3308      	adds	r3, #8
 80069d8:	9303      	str	r3, [sp, #12]
 80069da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069dc:	443b      	add	r3, r7
 80069de:	9309      	str	r3, [sp, #36]	; 0x24
 80069e0:	e768      	b.n	80068b4 <_vfiprintf_r+0x78>
 80069e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80069e6:	460c      	mov	r4, r1
 80069e8:	2001      	movs	r0, #1
 80069ea:	e7a6      	b.n	800693a <_vfiprintf_r+0xfe>
 80069ec:	2300      	movs	r3, #0
 80069ee:	3401      	adds	r4, #1
 80069f0:	9305      	str	r3, [sp, #20]
 80069f2:	4619      	mov	r1, r3
 80069f4:	f04f 0c0a 	mov.w	ip, #10
 80069f8:	4620      	mov	r0, r4
 80069fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069fe:	3a30      	subs	r2, #48	; 0x30
 8006a00:	2a09      	cmp	r2, #9
 8006a02:	d903      	bls.n	8006a0c <_vfiprintf_r+0x1d0>
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0c6      	beq.n	8006996 <_vfiprintf_r+0x15a>
 8006a08:	9105      	str	r1, [sp, #20]
 8006a0a:	e7c4      	b.n	8006996 <_vfiprintf_r+0x15a>
 8006a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a10:	4604      	mov	r4, r0
 8006a12:	2301      	movs	r3, #1
 8006a14:	e7f0      	b.n	80069f8 <_vfiprintf_r+0x1bc>
 8006a16:	ab03      	add	r3, sp, #12
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	462a      	mov	r2, r5
 8006a1c:	4b12      	ldr	r3, [pc, #72]	; (8006a68 <_vfiprintf_r+0x22c>)
 8006a1e:	a904      	add	r1, sp, #16
 8006a20:	4630      	mov	r0, r6
 8006a22:	f3af 8000 	nop.w
 8006a26:	4607      	mov	r7, r0
 8006a28:	1c78      	adds	r0, r7, #1
 8006a2a:	d1d6      	bne.n	80069da <_vfiprintf_r+0x19e>
 8006a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a2e:	07d9      	lsls	r1, r3, #31
 8006a30:	d405      	bmi.n	8006a3e <_vfiprintf_r+0x202>
 8006a32:	89ab      	ldrh	r3, [r5, #12]
 8006a34:	059a      	lsls	r2, r3, #22
 8006a36:	d402      	bmi.n	8006a3e <_vfiprintf_r+0x202>
 8006a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a3a:	f7ff fdcd 	bl	80065d8 <__retarget_lock_release_recursive>
 8006a3e:	89ab      	ldrh	r3, [r5, #12]
 8006a40:	065b      	lsls	r3, r3, #25
 8006a42:	f53f af1d 	bmi.w	8006880 <_vfiprintf_r+0x44>
 8006a46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a48:	e71c      	b.n	8006884 <_vfiprintf_r+0x48>
 8006a4a:	ab03      	add	r3, sp, #12
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	462a      	mov	r2, r5
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <_vfiprintf_r+0x22c>)
 8006a52:	a904      	add	r1, sp, #16
 8006a54:	4630      	mov	r0, r6
 8006a56:	f000 f879 	bl	8006b4c <_printf_i>
 8006a5a:	e7e4      	b.n	8006a26 <_vfiprintf_r+0x1ea>
 8006a5c:	080070f0 	.word	0x080070f0
 8006a60:	080070fa 	.word	0x080070fa
 8006a64:	00000000 	.word	0x00000000
 8006a68:	08006817 	.word	0x08006817
 8006a6c:	080070f6 	.word	0x080070f6

08006a70 <_printf_common>:
 8006a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a74:	4616      	mov	r6, r2
 8006a76:	4699      	mov	r9, r3
 8006a78:	688a      	ldr	r2, [r1, #8]
 8006a7a:	690b      	ldr	r3, [r1, #16]
 8006a7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a80:	4293      	cmp	r3, r2
 8006a82:	bfb8      	it	lt
 8006a84:	4613      	movlt	r3, r2
 8006a86:	6033      	str	r3, [r6, #0]
 8006a88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a8c:	4607      	mov	r7, r0
 8006a8e:	460c      	mov	r4, r1
 8006a90:	b10a      	cbz	r2, 8006a96 <_printf_common+0x26>
 8006a92:	3301      	adds	r3, #1
 8006a94:	6033      	str	r3, [r6, #0]
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	0699      	lsls	r1, r3, #26
 8006a9a:	bf42      	ittt	mi
 8006a9c:	6833      	ldrmi	r3, [r6, #0]
 8006a9e:	3302      	addmi	r3, #2
 8006aa0:	6033      	strmi	r3, [r6, #0]
 8006aa2:	6825      	ldr	r5, [r4, #0]
 8006aa4:	f015 0506 	ands.w	r5, r5, #6
 8006aa8:	d106      	bne.n	8006ab8 <_printf_common+0x48>
 8006aaa:	f104 0a19 	add.w	sl, r4, #25
 8006aae:	68e3      	ldr	r3, [r4, #12]
 8006ab0:	6832      	ldr	r2, [r6, #0]
 8006ab2:	1a9b      	subs	r3, r3, r2
 8006ab4:	42ab      	cmp	r3, r5
 8006ab6:	dc26      	bgt.n	8006b06 <_printf_common+0x96>
 8006ab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006abc:	1e13      	subs	r3, r2, #0
 8006abe:	6822      	ldr	r2, [r4, #0]
 8006ac0:	bf18      	it	ne
 8006ac2:	2301      	movne	r3, #1
 8006ac4:	0692      	lsls	r2, r2, #26
 8006ac6:	d42b      	bmi.n	8006b20 <_printf_common+0xb0>
 8006ac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006acc:	4649      	mov	r1, r9
 8006ace:	4638      	mov	r0, r7
 8006ad0:	47c0      	blx	r8
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	d01e      	beq.n	8006b14 <_printf_common+0xa4>
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	6922      	ldr	r2, [r4, #16]
 8006ada:	f003 0306 	and.w	r3, r3, #6
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	bf02      	ittt	eq
 8006ae2:	68e5      	ldreq	r5, [r4, #12]
 8006ae4:	6833      	ldreq	r3, [r6, #0]
 8006ae6:	1aed      	subeq	r5, r5, r3
 8006ae8:	68a3      	ldr	r3, [r4, #8]
 8006aea:	bf0c      	ite	eq
 8006aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006af0:	2500      	movne	r5, #0
 8006af2:	4293      	cmp	r3, r2
 8006af4:	bfc4      	itt	gt
 8006af6:	1a9b      	subgt	r3, r3, r2
 8006af8:	18ed      	addgt	r5, r5, r3
 8006afa:	2600      	movs	r6, #0
 8006afc:	341a      	adds	r4, #26
 8006afe:	42b5      	cmp	r5, r6
 8006b00:	d11a      	bne.n	8006b38 <_printf_common+0xc8>
 8006b02:	2000      	movs	r0, #0
 8006b04:	e008      	b.n	8006b18 <_printf_common+0xa8>
 8006b06:	2301      	movs	r3, #1
 8006b08:	4652      	mov	r2, sl
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	47c0      	blx	r8
 8006b10:	3001      	adds	r0, #1
 8006b12:	d103      	bne.n	8006b1c <_printf_common+0xac>
 8006b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	e7c6      	b.n	8006aae <_printf_common+0x3e>
 8006b20:	18e1      	adds	r1, r4, r3
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	2030      	movs	r0, #48	; 0x30
 8006b26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b2a:	4422      	add	r2, r4
 8006b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b34:	3302      	adds	r3, #2
 8006b36:	e7c7      	b.n	8006ac8 <_printf_common+0x58>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4622      	mov	r2, r4
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	4638      	mov	r0, r7
 8006b40:	47c0      	blx	r8
 8006b42:	3001      	adds	r0, #1
 8006b44:	d0e6      	beq.n	8006b14 <_printf_common+0xa4>
 8006b46:	3601      	adds	r6, #1
 8006b48:	e7d9      	b.n	8006afe <_printf_common+0x8e>
	...

08006b4c <_printf_i>:
 8006b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b50:	7e0f      	ldrb	r7, [r1, #24]
 8006b52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b54:	2f78      	cmp	r7, #120	; 0x78
 8006b56:	4691      	mov	r9, r2
 8006b58:	4680      	mov	r8, r0
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	469a      	mov	sl, r3
 8006b5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b62:	d807      	bhi.n	8006b74 <_printf_i+0x28>
 8006b64:	2f62      	cmp	r7, #98	; 0x62
 8006b66:	d80a      	bhi.n	8006b7e <_printf_i+0x32>
 8006b68:	2f00      	cmp	r7, #0
 8006b6a:	f000 80d4 	beq.w	8006d16 <_printf_i+0x1ca>
 8006b6e:	2f58      	cmp	r7, #88	; 0x58
 8006b70:	f000 80c0 	beq.w	8006cf4 <_printf_i+0x1a8>
 8006b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b7c:	e03a      	b.n	8006bf4 <_printf_i+0xa8>
 8006b7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b82:	2b15      	cmp	r3, #21
 8006b84:	d8f6      	bhi.n	8006b74 <_printf_i+0x28>
 8006b86:	a101      	add	r1, pc, #4	; (adr r1, 8006b8c <_printf_i+0x40>)
 8006b88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b8c:	08006be5 	.word	0x08006be5
 8006b90:	08006bf9 	.word	0x08006bf9
 8006b94:	08006b75 	.word	0x08006b75
 8006b98:	08006b75 	.word	0x08006b75
 8006b9c:	08006b75 	.word	0x08006b75
 8006ba0:	08006b75 	.word	0x08006b75
 8006ba4:	08006bf9 	.word	0x08006bf9
 8006ba8:	08006b75 	.word	0x08006b75
 8006bac:	08006b75 	.word	0x08006b75
 8006bb0:	08006b75 	.word	0x08006b75
 8006bb4:	08006b75 	.word	0x08006b75
 8006bb8:	08006cfd 	.word	0x08006cfd
 8006bbc:	08006c25 	.word	0x08006c25
 8006bc0:	08006cb7 	.word	0x08006cb7
 8006bc4:	08006b75 	.word	0x08006b75
 8006bc8:	08006b75 	.word	0x08006b75
 8006bcc:	08006d1f 	.word	0x08006d1f
 8006bd0:	08006b75 	.word	0x08006b75
 8006bd4:	08006c25 	.word	0x08006c25
 8006bd8:	08006b75 	.word	0x08006b75
 8006bdc:	08006b75 	.word	0x08006b75
 8006be0:	08006cbf 	.word	0x08006cbf
 8006be4:	682b      	ldr	r3, [r5, #0]
 8006be6:	1d1a      	adds	r2, r3, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	602a      	str	r2, [r5, #0]
 8006bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e09f      	b.n	8006d38 <_printf_i+0x1ec>
 8006bf8:	6820      	ldr	r0, [r4, #0]
 8006bfa:	682b      	ldr	r3, [r5, #0]
 8006bfc:	0607      	lsls	r7, r0, #24
 8006bfe:	f103 0104 	add.w	r1, r3, #4
 8006c02:	6029      	str	r1, [r5, #0]
 8006c04:	d501      	bpl.n	8006c0a <_printf_i+0xbe>
 8006c06:	681e      	ldr	r6, [r3, #0]
 8006c08:	e003      	b.n	8006c12 <_printf_i+0xc6>
 8006c0a:	0646      	lsls	r6, r0, #25
 8006c0c:	d5fb      	bpl.n	8006c06 <_printf_i+0xba>
 8006c0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c12:	2e00      	cmp	r6, #0
 8006c14:	da03      	bge.n	8006c1e <_printf_i+0xd2>
 8006c16:	232d      	movs	r3, #45	; 0x2d
 8006c18:	4276      	negs	r6, r6
 8006c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c1e:	485a      	ldr	r0, [pc, #360]	; (8006d88 <_printf_i+0x23c>)
 8006c20:	230a      	movs	r3, #10
 8006c22:	e012      	b.n	8006c4a <_printf_i+0xfe>
 8006c24:	682b      	ldr	r3, [r5, #0]
 8006c26:	6820      	ldr	r0, [r4, #0]
 8006c28:	1d19      	adds	r1, r3, #4
 8006c2a:	6029      	str	r1, [r5, #0]
 8006c2c:	0605      	lsls	r5, r0, #24
 8006c2e:	d501      	bpl.n	8006c34 <_printf_i+0xe8>
 8006c30:	681e      	ldr	r6, [r3, #0]
 8006c32:	e002      	b.n	8006c3a <_printf_i+0xee>
 8006c34:	0641      	lsls	r1, r0, #25
 8006c36:	d5fb      	bpl.n	8006c30 <_printf_i+0xe4>
 8006c38:	881e      	ldrh	r6, [r3, #0]
 8006c3a:	4853      	ldr	r0, [pc, #332]	; (8006d88 <_printf_i+0x23c>)
 8006c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c3e:	bf0c      	ite	eq
 8006c40:	2308      	moveq	r3, #8
 8006c42:	230a      	movne	r3, #10
 8006c44:	2100      	movs	r1, #0
 8006c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c4a:	6865      	ldr	r5, [r4, #4]
 8006c4c:	60a5      	str	r5, [r4, #8]
 8006c4e:	2d00      	cmp	r5, #0
 8006c50:	bfa2      	ittt	ge
 8006c52:	6821      	ldrge	r1, [r4, #0]
 8006c54:	f021 0104 	bicge.w	r1, r1, #4
 8006c58:	6021      	strge	r1, [r4, #0]
 8006c5a:	b90e      	cbnz	r6, 8006c60 <_printf_i+0x114>
 8006c5c:	2d00      	cmp	r5, #0
 8006c5e:	d04b      	beq.n	8006cf8 <_printf_i+0x1ac>
 8006c60:	4615      	mov	r5, r2
 8006c62:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c66:	fb03 6711 	mls	r7, r3, r1, r6
 8006c6a:	5dc7      	ldrb	r7, [r0, r7]
 8006c6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c70:	4637      	mov	r7, r6
 8006c72:	42bb      	cmp	r3, r7
 8006c74:	460e      	mov	r6, r1
 8006c76:	d9f4      	bls.n	8006c62 <_printf_i+0x116>
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d10b      	bne.n	8006c94 <_printf_i+0x148>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	07de      	lsls	r6, r3, #31
 8006c80:	d508      	bpl.n	8006c94 <_printf_i+0x148>
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	6861      	ldr	r1, [r4, #4]
 8006c86:	4299      	cmp	r1, r3
 8006c88:	bfde      	ittt	le
 8006c8a:	2330      	movle	r3, #48	; 0x30
 8006c8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006c94:	1b52      	subs	r2, r2, r5
 8006c96:	6122      	str	r2, [r4, #16]
 8006c98:	f8cd a000 	str.w	sl, [sp]
 8006c9c:	464b      	mov	r3, r9
 8006c9e:	aa03      	add	r2, sp, #12
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	f7ff fee4 	bl	8006a70 <_printf_common>
 8006ca8:	3001      	adds	r0, #1
 8006caa:	d14a      	bne.n	8006d42 <_printf_i+0x1f6>
 8006cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cb0:	b004      	add	sp, #16
 8006cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	f043 0320 	orr.w	r3, r3, #32
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	4833      	ldr	r0, [pc, #204]	; (8006d8c <_printf_i+0x240>)
 8006cc0:	2778      	movs	r7, #120	; 0x78
 8006cc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	6829      	ldr	r1, [r5, #0]
 8006cca:	061f      	lsls	r7, r3, #24
 8006ccc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cd0:	d402      	bmi.n	8006cd8 <_printf_i+0x18c>
 8006cd2:	065f      	lsls	r7, r3, #25
 8006cd4:	bf48      	it	mi
 8006cd6:	b2b6      	uxthmi	r6, r6
 8006cd8:	07df      	lsls	r7, r3, #31
 8006cda:	bf48      	it	mi
 8006cdc:	f043 0320 	orrmi.w	r3, r3, #32
 8006ce0:	6029      	str	r1, [r5, #0]
 8006ce2:	bf48      	it	mi
 8006ce4:	6023      	strmi	r3, [r4, #0]
 8006ce6:	b91e      	cbnz	r6, 8006cf0 <_printf_i+0x1a4>
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	f023 0320 	bic.w	r3, r3, #32
 8006cee:	6023      	str	r3, [r4, #0]
 8006cf0:	2310      	movs	r3, #16
 8006cf2:	e7a7      	b.n	8006c44 <_printf_i+0xf8>
 8006cf4:	4824      	ldr	r0, [pc, #144]	; (8006d88 <_printf_i+0x23c>)
 8006cf6:	e7e4      	b.n	8006cc2 <_printf_i+0x176>
 8006cf8:	4615      	mov	r5, r2
 8006cfa:	e7bd      	b.n	8006c78 <_printf_i+0x12c>
 8006cfc:	682b      	ldr	r3, [r5, #0]
 8006cfe:	6826      	ldr	r6, [r4, #0]
 8006d00:	6961      	ldr	r1, [r4, #20]
 8006d02:	1d18      	adds	r0, r3, #4
 8006d04:	6028      	str	r0, [r5, #0]
 8006d06:	0635      	lsls	r5, r6, #24
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	d501      	bpl.n	8006d10 <_printf_i+0x1c4>
 8006d0c:	6019      	str	r1, [r3, #0]
 8006d0e:	e002      	b.n	8006d16 <_printf_i+0x1ca>
 8006d10:	0670      	lsls	r0, r6, #25
 8006d12:	d5fb      	bpl.n	8006d0c <_printf_i+0x1c0>
 8006d14:	8019      	strh	r1, [r3, #0]
 8006d16:	2300      	movs	r3, #0
 8006d18:	6123      	str	r3, [r4, #16]
 8006d1a:	4615      	mov	r5, r2
 8006d1c:	e7bc      	b.n	8006c98 <_printf_i+0x14c>
 8006d1e:	682b      	ldr	r3, [r5, #0]
 8006d20:	1d1a      	adds	r2, r3, #4
 8006d22:	602a      	str	r2, [r5, #0]
 8006d24:	681d      	ldr	r5, [r3, #0]
 8006d26:	6862      	ldr	r2, [r4, #4]
 8006d28:	2100      	movs	r1, #0
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	f7f9 fa70 	bl	8000210 <memchr>
 8006d30:	b108      	cbz	r0, 8006d36 <_printf_i+0x1ea>
 8006d32:	1b40      	subs	r0, r0, r5
 8006d34:	6060      	str	r0, [r4, #4]
 8006d36:	6863      	ldr	r3, [r4, #4]
 8006d38:	6123      	str	r3, [r4, #16]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d40:	e7aa      	b.n	8006c98 <_printf_i+0x14c>
 8006d42:	6923      	ldr	r3, [r4, #16]
 8006d44:	462a      	mov	r2, r5
 8006d46:	4649      	mov	r1, r9
 8006d48:	4640      	mov	r0, r8
 8006d4a:	47d0      	blx	sl
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	d0ad      	beq.n	8006cac <_printf_i+0x160>
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	079b      	lsls	r3, r3, #30
 8006d54:	d413      	bmi.n	8006d7e <_printf_i+0x232>
 8006d56:	68e0      	ldr	r0, [r4, #12]
 8006d58:	9b03      	ldr	r3, [sp, #12]
 8006d5a:	4298      	cmp	r0, r3
 8006d5c:	bfb8      	it	lt
 8006d5e:	4618      	movlt	r0, r3
 8006d60:	e7a6      	b.n	8006cb0 <_printf_i+0x164>
 8006d62:	2301      	movs	r3, #1
 8006d64:	4632      	mov	r2, r6
 8006d66:	4649      	mov	r1, r9
 8006d68:	4640      	mov	r0, r8
 8006d6a:	47d0      	blx	sl
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	d09d      	beq.n	8006cac <_printf_i+0x160>
 8006d70:	3501      	adds	r5, #1
 8006d72:	68e3      	ldr	r3, [r4, #12]
 8006d74:	9903      	ldr	r1, [sp, #12]
 8006d76:	1a5b      	subs	r3, r3, r1
 8006d78:	42ab      	cmp	r3, r5
 8006d7a:	dcf2      	bgt.n	8006d62 <_printf_i+0x216>
 8006d7c:	e7eb      	b.n	8006d56 <_printf_i+0x20a>
 8006d7e:	2500      	movs	r5, #0
 8006d80:	f104 0619 	add.w	r6, r4, #25
 8006d84:	e7f5      	b.n	8006d72 <_printf_i+0x226>
 8006d86:	bf00      	nop
 8006d88:	08007101 	.word	0x08007101
 8006d8c:	08007112 	.word	0x08007112

08006d90 <__sflush_r>:
 8006d90:	898a      	ldrh	r2, [r1, #12]
 8006d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d96:	4605      	mov	r5, r0
 8006d98:	0710      	lsls	r0, r2, #28
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	d458      	bmi.n	8006e50 <__sflush_r+0xc0>
 8006d9e:	684b      	ldr	r3, [r1, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	dc05      	bgt.n	8006db0 <__sflush_r+0x20>
 8006da4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	dc02      	bgt.n	8006db0 <__sflush_r+0x20>
 8006daa:	2000      	movs	r0, #0
 8006dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006db2:	2e00      	cmp	r6, #0
 8006db4:	d0f9      	beq.n	8006daa <__sflush_r+0x1a>
 8006db6:	2300      	movs	r3, #0
 8006db8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006dbc:	682f      	ldr	r7, [r5, #0]
 8006dbe:	6a21      	ldr	r1, [r4, #32]
 8006dc0:	602b      	str	r3, [r5, #0]
 8006dc2:	d032      	beq.n	8006e2a <__sflush_r+0x9a>
 8006dc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	075a      	lsls	r2, r3, #29
 8006dca:	d505      	bpl.n	8006dd8 <__sflush_r+0x48>
 8006dcc:	6863      	ldr	r3, [r4, #4]
 8006dce:	1ac0      	subs	r0, r0, r3
 8006dd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dd2:	b10b      	cbz	r3, 8006dd8 <__sflush_r+0x48>
 8006dd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dd6:	1ac0      	subs	r0, r0, r3
 8006dd8:	2300      	movs	r3, #0
 8006dda:	4602      	mov	r2, r0
 8006ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dde:	6a21      	ldr	r1, [r4, #32]
 8006de0:	4628      	mov	r0, r5
 8006de2:	47b0      	blx	r6
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	89a3      	ldrh	r3, [r4, #12]
 8006de8:	d106      	bne.n	8006df8 <__sflush_r+0x68>
 8006dea:	6829      	ldr	r1, [r5, #0]
 8006dec:	291d      	cmp	r1, #29
 8006dee:	d82b      	bhi.n	8006e48 <__sflush_r+0xb8>
 8006df0:	4a29      	ldr	r2, [pc, #164]	; (8006e98 <__sflush_r+0x108>)
 8006df2:	410a      	asrs	r2, r1
 8006df4:	07d6      	lsls	r6, r2, #31
 8006df6:	d427      	bmi.n	8006e48 <__sflush_r+0xb8>
 8006df8:	2200      	movs	r2, #0
 8006dfa:	6062      	str	r2, [r4, #4]
 8006dfc:	04d9      	lsls	r1, r3, #19
 8006dfe:	6922      	ldr	r2, [r4, #16]
 8006e00:	6022      	str	r2, [r4, #0]
 8006e02:	d504      	bpl.n	8006e0e <__sflush_r+0x7e>
 8006e04:	1c42      	adds	r2, r0, #1
 8006e06:	d101      	bne.n	8006e0c <__sflush_r+0x7c>
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	b903      	cbnz	r3, 8006e0e <__sflush_r+0x7e>
 8006e0c:	6560      	str	r0, [r4, #84]	; 0x54
 8006e0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e10:	602f      	str	r7, [r5, #0]
 8006e12:	2900      	cmp	r1, #0
 8006e14:	d0c9      	beq.n	8006daa <__sflush_r+0x1a>
 8006e16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e1a:	4299      	cmp	r1, r3
 8006e1c:	d002      	beq.n	8006e24 <__sflush_r+0x94>
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f7ff fbea 	bl	80065f8 <_free_r>
 8006e24:	2000      	movs	r0, #0
 8006e26:	6360      	str	r0, [r4, #52]	; 0x34
 8006e28:	e7c0      	b.n	8006dac <__sflush_r+0x1c>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	47b0      	blx	r6
 8006e30:	1c41      	adds	r1, r0, #1
 8006e32:	d1c8      	bne.n	8006dc6 <__sflush_r+0x36>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0c5      	beq.n	8006dc6 <__sflush_r+0x36>
 8006e3a:	2b1d      	cmp	r3, #29
 8006e3c:	d001      	beq.n	8006e42 <__sflush_r+0xb2>
 8006e3e:	2b16      	cmp	r3, #22
 8006e40:	d101      	bne.n	8006e46 <__sflush_r+0xb6>
 8006e42:	602f      	str	r7, [r5, #0]
 8006e44:	e7b1      	b.n	8006daa <__sflush_r+0x1a>
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e4c:	81a3      	strh	r3, [r4, #12]
 8006e4e:	e7ad      	b.n	8006dac <__sflush_r+0x1c>
 8006e50:	690f      	ldr	r7, [r1, #16]
 8006e52:	2f00      	cmp	r7, #0
 8006e54:	d0a9      	beq.n	8006daa <__sflush_r+0x1a>
 8006e56:	0793      	lsls	r3, r2, #30
 8006e58:	680e      	ldr	r6, [r1, #0]
 8006e5a:	bf08      	it	eq
 8006e5c:	694b      	ldreq	r3, [r1, #20]
 8006e5e:	600f      	str	r7, [r1, #0]
 8006e60:	bf18      	it	ne
 8006e62:	2300      	movne	r3, #0
 8006e64:	eba6 0807 	sub.w	r8, r6, r7
 8006e68:	608b      	str	r3, [r1, #8]
 8006e6a:	f1b8 0f00 	cmp.w	r8, #0
 8006e6e:	dd9c      	ble.n	8006daa <__sflush_r+0x1a>
 8006e70:	6a21      	ldr	r1, [r4, #32]
 8006e72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e74:	4643      	mov	r3, r8
 8006e76:	463a      	mov	r2, r7
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b0      	blx	r6
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	dc06      	bgt.n	8006e8e <__sflush_r+0xfe>
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e86:	81a3      	strh	r3, [r4, #12]
 8006e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e8c:	e78e      	b.n	8006dac <__sflush_r+0x1c>
 8006e8e:	4407      	add	r7, r0
 8006e90:	eba8 0800 	sub.w	r8, r8, r0
 8006e94:	e7e9      	b.n	8006e6a <__sflush_r+0xda>
 8006e96:	bf00      	nop
 8006e98:	dfbffffe 	.word	0xdfbffffe

08006e9c <_fflush_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	690b      	ldr	r3, [r1, #16]
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	b913      	cbnz	r3, 8006eac <_fflush_r+0x10>
 8006ea6:	2500      	movs	r5, #0
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	bd38      	pop	{r3, r4, r5, pc}
 8006eac:	b118      	cbz	r0, 8006eb6 <_fflush_r+0x1a>
 8006eae:	6a03      	ldr	r3, [r0, #32]
 8006eb0:	b90b      	cbnz	r3, 8006eb6 <_fflush_r+0x1a>
 8006eb2:	f7ff f99b 	bl	80061ec <__sinit>
 8006eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f3      	beq.n	8006ea6 <_fflush_r+0xa>
 8006ebe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ec0:	07d0      	lsls	r0, r2, #31
 8006ec2:	d404      	bmi.n	8006ece <_fflush_r+0x32>
 8006ec4:	0599      	lsls	r1, r3, #22
 8006ec6:	d402      	bmi.n	8006ece <_fflush_r+0x32>
 8006ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eca:	f7ff fb84 	bl	80065d6 <__retarget_lock_acquire_recursive>
 8006ece:	4628      	mov	r0, r5
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	f7ff ff5d 	bl	8006d90 <__sflush_r>
 8006ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ed8:	07da      	lsls	r2, r3, #31
 8006eda:	4605      	mov	r5, r0
 8006edc:	d4e4      	bmi.n	8006ea8 <_fflush_r+0xc>
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	059b      	lsls	r3, r3, #22
 8006ee2:	d4e1      	bmi.n	8006ea8 <_fflush_r+0xc>
 8006ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ee6:	f7ff fb77 	bl	80065d8 <__retarget_lock_release_recursive>
 8006eea:	e7dd      	b.n	8006ea8 <_fflush_r+0xc>

08006eec <__swhatbuf_r>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	460c      	mov	r4, r1
 8006ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef4:	2900      	cmp	r1, #0
 8006ef6:	b096      	sub	sp, #88	; 0x58
 8006ef8:	4615      	mov	r5, r2
 8006efa:	461e      	mov	r6, r3
 8006efc:	da0d      	bge.n	8006f1a <__swhatbuf_r+0x2e>
 8006efe:	89a3      	ldrh	r3, [r4, #12]
 8006f00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f04:	f04f 0100 	mov.w	r1, #0
 8006f08:	bf0c      	ite	eq
 8006f0a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006f0e:	2340      	movne	r3, #64	; 0x40
 8006f10:	2000      	movs	r0, #0
 8006f12:	6031      	str	r1, [r6, #0]
 8006f14:	602b      	str	r3, [r5, #0]
 8006f16:	b016      	add	sp, #88	; 0x58
 8006f18:	bd70      	pop	{r4, r5, r6, pc}
 8006f1a:	466a      	mov	r2, sp
 8006f1c:	f000 f848 	bl	8006fb0 <_fstat_r>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	dbec      	blt.n	8006efe <__swhatbuf_r+0x12>
 8006f24:	9901      	ldr	r1, [sp, #4]
 8006f26:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006f2a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006f2e:	4259      	negs	r1, r3
 8006f30:	4159      	adcs	r1, r3
 8006f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f36:	e7eb      	b.n	8006f10 <__swhatbuf_r+0x24>

08006f38 <__smakebuf_r>:
 8006f38:	898b      	ldrh	r3, [r1, #12]
 8006f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f3c:	079d      	lsls	r5, r3, #30
 8006f3e:	4606      	mov	r6, r0
 8006f40:	460c      	mov	r4, r1
 8006f42:	d507      	bpl.n	8006f54 <__smakebuf_r+0x1c>
 8006f44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	6123      	str	r3, [r4, #16]
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	6163      	str	r3, [r4, #20]
 8006f50:	b002      	add	sp, #8
 8006f52:	bd70      	pop	{r4, r5, r6, pc}
 8006f54:	ab01      	add	r3, sp, #4
 8006f56:	466a      	mov	r2, sp
 8006f58:	f7ff ffc8 	bl	8006eec <__swhatbuf_r>
 8006f5c:	9900      	ldr	r1, [sp, #0]
 8006f5e:	4605      	mov	r5, r0
 8006f60:	4630      	mov	r0, r6
 8006f62:	f7ff fbb5 	bl	80066d0 <_malloc_r>
 8006f66:	b948      	cbnz	r0, 8006f7c <__smakebuf_r+0x44>
 8006f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f6c:	059a      	lsls	r2, r3, #22
 8006f6e:	d4ef      	bmi.n	8006f50 <__smakebuf_r+0x18>
 8006f70:	f023 0303 	bic.w	r3, r3, #3
 8006f74:	f043 0302 	orr.w	r3, r3, #2
 8006f78:	81a3      	strh	r3, [r4, #12]
 8006f7a:	e7e3      	b.n	8006f44 <__smakebuf_r+0xc>
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	6020      	str	r0, [r4, #0]
 8006f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f84:	81a3      	strh	r3, [r4, #12]
 8006f86:	9b00      	ldr	r3, [sp, #0]
 8006f88:	6163      	str	r3, [r4, #20]
 8006f8a:	9b01      	ldr	r3, [sp, #4]
 8006f8c:	6120      	str	r0, [r4, #16]
 8006f8e:	b15b      	cbz	r3, 8006fa8 <__smakebuf_r+0x70>
 8006f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f94:	4630      	mov	r0, r6
 8006f96:	f000 f81d 	bl	8006fd4 <_isatty_r>
 8006f9a:	b128      	cbz	r0, 8006fa8 <__smakebuf_r+0x70>
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	f023 0303 	bic.w	r3, r3, #3
 8006fa2:	f043 0301 	orr.w	r3, r3, #1
 8006fa6:	81a3      	strh	r3, [r4, #12]
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	431d      	orrs	r5, r3
 8006fac:	81a5      	strh	r5, [r4, #12]
 8006fae:	e7cf      	b.n	8006f50 <__smakebuf_r+0x18>

08006fb0 <_fstat_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4d07      	ldr	r5, [pc, #28]	; (8006fd0 <_fstat_r+0x20>)
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	4611      	mov	r1, r2
 8006fbc:	602b      	str	r3, [r5, #0]
 8006fbe:	f7fa fa00 	bl	80013c2 <_fstat>
 8006fc2:	1c43      	adds	r3, r0, #1
 8006fc4:	d102      	bne.n	8006fcc <_fstat_r+0x1c>
 8006fc6:	682b      	ldr	r3, [r5, #0]
 8006fc8:	b103      	cbz	r3, 8006fcc <_fstat_r+0x1c>
 8006fca:	6023      	str	r3, [r4, #0]
 8006fcc:	bd38      	pop	{r3, r4, r5, pc}
 8006fce:	bf00      	nop
 8006fd0:	2000425c 	.word	0x2000425c

08006fd4 <_isatty_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4d06      	ldr	r5, [pc, #24]	; (8006ff0 <_isatty_r+0x1c>)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	4604      	mov	r4, r0
 8006fdc:	4608      	mov	r0, r1
 8006fde:	602b      	str	r3, [r5, #0]
 8006fe0:	f7fa f9ff 	bl	80013e2 <_isatty>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d102      	bne.n	8006fee <_isatty_r+0x1a>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	b103      	cbz	r3, 8006fee <_isatty_r+0x1a>
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	bd38      	pop	{r3, r4, r5, pc}
 8006ff0:	2000425c 	.word	0x2000425c

08006ff4 <_sbrk_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d06      	ldr	r5, [pc, #24]	; (8007010 <_sbrk_r+0x1c>)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	602b      	str	r3, [r5, #0]
 8007000:	f7fa fa08 	bl	8001414 <_sbrk>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_sbrk_r+0x1a>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_sbrk_r+0x1a>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	2000425c 	.word	0x2000425c

08007014 <_init>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	bf00      	nop
 8007018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701a:	bc08      	pop	{r3}
 800701c:	469e      	mov	lr, r3
 800701e:	4770      	bx	lr

08007020 <_fini>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	bf00      	nop
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr
